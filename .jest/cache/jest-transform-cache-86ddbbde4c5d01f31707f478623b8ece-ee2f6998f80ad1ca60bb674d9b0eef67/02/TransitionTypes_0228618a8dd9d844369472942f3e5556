3a85178adcc1fa3069071e3920dac1e6
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initTransitionTypes = initTransitionTypes;
exports.registerTransitionType = registerTransitionType;
exports.getTransitionType = getTransitionType;

var _getScaleTransitions = require("./getScaleTransitions");

var _getTopTransition = require("./getTopTransition");

var _getBottomTransition = require("./getBottomTransition");

var _getLeftTransition = require("./getLeftTransition");

var _getRightTransition = require("./getRightTransition");

var _getHorizontalTransition = require("./getHorizontalTransition");

var _getVerticalTransition = require("./getVerticalTransition");

var _getFlipTransition = require("./getFlipTransition");

var transitionTypes = [];

function initTransitionTypes() {
  registerTransitionType('scale', _getScaleTransitions.getScaleTransition);
  registerTransitionType('top', _getTopTransition.getTopTransition);
  registerTransitionType('bottom', _getBottomTransition.getBottomTransition);
  registerTransitionType('left', _getLeftTransition.getLeftTransition);
  registerTransitionType('right', _getRightTransition.getRightTransition);
  registerTransitionType('horizontal', _getHorizontalTransition.getHorizontalTransition);
  registerTransitionType('vertical', _getVerticalTransition.getVerticalTransition);
  registerTransitionType('flip', _getFlipTransition.getFlipTransition);
  registerTransitionType('none', function () {
    return {};
  });
}

function registerTransitionType(name, transitionFunction) {
  transitionTypes.push({
    name: name,
    transitionFunction: transitionFunction
  });
}

function getTransitionType(name) {
  var transitionType = transitionTypes.find(function (e) {
    return e.name === name;
  });
  if (transitionType) return transitionType.transitionFunction;
  return null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRyYW5zaXRpb25UeXBlcy5qcyJdLCJuYW1lcyI6WyJ0cmFuc2l0aW9uVHlwZXMiLCJpbml0VHJhbnNpdGlvblR5cGVzIiwicmVnaXN0ZXJUcmFuc2l0aW9uVHlwZSIsImdldFNjYWxlVHJhbnNpdGlvbiIsImdldFRvcFRyYW5zaXRpb24iLCJnZXRCb3R0b21UcmFuc2l0aW9uIiwiZ2V0TGVmdFRyYW5zaXRpb24iLCJnZXRSaWdodFRyYW5zaXRpb24iLCJnZXRIb3Jpem9udGFsVHJhbnNpdGlvbiIsImdldFZlcnRpY2FsVHJhbnNpdGlvbiIsImdldEZsaXBUcmFuc2l0aW9uIiwibmFtZSIsInRyYW5zaXRpb25GdW5jdGlvbiIsInB1c2giLCJnZXRUcmFuc2l0aW9uVHlwZSIsInRyYW5zaXRpb25UeXBlIiwiZmluZCIsImUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFPQSxJQUFNQSxlQUF1QyxHQUFHLEVBQWhEOztBQUVPLFNBQVNDLG1CQUFULEdBQStCO0FBQ3BDQyxFQUFBQSxzQkFBc0IsQ0FBQyxPQUFELEVBQVVDLHVDQUFWLENBQXRCO0FBQ0FELEVBQUFBLHNCQUFzQixDQUFDLEtBQUQsRUFBUUUsa0NBQVIsQ0FBdEI7QUFDQUYsRUFBQUEsc0JBQXNCLENBQUMsUUFBRCxFQUFXRyx3Q0FBWCxDQUF0QjtBQUNBSCxFQUFBQSxzQkFBc0IsQ0FBQyxNQUFELEVBQVNJLG9DQUFULENBQXRCO0FBQ0FKLEVBQUFBLHNCQUFzQixDQUFDLE9BQUQsRUFBVUssc0NBQVYsQ0FBdEI7QUFDQUwsRUFBQUEsc0JBQXNCLENBQUMsWUFBRCxFQUFlTSxnREFBZixDQUF0QjtBQUNBTixFQUFBQSxzQkFBc0IsQ0FBQyxVQUFELEVBQWFPLDRDQUFiLENBQXRCO0FBQ0FQLEVBQUFBLHNCQUFzQixDQUFDLE1BQUQsRUFBU1Esb0NBQVQsQ0FBdEI7QUFDQVIsRUFBQUEsc0JBQXNCLENBQUMsTUFBRCxFQUFTO0FBQUEsV0FBTyxFQUFQO0FBQUEsR0FBVCxDQUF0QjtBQUNEOztBQUVNLFNBQVNBLHNCQUFULENBQWdDUyxJQUFoQyxFQUNMQyxrQkFESyxFQUMwQztBQUMvQ1osRUFBQUEsZUFBZSxDQUFDYSxJQUFoQixDQUFxQjtBQUFFRixJQUFBQSxJQUFJLEVBQUpBLElBQUY7QUFBUUMsSUFBQUEsa0JBQWtCLEVBQWxCQTtBQUFSLEdBQXJCO0FBQ0Q7O0FBRU0sU0FBU0UsaUJBQVQsQ0FBMkJILElBQTNCLEVBQW1EO0FBQ3hELE1BQU1JLGNBQWMsR0FBR2YsZUFBZSxDQUFDZ0IsSUFBaEIsQ0FBcUIsVUFBQUMsQ0FBQztBQUFBLFdBQUlBLENBQUMsQ0FBQ04sSUFBRixLQUFXQSxJQUFmO0FBQUEsR0FBdEIsQ0FBdkI7QUFDQSxNQUFJSSxjQUFKLEVBQW9CLE9BQU9BLGNBQWMsQ0FBQ0gsa0JBQXRCO0FBQ3BCLFNBQU8sSUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0U2NhbGVUcmFuc2l0aW9uIH0gZnJvbSAnLi9nZXRTY2FsZVRyYW5zaXRpb25zJztcbmltcG9ydCB7IGdldFRvcFRyYW5zaXRpb24gfSBmcm9tICcuL2dldFRvcFRyYW5zaXRpb24nO1xuaW1wb3J0IHsgZ2V0Qm90dG9tVHJhbnNpdGlvbiB9IGZyb20gJy4vZ2V0Qm90dG9tVHJhbnNpdGlvbic7XG5pbXBvcnQgeyBnZXRMZWZ0VHJhbnNpdGlvbiB9IGZyb20gJy4vZ2V0TGVmdFRyYW5zaXRpb24nO1xuaW1wb3J0IHsgZ2V0UmlnaHRUcmFuc2l0aW9uIH0gZnJvbSAnLi9nZXRSaWdodFRyYW5zaXRpb24nO1xuaW1wb3J0IHsgZ2V0SG9yaXpvbnRhbFRyYW5zaXRpb24gfSBmcm9tICcuL2dldEhvcml6b250YWxUcmFuc2l0aW9uJztcbmltcG9ydCB7IGdldFZlcnRpY2FsVHJhbnNpdGlvbiB9IGZyb20gJy4vZ2V0VmVydGljYWxUcmFuc2l0aW9uJztcbmltcG9ydCB7IGdldEZsaXBUcmFuc2l0aW9uIH0gZnJvbSAnLi9nZXRGbGlwVHJhbnNpdGlvbic7XG5cbnR5cGUgVHJhbnNpdGlvbkVudHJ5ID0ge1xuICBuYW1lOiBzdHJpbmcsXG4gIHRyYW5zaXRpb25GdW5jdGlvbjogRnVuY3Rpb25cbn1cblxuY29uc3QgdHJhbnNpdGlvblR5cGVzOiBBcnJheTxUcmFuc2l0aW9uRW50cnk+ID0gW107XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0VHJhbnNpdGlvblR5cGVzKCkge1xuICByZWdpc3RlclRyYW5zaXRpb25UeXBlKCdzY2FsZScsIGdldFNjYWxlVHJhbnNpdGlvbik7XG4gIHJlZ2lzdGVyVHJhbnNpdGlvblR5cGUoJ3RvcCcsIGdldFRvcFRyYW5zaXRpb24pO1xuICByZWdpc3RlclRyYW5zaXRpb25UeXBlKCdib3R0b20nLCBnZXRCb3R0b21UcmFuc2l0aW9uKTtcbiAgcmVnaXN0ZXJUcmFuc2l0aW9uVHlwZSgnbGVmdCcsIGdldExlZnRUcmFuc2l0aW9uKTtcbiAgcmVnaXN0ZXJUcmFuc2l0aW9uVHlwZSgncmlnaHQnLCBnZXRSaWdodFRyYW5zaXRpb24pO1xuICByZWdpc3RlclRyYW5zaXRpb25UeXBlKCdob3Jpem9udGFsJywgZ2V0SG9yaXpvbnRhbFRyYW5zaXRpb24pO1xuICByZWdpc3RlclRyYW5zaXRpb25UeXBlKCd2ZXJ0aWNhbCcsIGdldFZlcnRpY2FsVHJhbnNpdGlvbik7XG4gIHJlZ2lzdGVyVHJhbnNpdGlvblR5cGUoJ2ZsaXAnLCBnZXRGbGlwVHJhbnNpdGlvbik7XG4gIHJlZ2lzdGVyVHJhbnNpdGlvblR5cGUoJ25vbmUnLCAoKSA9PiAoe30pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyVHJhbnNpdGlvblR5cGUobmFtZTogc3RyaW5nLFxuICB0cmFuc2l0aW9uRnVuY3Rpb246IEZ1bmN0aW9uKTogVHJhbnNpdGlvbkVudHJ5IHtcbiAgdHJhbnNpdGlvblR5cGVzLnB1c2goeyBuYW1lLCB0cmFuc2l0aW9uRnVuY3Rpb24gfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2l0aW9uVHlwZShuYW1lOiBzdHJpbmcpOiBGdW5jdGlvbiB7XG4gIGNvbnN0IHRyYW5zaXRpb25UeXBlID0gdHJhbnNpdGlvblR5cGVzLmZpbmQoZSA9PiBlLm5hbWUgPT09IG5hbWUpO1xuICBpZiAodHJhbnNpdGlvblR5cGUpIHJldHVybiB0cmFuc2l0aW9uVHlwZS50cmFuc2l0aW9uRnVuY3Rpb247XG4gIHJldHVybiBudWxsO1xufVxuIl19