77af2e13e155f28591ca32536b2f43f6
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.getSharedElements = void 0;var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");

var _TransitionItem = _interopRequireDefault(require("../TransitionItem"));
var _Utils = require("../Utils");

var _InterpolatorTypes = require("./InterpolatorTypes");
var _InterpolatorSpecification = require("../Types/InterpolatorSpecification");

var getSharedElements = function getSharedElements(sharedElements,
getInterpolationFunction) {return sharedElements.map(function (pair, idx) {var
    fromItem = pair.fromItem,toItem = pair.toItem;
    var element = _react.default.Children.only(fromItem.reactElement.props.children);

    var equalAspectRatio = getIsEqualAspectRatio(fromItem, toItem);

    var transitionStyles = getTransitionStyle(fromItem, toItem, getInterpolationFunction,
    equalAspectRatio);

    var key = "so-" + idx.toString();
    var animationStyle = transitionStyles.styles;
    var nativeAnimationStyle = [transitionStyles.nativeStyles];
    var resolvedMetrics = (0, _Utils.getResolvedMetrics)(fromItem, fromItem.metrics);

    var overrideStyles = {
      position: 'absolute',
      left: resolvedMetrics.x,
      top: resolvedMetrics.y,
      width: resolvedMetrics.width,
      height: resolvedMetrics.height };


    var props = (0, _objectSpread2.default)({}, element.props, { __index: fromItem.index });
    if (fromItem.animated) {
      props[fromItem.animated] = getInterpolationFunction(false);
    } else if (toItem.animated) {
      props[toItem.animated] = getInterpolationFunction(false);
    }

    var component = _react.default.createElement(element.type, (0, _objectSpread2.default)({}, props, { key: key }));

    return (0, _Utils.createAnimatedWrapper)({
      component: component,
      nativeStyles: nativeAnimationStyle,
      styles: animationStyle,
      overrideStyles: overrideStyles,
      equalAspectRatio: equalAspectRatio,
      log: true,
      logPrefix: "SE: " + fromItem.name + "/" + fromItem.route });

  });};exports.getSharedElements = getSharedElements;

var getIsEqualAspectRatio = function getIsEqualAspectRatio(fromItem, toItem) {
  var fromAspect = Math.round(fromItem.metrics.width / fromItem.metrics.height * 100) / 100;
  var toAspect = Math.round(toItem.metrics.width / toItem.metrics.height * 100) / 100;
  return fromAspect === toAspect;
};

var getTransitionStyle = function getTransitionStyle(
fromItem, toItem, getInterpolationFunction,
equalAspectRatio)
{
  var interpolatorInfo = {
    from: {
      metrics: fromItem.metrics,
      boundingbox: fromItem.boundingBoxMetrics,
      style: fromItem.getFlattenedStyle() },

    to: {
      metrics: toItem.metrics,
      style: toItem.getFlattenedStyle(),
      boundingbox: toItem.boundingBoxMetrics },

    scaleX: toItem.scaleRelativeTo(fromItem).x,
    scaleY: toItem.scaleRelativeTo(fromItem).y,
    equalAspectRatio: equalAspectRatio,
    getInterpolation: getInterpolationFunction,
    dimensions: _reactNative.Dimensions.get('window') };


  var nativeStyles = [];
  var styles = [];

  (0, _InterpolatorTypes.getInterpolatorTypes)().forEach(function (interpolator) {
    var interpolatorResult = interpolator.interpolatorFunction(interpolatorInfo);
    if (interpolatorResult) {
      if (interpolatorResult.nativeAnimationStyles) {
        nativeStyles.push(interpolatorResult.nativeAnimationStyles);
      }
      if (interpolatorResult.animationStyles) {
        styles.push(interpolatorResult.animationStyles);
      }
    }
  });

  return {
    nativeStyles: (0, _objectSpread2.default)({},
    (0, _Utils.mergeStyles)(nativeStyles)),

    styles: (0, _objectSpread2.default)({
      width: fromItem.metrics.width,
      height: fromItem.metrics.height },
    (0, _Utils.mergeStyles)(styles)) };


};