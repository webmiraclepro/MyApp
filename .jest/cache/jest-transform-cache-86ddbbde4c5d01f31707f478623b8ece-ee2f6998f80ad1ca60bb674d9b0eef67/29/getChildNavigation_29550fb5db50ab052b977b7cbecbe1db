616b238acb61f04128fe6bfa09c98821
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _getChildEventSubscriber = _interopRequireDefault(require("./getChildEventSubscriber"));

var _getChildRouter = _interopRequireDefault(require("./getChildRouter"));

var _getNavigationActionCreators = _interopRequireDefault(require("./routers/getNavigationActionCreators"));

var _getChildrenNavigationCache = _interopRequireDefault(require("./getChildrenNavigationCache"));

var createParamGetter = function createParamGetter(route) {
  return function (paramName, defaultValue) {
    var params = route.params;

    if (params && paramName in params) {
      return params[paramName];
    }

    return defaultValue;
  };
};

function _getChildNavigation(navigation, childKey, getCurrentParentNavigation) {
  var children = (0, _getChildrenNavigationCache.default)(navigation);
  var childRoute = navigation.state.routes.find(function (r) {
    return r.key === childKey;
  });

  if (!childRoute) {
    return null;
  }

  if (children[childKey] && children[childKey].state === childRoute) {
    return children[childKey];
  }

  var childRouter = (0, _getChildRouter.default)(navigation.router, childRoute.routeName);
  var focusedGrandChildRoute = childRoute.routes && typeof childRoute.index === 'number' ? childRoute.routes[childRoute.index] : null;
  var actionCreators = (0, _objectSpread2.default)({}, navigation.actions, navigation.router.getActionCreators(childRoute, navigation.state.key), childRouter ? childRouter.getActionCreators(focusedGrandChildRoute, childRoute.key) : {}, (0, _getNavigationActionCreators.default)(childRoute));
  var actionHelpers = {};
  Object.keys(actionCreators).forEach(function (actionName) {
    actionHelpers[actionName] = function () {
      var actionCreator = actionCreators[actionName];
      var action = actionCreator.apply(void 0, arguments);
      return navigation.dispatch(action);
    };
  });
  var _isFirstRouteInParent = true;
  var parentNavigation = getCurrentParentNavigation();

  if (parentNavigation) {
    _isFirstRouteInParent = parentNavigation.state.routes.indexOf(childRoute) === 0;
  }

  if (children[childKey] && children[childKey].isFirstRouteInParent() === _isFirstRouteInParent) {
    children[childKey] = (0, _objectSpread2.default)({}, children[childKey], actionHelpers, {
      state: childRoute,
      router: childRouter,
      actions: actionCreators,
      getParam: createParamGetter(childRoute)
    });
    return children[childKey];
  } else {
    var childSubscriber = (0, _getChildEventSubscriber.default)(navigation.addListener, childKey);
    children[childKey] = (0, _objectSpread2.default)({}, actionHelpers, {
      state: childRoute,
      router: childRouter,
      actions: actionCreators,
      getParam: createParamGetter(childRoute),
      getChildNavigation: function getChildNavigation(grandChildKey) {
        return _getChildNavigation(children[childKey], grandChildKey, function () {
          var nav = getCurrentParentNavigation();
          return nav && nav.getChildNavigation(childKey);
        });
      },
      isFocused: function isFocused() {
        var currentNavigation = getCurrentParentNavigation();

        if (!currentNavigation) {
          return false;
        }

        var _currentNavigation$st = currentNavigation.state,
            routes = _currentNavigation$st.routes,
            index = _currentNavigation$st.index;

        if (!currentNavigation.isFocused()) {
          return false;
        }

        if (routes[index].key === childKey) {
          return true;
        }

        return false;
      },
      isFirstRouteInParent: function isFirstRouteInParent() {
        return _isFirstRouteInParent;
      },
      dispatch: navigation.dispatch,
      getScreenProps: navigation.getScreenProps,
      dangerouslyGetParent: getCurrentParentNavigation,
      addListener: childSubscriber.addListener,
      emit: childSubscriber.emit
    });
    return children[childKey];
  }
}

var _default = _getChildNavigation;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,