4e206eb7fc02ac2467c551bb77f479e7
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var DeprecatedEdgeInsetsPropType = require('DeprecatedEdgeInsetsPropType');

var React = require('React');

var PropTypes = require('prop-types');

var Touchable = require('Touchable');

var View = require('View');

var createReactClass = require('create-react-class');

var ensurePositiveDelayProps = require('ensurePositiveDelayProps');

var _require = require('DeprecatedViewAccessibility'),
    DeprecatedAccessibilityComponentTypes = _require.DeprecatedAccessibilityComponentTypes,
    DeprecatedAccessibilityRoles = _require.DeprecatedAccessibilityRoles,
    DeprecatedAccessibilityStates = _require.DeprecatedAccessibilityStates,
    DeprecatedAccessibilityTraits = _require.DeprecatedAccessibilityTraits;

var PRESS_RETENTION_OFFSET = {
  top: 20,
  left: 20,
  right: 20,
  bottom: 30
};
var OVERRIDE_PROPS = ['accessibilityComponentType', 'accessibilityLabel', 'accessibilityHint', 'accessibilityIgnoresInvertColors', 'accessibilityRole', 'accessibilityStates', 'accessibilityTraits', 'hitSlop', 'nativeID', 'onBlur', 'onFocus', 'onLayout', 'testID'];
var TouchableWithoutFeedback = createReactClass({
  displayName: 'TouchableWithoutFeedback',
  mixins: [Touchable.Mixin],
  propTypes: {
    accessible: PropTypes.bool,
    accessibilityLabel: PropTypes.node,
    accessibilityHint: PropTypes.string,
    accessibilityComponentType: PropTypes.oneOf(DeprecatedAccessibilityComponentTypes),
    accessibilityIgnoresInvertColors: PropTypes.bool,
    accessibilityRole: PropTypes.oneOf(DeprecatedAccessibilityRoles),
    accessibilityStates: PropTypes.arrayOf(PropTypes.oneOf(DeprecatedAccessibilityStates)),
    accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(DeprecatedAccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(DeprecatedAccessibilityTraits))]),
    onFocus: PropTypes.func,
    onBlur: PropTypes.func,
    disabled: PropTypes.bool,
    onPress: PropTypes.func,
    onPressIn: PropTypes.func,
    onPressOut: PropTypes.func,
    onLayout: PropTypes.func,
    onLongPress: PropTypes.func,
    nativeID: PropTypes.string,
    testID: PropTypes.string,
    delayPressIn: PropTypes.number,
    delayPressOut: PropTypes.number,
    delayLongPress: PropTypes.number,
    pressRetentionOffset: DeprecatedEdgeInsetsPropType,
    hitSlop: DeprecatedEdgeInsetsPropType
  },
  getInitialState: function getInitialState() {
    return this.touchableGetInitialState();
  },
  componentDidMount: function componentDidMount() {
    ensurePositiveDelayProps(this.props);
  },
  UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
    ensurePositiveDelayProps(nextProps);
  },
  touchableHandlePress: function touchableHandlePress(e) {
    this.props.onPress && this.props.onPress(e);
  },
  touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
    this.props.onPressIn && this.props.onPressIn(e);
  },
  touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
    this.props.onPressOut && this.props.onPressOut(e);
  },
  touchableHandleLongPress: function touchableHandleLongPress(e) {
    this.props.onLongPress && this.props.onLongPress(e);
  },
  touchableGetPressRectOffset: function touchableGetPressRectOffset() {
    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
  },
  touchableGetHitSlop: function touchableGetHitSlop() {
    return this.props.hitSlop;
  },
  touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
    return this.props.delayPressIn || 0;
  },
  touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
    return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
  },
  touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
    return this.props.delayPressOut || 0;
  },
  render: function render() {
    var child = React.Children.only(this.props.children);
    var children = child.props.children;

    if (Touchable.TOUCH_TARGET_DEBUG && child.type === View) {
      children = React.Children.toArray(children);
      children.push(Touchable.renderDebugView({
        color: 'red',
        hitSlop: this.props.hitSlop
      }));
    }

    var overrides = {};

    for (var _i = 0, _OVERRIDE_PROPS = OVERRIDE_PROPS; _i < _OVERRIDE_PROPS.length; _i++) {
      var prop = _OVERRIDE_PROPS[_i];

      if (this.props[prop] !== undefined) {
        overrides[prop] = this.props[prop];
      }
    }

    return React.cloneElement(child, (0, _objectSpread2.default)({}, overrides, {
      accessible: this.props.accessible !== false,
      onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
      onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
      onResponderGrant: this.touchableHandleResponderGrant,
      onResponderMove: this.touchableHandleResponderMove,
      onResponderRelease: this.touchableHandleResponderRelease,
      onResponderTerminate: this.touchableHandleResponderTerminate,
      children: children
    }));
  }
});
module.exports = TouchableWithoutFeedback;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRvdWNoYWJsZVdpdGhvdXRGZWVkYmFjay5qcyJdLCJuYW1lcyI6WyJEZXByZWNhdGVkRWRnZUluc2V0c1Byb3BUeXBlIiwicmVxdWlyZSIsIlJlYWN0IiwiUHJvcFR5cGVzIiwiVG91Y2hhYmxlIiwiVmlldyIsImNyZWF0ZVJlYWN0Q2xhc3MiLCJlbnN1cmVQb3NpdGl2ZURlbGF5UHJvcHMiLCJEZXByZWNhdGVkQWNjZXNzaWJpbGl0eUNvbXBvbmVudFR5cGVzIiwiRGVwcmVjYXRlZEFjY2Vzc2liaWxpdHlSb2xlcyIsIkRlcHJlY2F0ZWRBY2Nlc3NpYmlsaXR5U3RhdGVzIiwiRGVwcmVjYXRlZEFjY2Vzc2liaWxpdHlUcmFpdHMiLCJQUkVTU19SRVRFTlRJT05fT0ZGU0VUIiwidG9wIiwibGVmdCIsInJpZ2h0IiwiYm90dG9tIiwiT1ZFUlJJREVfUFJPUFMiLCJUb3VjaGFibGVXaXRob3V0RmVlZGJhY2siLCJkaXNwbGF5TmFtZSIsIm1peGlucyIsIk1peGluIiwicHJvcFR5cGVzIiwiYWNjZXNzaWJsZSIsImJvb2wiLCJhY2Nlc3NpYmlsaXR5TGFiZWwiLCJub2RlIiwiYWNjZXNzaWJpbGl0eUhpbnQiLCJzdHJpbmciLCJhY2Nlc3NpYmlsaXR5Q29tcG9uZW50VHlwZSIsIm9uZU9mIiwiYWNjZXNzaWJpbGl0eUlnbm9yZXNJbnZlcnRDb2xvcnMiLCJhY2Nlc3NpYmlsaXR5Um9sZSIsImFjY2Vzc2liaWxpdHlTdGF0ZXMiLCJhcnJheU9mIiwiYWNjZXNzaWJpbGl0eVRyYWl0cyIsIm9uZU9mVHlwZSIsIm9uRm9jdXMiLCJmdW5jIiwib25CbHVyIiwiZGlzYWJsZWQiLCJvblByZXNzIiwib25QcmVzc0luIiwib25QcmVzc091dCIsIm9uTGF5b3V0Iiwib25Mb25nUHJlc3MiLCJuYXRpdmVJRCIsInRlc3RJRCIsImRlbGF5UHJlc3NJbiIsIm51bWJlciIsImRlbGF5UHJlc3NPdXQiLCJkZWxheUxvbmdQcmVzcyIsInByZXNzUmV0ZW50aW9uT2Zmc2V0IiwiaGl0U2xvcCIsImdldEluaXRpYWxTdGF0ZSIsInRvdWNoYWJsZUdldEluaXRpYWxTdGF0ZSIsImNvbXBvbmVudERpZE1vdW50IiwicHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsInRvdWNoYWJsZUhhbmRsZVByZXNzIiwiZSIsInRvdWNoYWJsZUhhbmRsZUFjdGl2ZVByZXNzSW4iLCJ0b3VjaGFibGVIYW5kbGVBY3RpdmVQcmVzc091dCIsInRvdWNoYWJsZUhhbmRsZUxvbmdQcmVzcyIsInRvdWNoYWJsZUdldFByZXNzUmVjdE9mZnNldCIsInRvdWNoYWJsZUdldEhpdFNsb3AiLCJ0b3VjaGFibGVHZXRIaWdobGlnaHREZWxheU1TIiwidG91Y2hhYmxlR2V0TG9uZ1ByZXNzRGVsYXlNUyIsInRvdWNoYWJsZUdldFByZXNzT3V0RGVsYXlNUyIsInJlbmRlciIsImNoaWxkIiwiQ2hpbGRyZW4iLCJvbmx5IiwiY2hpbGRyZW4iLCJUT1VDSF9UQVJHRVRfREVCVUciLCJ0eXBlIiwidG9BcnJheSIsInB1c2giLCJyZW5kZXJEZWJ1Z1ZpZXciLCJjb2xvciIsIm92ZXJyaWRlcyIsInByb3AiLCJ1bmRlZmluZWQiLCJjbG9uZUVsZW1lbnQiLCJvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyIiwidG91Y2hhYmxlSGFuZGxlU3RhcnRTaG91bGRTZXRSZXNwb25kZXIiLCJvblJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdCIsInRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdCIsIm9uUmVzcG9uZGVyR3JhbnQiLCJ0b3VjaGFibGVIYW5kbGVSZXNwb25kZXJHcmFudCIsIm9uUmVzcG9uZGVyTW92ZSIsInRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlck1vdmUiLCJvblJlc3BvbmRlclJlbGVhc2UiLCJ0b3VjaGFibGVIYW5kbGVSZXNwb25kZXJSZWxlYXNlIiwib25SZXNwb25kZXJUZXJtaW5hdGUiLCJ0b3VjaGFibGVIYW5kbGVSZXNwb25k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Q0FBRCxDQUFuRDtBQXNMQXVCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmhGLHdCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IERlcHJlY2F0ZWRFZGdlSW5zZXRzUHJvcFR5cGUgPSByZXF1aXJlKCdEZXByZWNhdGVkRWRnZUluc2V0c1Byb3BUeXBlJyk7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ1JlYWN0Jyk7XG5jb25zdCBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5jb25zdCBUb3VjaGFibGUgPSByZXF1aXJlKCdUb3VjaGFibGUnKTtcbmNvbnN0IFZpZXcgPSByZXF1aXJlKCdWaWV3Jyk7XG5cbmNvbnN0IGNyZWF0ZVJlYWN0Q2xhc3MgPSByZXF1aXJlKCdjcmVhdGUtcmVhY3QtY2xhc3MnKTtcbmNvbnN0IGVuc3VyZVBvc2l0aXZlRGVsYXlQcm9wcyA9IHJlcXVpcmUoJ2Vuc3VyZVBvc2l0aXZlRGVsYXlQcm9wcycpO1xuXG5jb25zdCB7XG4gIERlcHJlY2F0ZWRBY2Nlc3NpYmlsaXR5Q29tcG9uZW50VHlwZXMsXG4gIERlcHJlY2F0ZWRBY2Nlc3NpYmlsaXR5Um9sZXMsXG4gIERlcHJlY2F0ZWRBY2Nlc3NpYmlsaXR5U3RhdGVzLFxuICBEZXByZWNhdGVkQWNjZXNzaWJpbGl0eVRyYWl0cyxcbn0gPSByZXF1aXJlKCdEZXByZWNhdGVkVmlld0FjY2Vzc2liaWxpdHknKTtcblxuaW1wb3J0IHR5cGUge1N5bnRoZXRpY0V2ZW50LCBMYXlvdXRFdmVudCwgUHJlc3NFdmVudH0gZnJvbSAnQ29yZUV2ZW50VHlwZXMnO1xuaW1wb3J0IHR5cGUge0VkZ2VJbnNldHNQcm9wfSBmcm9tICdFZGdlSW5zZXRzUHJvcFR5cGUnO1xuaW1wb3J0IHR5cGUge1xuICBBY2Nlc3NpYmlsaXR5Q29tcG9uZW50VHlwZSxcbiAgQWNjZXNzaWJpbGl0eVJvbGUsXG4gIEFjY2Vzc2liaWxpdHlTdGF0ZXMsXG4gIEFjY2Vzc2liaWxpdHlUcmFpdHMsXG59IGZyb20gJ1ZpZXdBY2Nlc3NpYmlsaXR5JztcblxudHlwZSBUYXJnZXRFdmVudCA9IFN5bnRoZXRpY0V2ZW50PFxuICAkUmVhZE9ubHk8e3xcbiAgICB0YXJnZXQ6IG51bWJlcixcbiAgfH0+LFxuPjtcblxudHlwZSBCbHVyRXZlbnQgPSBUYXJnZXRFdmVudDtcbnR5cGUgRm9jdXNFdmVudCA9IFRhcmdldEV2ZW50O1xuXG5jb25zdCBQUkVTU19SRVRFTlRJT05fT0ZGU0VUID0ge3RvcDogMjAsIGxlZnQ6IDIwLCByaWdodDogMjAsIGJvdHRvbTogMzB9O1xuXG5jb25zdCBPVkVSUklERV9QUk9QUyA9IFtcbiAgJ2FjY2Vzc2liaWxpdHlDb21wb25lbnRUeXBlJyxcbiAgJ2FjY2Vzc2liaWxpdHlMYWJlbCcsXG4gICdhY2Nlc3NpYmlsaXR5SGludCcsXG4gICdhY2Nlc3NpYmlsaXR5SWdub3Jlc0ludmVydENvbG9ycycsXG4gICdhY2Nlc3NpYmlsaXR5Um9sZScsXG4gICdhY2Nlc3NpYmlsaXR5U3RhdGVzJyxcbiAgJ2FjY2Vzc2liaWxpdHlUcmFpdHMnLFxuICAnaGl0U2xvcCcsXG4gICduYXRpdmVJRCcsXG4gICdvbkJsdXInLFxuICAnb25Gb2N1cycsXG4gICdvbkxheW91dCcsXG4gICd0ZXN0SUQnLFxuXTtcblxuZXhwb3J0IHR5cGUgUHJvcHMgPSAkUmVhZE9ubHk8e3xcbiAgYWNjZXNzaWJsZT86ID9ib29sZWFuLFxuICBhY2Nlc3NpYmlsaXR5Q29tcG9uZW50VHlwZT86ID9BY2Nlc3NpYmlsaXR5Q29tcG9uZW50VHlwZSxcbiAgYWNjZXNzaWJpbGl0eUxhYmVsPzogP1N0cmluZ2lzaCxcbiAgYWNjZXNzaWJpbGl0eUhpbnQ/OiA/U3RyaW5naXNoLFxuICBhY2Nlc3NpYmlsaXR5SWdub3Jlc0ludmVydENvbG9ycz86ID9ib29sZWFuLFxuICBhY2Nlc3NpYmlsaXR5Um9sZT86ID9BY2Nlc3NpYmlsaXR5Um9sZSxcbiAgYWNjZXNzaWJpbGl0eVN0YXRlcz86ID9BY2Nlc3NpYmlsaXR5U3RhdGVzLFxuICBhY2Nlc3NpYmlsaXR5VHJhaXRzPzogP0FjY2Vzc2liaWxpdHlUcmFpdHMsXG4gIGNoaWxkcmVuPzogP1JlYWN0Lk5vZGUsXG4gIGRlbGF5TG9uZ1ByZXNzPzogP251bWJlcixcbiAgZGVsYXlQcmVzc0luPzogP251bWJlcixcbiAgZGVsYXlQcmVzc091dD86ID9udW1iZXIsXG4gIGRpc2FibGVkPzogP2Jvb2xlYW4sXG4gIGhpdFNsb3A/OiA/RWRnZUluc2V0c1Byb3AsXG4gIG5hdGl2ZUlEPzogP3N0cmluZyxcbiAgb25CbHVyPzogPyhlOiBCbHVyRXZlbnQpID0+IHZvaWQsXG4gIG9uRm9jdXM/OiA/KGU6IEZvY3VzRXZlbnQpID0+IHZvaWQsXG4gIG9uTGF5b3V0PzogPyhldmVudDogTGF5b3V0RXZlbnQpID0+IG1peGVkLFxuICBvbkxvbmdQcmVzcz86ID8oZXZlbnQ6IFByZXNzRXZlbnQpID0+IG1peGVkLFxuICBvblByZXNzPzogPyhldmVudDogUHJlc3NFdmVudCkgPT4gbWl4ZWQsXG4gIG9uUHJlc3NJbj86ID8oZXZlbnQ6IFByZXNzRXZlbnQpID0+IG1peGVkLFxuICBvblByZXNzT3V0PzogPyhldmVudDogUHJlc3NFdmVudCkgPT4gbWl4ZWQsXG4gIHByZXNzUmV0ZW50aW9uT2Zmc2V0PzogP0VkZ2VJbnNldHNQcm9wLFxuICByZWplY3RSZXNwb25kZXJUZXJtaW5hdGlvbj86ID9ib29sZWFuLFxuICB0ZXN0SUQ/OiA/c3RyaW5nLFxufH0+O1xuXG4vKipcbiAqIERvIG5vdCB1c2UgdW5sZXNzIHlvdSBoYXZlIGEgdmVyeSBnb29kIHJlYXNvbi4gQWxsIGVsZW1lbnRzIHRoYXRcbiAqIHJlc3BvbmQgdG8gcHJlc3Mgc2hvdWxkIGhhdmUgYSB2aXN1YWwgZmVlZGJhY2sgd2hlbiB0b3VjaGVkLlxuICpcbiAqIFRvdWNoYWJsZVdpdGhvdXRGZWVkYmFjayBzdXBwb3J0cyBvbmx5IG9uZSBjaGlsZC5cbiAqIElmIHlvdSB3aXNoIHRvIGhhdmUgc2V2ZXJhbCBjaGlsZCBjb21wb25lbnRzLCB3cmFwIHRoZW0gaW4gYSBWaWV3LlxuICovXG5jb25zdCBUb3VjaGFibGVXaXRob3V0RmVlZGJhY2sgPSAoKGNyZWF0ZVJlYWN0Q2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1RvdWNoYWJsZVdpdGhvdXRGZWVkYmFjaycsXG4gIG1peGluczogW1RvdWNoYWJsZS5NaXhpbl0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgYWNjZXNzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgYWNjZXNzaWJpbGl0eUxhYmVsOiBQcm9wVHlwZXMubm9kZSxcbiAgICBhY2Nlc3NpYmlsaXR5SGludDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhY2Nlc3NpYmlsaXR5Q29tcG9uZW50VHlwZTogUHJvcFR5cGVzLm9uZU9mKFxuICAgICAgRGVwcmVjYXRlZEFjY2Vzc2liaWxpdHlDb21wb25lbnRUeXBlcyxcbiAgICApLFxuICAgIGFjY2Vzc2liaWxpdHlJZ25vcmVzSW52ZXJ0Q29sb3JzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBhY2Nlc3NpYmlsaXR5Um9sZTogUHJvcFR5cGVzLm9uZU9mKERlcHJlY2F0ZWRBY2Nlc3NpYmlsaXR5Um9sZXMpLFxuICAgIGFjY2Vzc2liaWxpdHlTdGF0ZXM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgUHJvcFR5cGVzLm9uZU9mKERlcHJlY2F0ZWRBY2Nlc3NpYmlsaXR5U3RhdGVzKSxcbiAgICApLFxuICAgIGFjY2Vzc2liaWxpdHlUcmFpdHM6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgUHJvcFR5cGVzLm9uZU9mKERlcHJlY2F0ZWRBY2Nlc3NpYmlsaXR5VHJhaXRzKSxcbiAgICAgIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZihEZXByZWNhdGVkQWNjZXNzaWJpbGl0eVRyYWl0cykpLFxuICAgIF0pLFxuICAgIC8qKlxuICAgICAqIFdoZW4gYGFjY2Vzc2libGVgIGlzIHRydWUgKHdoaWNoIGlzIHRoZSBkZWZhdWx0KSB0aGlzIG1heSBiZSBjYWxsZWQgd2hlblxuICAgICAqIHRoZSBPUy1zcGVjaWZpYyBjb25jZXB0IG9mIFwiZm9jdXNcIiBvY2N1cnMuIFNvbWUgcGxhdGZvcm1zIG1heSBub3QgaGF2ZVxuICAgICAqIHRoZSBjb25jZXB0IG9mIGZvY3VzLlxuICAgICAqL1xuICAgIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuICAgIC8qKlxuICAgICAqIFdoZW4gYGFjY2Vzc2libGVgIGlzIHRydWUgKHdoaWNoIGlzIHRoZSBkZWZhdWx0KSB0aGlzIG1heSBiZSBjYWxsZWQgd2hlblxuICAgICAqIHRoZSBPUy1zcGVjaWZpYyBjb25jZXB0IG9mIFwiYmx1clwiIG9jY3VycywgbWVhbmluZyB0aGUgZWxlbWVudCBsb3N0IGZvY3VzLlxuICAgICAqIFNvbWUgcGxhdGZvcm1zIG1heSBub3QgaGF2ZSB0aGUgY29uY2VwdCBvZiBibHVyLlxuICAgICAqL1xuICAgIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgZGlzYWJsZSBhbGwgaW50ZXJhY3Rpb25zIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gdGhlIHRvdWNoIGlzIHJlbGVhc2VkLCBidXQgbm90IGlmIGNhbmNlbGxlZCAoZS5nLiBieSBhIHNjcm9sbFxuICAgICAqIHRoYXQgc3RlYWxzIHRoZSByZXNwb25kZXIgbG9jaykuXG4gICAgICovXG4gICAgb25QcmVzczogUHJvcFR5cGVzLmZ1bmMsXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIGFzIHNvb24gYXMgdGhlIHRvdWNoYWJsZSBlbGVtZW50IGlzIHByZXNzZWQgYW5kIGludm9rZWQgZXZlbiBiZWZvcmUgb25QcmVzcy5cbiAgICAgKiBUaGlzIGNhbiBiZSB1c2VmdWwgd2hlbiBtYWtpbmcgbmV0d29yayByZXF1ZXN0cy5cbiAgICAgKi9cbiAgICBvblByZXNzSW46IFByb3BUeXBlcy5mdW5jLFxuICAgIC8qKlxuICAgICAqIENhbGxlZCBhcyBzb29uIGFzIHRoZSB0b3VjaCBpcyByZWxlYXNlZCBldmVuIGJlZm9yZSBvblByZXNzLlxuICAgICAqL1xuICAgIG9uUHJlc3NPdXQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIC8qKlxuICAgICAqIEludm9rZWQgb24gbW91bnQgYW5kIGxheW91dCBjaGFuZ2VzIHdpdGhcbiAgICAgKlxuICAgICAqICAgYHtuYXRpdmVFdmVudDoge2xheW91dDoge3gsIHksIHdpZHRoLCBoZWlnaHR9fX1gXG4gICAgICovXG4gICAgb25MYXlvdXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgb25Mb25nUHJlc3M6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgbmF0aXZlSUQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdGVzdElEOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgLyoqXG4gICAgICogRGVsYXkgaW4gbXMsIGZyb20gdGhlIHN0YXJ0IG9mIHRoZSB0b3VjaCwgYmVmb3JlIG9uUHJlc3NJbiBpcyBjYWxsZWQuXG4gICAgICovXG4gICAgZGVsYXlQcmVzc0luOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIC8qKlxuICAgICAqIERlbGF5IGluIG1zLCBmcm9tIHRoZSByZWxlYXNlIG9mIHRoZSB0b3VjaCwgYmVmb3JlIG9uUHJlc3NPdXQgaXMgY2FsbGVkLlxuICAgICAqL1xuICAgIGRlbGF5UHJlc3NPdXQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgLyoqXG4gICAgICogRGVsYXkgaW4gbXMsIGZyb20gb25QcmVzc0luLCBiZWZvcmUgb25Mb25nUHJlc3MgaXMgY2FsbGVkLlxuICAgICAqL1xuICAgIGRlbGF5TG9uZ1ByZXNzOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIHNjcm9sbCB2aWV3IGlzIGRpc2FibGVkLCB0aGlzIGRlZmluZXMgaG93IGZhciB5b3VyIHRvdWNoIG1heVxuICAgICAqIG1vdmUgb2ZmIG9mIHRoZSBidXR0b24sIGJlZm9yZSBkZWFjdGl2YXRpbmcgdGhlIGJ1dHRvbi4gT25jZSBkZWFjdGl2YXRlZCxcbiAgICAgKiB0cnkgbW92aW5nIGl0IGJhY2sgYW5kIHlvdSdsbCBzZWUgdGhhdCB0aGUgYnV0dG9uIGlzIG9uY2UgYWdhaW5cbiAgICAgKiByZWFjdGl2YXRlZCEgTW92ZSBpdCBiYWNrIGFuZCBmb3J0aCBzZXZlcmFsIHRpbWVzIHdoaWxlIHRoZSBzY3JvbGwgdmlld1xuICAgICAqIGlzIGRpc2FibGVkLiBFbnN1cmUgeW91IHBhc3MgaW4gYSBjb25zdGFudCB0byByZWR1Y2UgbWVtb3J5IGFsbG9jYXRpb25zLlxuICAgICAqL1xuICAgIHByZXNzUmV0ZW50aW9uT2Zmc2V0OiBEZXByZWNhdGVkRWRnZUluc2V0c1Byb3BUeXBlLFxuICAgIC8qKlxuICAgICAqIFRoaXMgZGVmaW5lcyBob3cgZmFyIHlvdXIgdG91Y2ggY2FuIHN0YXJ0IGF3YXkgZnJvbSB0aGUgYnV0dG9uLiBUaGlzIGlzXG4gICAgICogYWRkZWQgdG8gYHByZXNzUmV0ZW50aW9uT2Zmc2V0YCB3aGVuIG1vdmluZyBvZmYgb2YgdGhlIGJ1dHRvbi5cbiAgICAgKiAqKiBOT1RFICoqXG4gICAgICogVGhlIHRvdWNoIGFyZWEgbmV2ZXIgZXh0ZW5kcyBwYXN0IHRoZSBwYXJlbnQgdmlldyBib3VuZHMgYW5kIHRoZSBaLWluZGV4XG4gICAgICogb2Ygc2libGluZyB2aWV3cyBhbHdheXMgdGFrZXMgcHJlY2VkZW5jZSBpZiBhIHRvdWNoIGhpdHMgdHdvIG92ZXJsYXBwaW5nXG4gICAgICogdmlld3MuXG4gICAgICovXG4gICAgaGl0U2xvcDogRGVwcmVjYXRlZEVkZ2VJbnNldHNQcm9wVHlwZSxcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRvdWNoYWJsZUdldEluaXRpYWxTdGF0ZSgpO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICBlbnN1cmVQb3NpdGl2ZURlbGF5UHJvcHModGhpcy5wcm9wcyk7XG4gIH0sXG5cbiAgVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uKG5leHRQcm9wczogT2JqZWN0KSB7XG4gICAgZW5zdXJlUG9zaXRpdmVEZWxheVByb3BzKG5leHRQcm9wcyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIGBUb3VjaGFibGUuTWl4aW5gIHNlbGYgY2FsbGJhY2tzLiBUaGUgbWl4aW4gd2lsbCBpbnZva2UgdGhlc2UgaWYgdGhleSBhcmVcbiAgICogZGVmaW5lZCBvbiB5b3VyIGNvbXBvbmVudC5cbiAgICovXG4gIHRvdWNoYWJsZUhhbmRsZVByZXNzOiBmdW5jdGlvbihlOiBQcmVzc0V2ZW50KSB7XG4gICAgdGhpcy5wcm9wcy5vblByZXNzICYmIHRoaXMucHJvcHMub25QcmVzcyhlKTtcbiAgfSxcblxuICB0b3VjaGFibGVIYW5kbGVBY3RpdmVQcmVzc0luOiBmdW5jdGlvbihlOiBQcmVzc0V2ZW50KSB7XG4gICAgdGhpcy5wcm9wcy5vblByZXNzSW4gJiYgdGhpcy5wcm9wcy5vblByZXNzSW4oZSk7XG4gIH0sXG5cbiAgdG91Y2hhYmxlSGFuZGxlQWN0aXZlUHJlc3NPdXQ6IGZ1bmN0aW9uKGU6IFByZXNzRXZlbnQpIHtcbiAgICB0aGlzLnByb3BzLm9uUHJlc3NPdXQgJiYgdGhpcy5wcm9wcy5vblByZXNzT3V0KGUpO1xuICB9LFxuXG4gIHRvdWNoYWJsZUhhbmRsZUxvbmdQcmVzczogZnVuY3Rpb24oZTogUHJlc3NFdmVudCkge1xuICAgIHRoaXMucHJvcHMub25Mb25nUHJlc3MgJiYgdGhpcy5wcm9wcy5vbkxvbmdQcmVzcyhlKTtcbiAgfSxcblxuICB0b3VjaGFibGVHZXRQcmVzc1JlY3RPZmZzZXQ6IGZ1bmN0aW9uKCk6IHR5cGVvZiBQUkVTU19SRVRFTlRJT05fT0ZGU0VUIHtcbiAgICAvLyAkRmxvd0ZpeE1lIEludmFsaWQgcHJvcCB1c2FnZVxuICAgIHJldHVybiB0aGlzLnByb3BzLnByZXNzUmV0ZW50aW9uT2Zmc2V0IHx8IFBSRVNTX1JFVEVOVElPTl9PRkZTRVQ7XG4gIH0sXG5cbiAgdG91Y2hhYmxlR2V0SGl0U2xvcDogZnVuY3Rpb24oKTogP09iamVjdCB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuaGl0U2xvcDtcbiAgfSxcblxuICB0b3VjaGFibGVHZXRIaWdobGlnaHREZWxheU1TOiBmdW5jdGlvbigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmRlbGF5UHJlc3NJbiB8fCAwO1xuICB9LFxuXG4gIHRvdWNoYWJsZUdldExvbmdQcmVzc0RlbGF5TVM6IGZ1bmN0aW9uKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuZGVsYXlMb25nUHJlc3MgPT09IDBcbiAgICAgID8gMFxuICAgICAgOiB0aGlzLnByb3BzLmRlbGF5TG9uZ1ByZXNzIHx8IDUwMDtcbiAgfSxcblxuICB0b3VjaGFibGVHZXRQcmVzc091dERlbGF5TVM6IGZ1bmN0aW9uKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuZGVsYXlQcmVzc091dCB8fCAwO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKTogUmVhY3QuRWxlbWVudDxhbnk+IHtcbiAgICAvLyBOb3RlKGF2aWspOiByZW1vdmUgZHluYW1pYyB0eXBlY2FzdCBvbmNlIEZsb3cgaGFzIGJlZW4gdXBncmFkZWRcbiAgICAvLyAkRmxvd0ZpeE1lKD49MC40MS4wKVxuICAgIGNvbnN0IGNoaWxkID0gUmVhY3QuQ2hpbGRyZW4ub25seSh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICBsZXQgY2hpbGRyZW4gPSBjaGlsZC5wcm9wcy5jaGlsZHJlbjtcbiAgICBpZiAoVG91Y2hhYmxlLlRPVUNIX1RBUkdFVF9ERUJVRyAmJiBjaGlsZC50eXBlID09PSBWaWV3KSB7XG4gICAgICBjaGlsZHJlbiA9IFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoY2hpbGRyZW4pO1xuICAgICAgY2hpbGRyZW4ucHVzaChcbiAgICAgICAgVG91Y2hhYmxlLnJlbmRlckRlYnVnVmlldyh7Y29sb3I6ICdyZWQnLCBoaXRTbG9wOiB0aGlzLnByb3BzLmhpdFNsb3B9KSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3ZlcnJpZGVzID0ge307XG4gICAgZm9yIChjb25zdCBwcm9wIG9mIE9WRVJSSURFX1BST1BTKSB7XG4gICAgICBpZiAodGhpcy5wcm9wc1twcm9wXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG92ZXJyaWRlc1twcm9wXSA9IHRoaXMucHJvcHNbcHJvcF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChSZWFjdDogYW55KS5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIGFjY2Vzc2libGU6IHRoaXMucHJvcHMuYWNjZXNzaWJsZSAhPT0gZmFsc2UsXG4gICAgICBvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyOiB0aGlzLnRvdWNoYWJsZUhhbmRsZVN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyLFxuICAgICAgb25SZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3Q6IHRoaXNcbiAgICAgICAgLnRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdCxcbiAgICAgIG9uUmVzcG9uZGVyR3JhbnQ6IHRoaXMudG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyR3JhbnQsXG4gICAgICBvblJlc3BvbmRlck1vdmU6IHRoaXMudG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyTW92ZSxcbiAgICAgIG9uUmVzcG9uZGVyUmVsZWFzZTogdGhpcy50b3VjaGFibGVIYW5kbGVSZXNwb25kZXJSZWxlYXNlLFxuICAgICAgb25SZXNwb25kZXJUZXJtaW5hdGU6IHRoaXMudG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyVGVybWluYXRlLFxuICAgICAgY2hpbGRyZW4sXG4gICAgfSk7XG4gIH0sXG59KTogYW55KTogUmVhY3QuQ29tcG9uZW50VHlwZTxQcm9wcz4pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRvdWNoYWJsZVdpdGhvdXRGZWVkYmFjaztcbiJdfQ==