9f3a2c3edd5b67f3c4ae6b185323ea3c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _shallowRenderer = _interopRequireDefault(require("./Utils/shallowRenderer"));

var _Metrics = require("./Types/Metrics");

var _Utils = require("./Utils");

var TransitionItem = function () {
  function TransitionItem(name, route, reactElement, shared, appear, disappear, delay, index, anchor, animated, inline) {
    (0, _classCallCheck2.default)(this, TransitionItem);
    this.name = name;
    this.route = route;
    this.reactElement = reactElement;
    this.shared = shared;
    this.appear = appear;
    this.disappear = disappear;
    this.delay = delay;
    this.index = index;
    this.anchor = anchor;
    this.animated = animated;
    this.inline = inline;
  }

  (0, _createClass2.default)(TransitionItem, [{
    key: "getNodeHandle",
    value: function getNodeHandle() {
      return this.reactElement.getNodeHandle();
    }
  }, {
    key: "getViewRef",
    value: function getViewRef() {
      return this.reactElement.getViewRef();
    }
  }, {
    key: "forceUpdate",
    value: function forceUpdate() {
      if (this.reactElement._isMounted) {
        this.reactElement.forceUpdate();
      }
    }
  }, {
    key: "getIsMounted",
    value: function getIsMounted() {
      return this.reactElement._isMounted;
    }
  }, {
    key: "getItemStyle",
    value: function getItemStyle() {
      if (!this.flattenedItemStyle) {
        var element = _react.default.Children.only(this.reactElement.props.children);

        if (!element) {
          return {};
        }

        var style = element.props.style;
        this.flattenedItemStyle = _reactNative.StyleSheet.flatten(style);
      }

      return this.flattenedItemStyle;
    }
  }, {
    key: "getFlattenedStyle",
    value: function getFlattenedStyle() {
      var refresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (refresh || !this.flattenedStyle) {
        var element = _react.default.Children.only(this.reactElement.props.children);

        if (!element) {
          return null;
        }

        var shouldRenderRenderElement = element.type !== 'RCTView' && element.type && element.type.displayName !== 'View';
        var style = element.props.style;

        if (shouldRenderRenderElement) {
          if (!this._testRenderer) {
            this._testRenderer = _shallowRenderer.default.createRenderer();
          }

          try {
            var tree = this._testRenderer.render(element);

            style = tree.props.style ? tree.props.style : style;
          } catch (err) {}
        }

        if (!style) return null;
        this.flattenedStyle = _reactNative.StyleSheet.flatten(style);
      }

      return this.flattenedStyle;
    }
  }, {
    key: "updateMetrics",
    value: function updateMetrics(viewMetrics, itemMetrics) {
      var x = itemMetrics.x,
          y = itemMetrics.y,
          width = itemMetrics.width,
          height = itemMetrics.height;
      var ri = this.getRotation();
      var t = getRotationRad(ri);

      if (t !== 0) {
        var r = (0, _Utils.getOriginalRect)({
          boundingBox: {
            x: x,
            y: y,
            width: width,
            height: height
          },
          theta: t,
          skipWidth: _reactNative.Platform.OS !== 'ios'
        });
        this.metrics = {
          x: r.x - viewMetrics.x,
          y: r.y - viewMetrics.y,
          width: r.width,
          height: r.height
        };
        this.boundingBoxMetrics = (0, _Utils.getBoundingBox)({
          rect: this.metrics,
          theta: t
        });
      } else {
        this.metrics = {
          x: x - viewMetrics.x,
          y: y - viewMetrics.y,
          width: width,
          height: height
        };
        this.boundingBoxMetrics = this.metrics;
      }
    }
  }, {
    key: "getRotation",
    value: function getRotation() {
      if (!this._rotation) {
        var ri = (0, _Utils.getRotationFromStyle)(this.getFlattenedStyle());
        var retVal = {
          type: 'unknown',
          value: 0
        };

        if (ri.rotate) {
          if (ri.rotate.rotate) {
            var rotation = ri.rotate.rotate;

            if (rotation.endsWith('deg')) {
              retVal = {
                type: 'deg',
                value: parseInt(rotation.substring(0, rotation.length - 3))
              };
            } else if (rotation.endsWith('rad')) {
              retVal = {
                type: 'rad',
                value: parseInt(rotation.substring(0, rotation.length - 3))
              };
            }
          }
        }

        this._rotation = retVal;
      }

      return this._rotation;
    }
  }, {
    key: "scaleRelativeTo",
    value: function scaleRelativeTo(other) {
      var validate = function validate(i) {
        if (!i.metrics) {
          throw new Error("No metrics in " + i.name + ":" + i.containerRouteName);
        }
      };

      validate(this);
      validate(other);
      return {
        x: this.metrics.width / other.metrics.width,
        y: this.metrics.height / other.metrics.height
      };
    }
  }]);
  return TransitionItem;
}();

exports.default = TransitionItem;

var getRotationRad = function getRotationRad(ri) {
  if (ri.type === 'deg') return getDegreesToRadians(ri.value);
  return ri.value;
};

var getRotationDeg = function getRotationDeg(ri) {
  if (ri.type === 'rad') return getRadiansToDegrees(ri.value);
  return ri.value;
};

var getDegreesToRadians = function getDegreesToRadians(degrees) {
  return degrees * Math.PI / 180;
};

var getRadiansToDegrees = function getRadiansToDegrees(rad) {
  return rad * 180 / Math.PI;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,