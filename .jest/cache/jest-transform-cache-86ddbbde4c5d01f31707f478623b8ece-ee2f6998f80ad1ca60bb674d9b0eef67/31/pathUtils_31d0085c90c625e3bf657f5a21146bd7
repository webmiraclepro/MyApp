c02ee5bc62a6e053af0d3e2338d1c88b
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPathParser = exports.urlToPathAndParams = exports.getParamsFromPath = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _pathToRegexp = _interopRequireWildcard(require("path-to-regexp"));

var NavigationActions = _interopRequireWildcard(require("../NavigationActions"));

var _invariant = _interopRequireDefault(require("../utils/invariant"));

var queryString = require('query-string');

var getParamsFromPath = function getParamsFromPath(inputParams, pathMatch, pathMatchKeys) {
  var params = pathMatch.slice(1).reduce(function (paramsOut, matchResult, i) {
    var key = pathMatchKeys[i];

    if (!key || key.asterisk) {
      return paramsOut;
    }

    var paramName = key.name;
    var decodedMatchResult;

    if (matchResult) {
      try {
        decodedMatchResult = decodeURIComponent(matchResult);
      } catch (e) {}
    }

    paramsOut[paramName] = decodedMatchResult || matchResult;
    return paramsOut;
  }, (0, _objectSpread2.default)({}, inputParams));
  return params;
};

exports.getParamsFromPath = getParamsFromPath;

var getRestOfPath = function getRestOfPath(pathMatch, pathMatchKeys) {
  var rest = pathMatch[pathMatchKeys.findIndex(function (k) {
    return k.asterisk;
  }) + 1];
  return rest;
};

var urlToPathAndParams = function urlToPathAndParams(url, uriPrefix) {
  var searchMatch = url.match(/^(.*)\?(.*)$/);
  var params = searchMatch ? queryString.parse(searchMatch[2]) : {};
  var urlWithoutSearch = searchMatch ? searchMatch[1] : url;
  var delimiter = uriPrefix || '://';
  var path = urlWithoutSearch.split(delimiter)[1];

  if (path === undefined) {
    path = urlWithoutSearch;
  }

  if (path === '/') {
    path = '';
  }

  if (path[path.length - 1] === '/') {
    path = path.slice(0, -1);
  }

  return {
    path: path,
    params: params
  };
};

exports.urlToPathAndParams = urlToPathAndParams;

var createPathParser = function createPathParser(childRouters, routeConfigs, _ref) {
  var _ref$paths = _ref.paths,
      pathConfigs = _ref$paths === void 0 ? {} : _ref$paths,
      disableRouteNamePaths = _ref.disableRouteNamePaths;
  var pathsByRouteNames = {};
  var paths = [];
  Object.keys(childRouters).forEach(function (routeName) {
    var pathPattern;

    if (pathConfigs[routeName] !== undefined) {
      pathPattern = pathConfigs[routeName];
    } else {
      pathPattern = routeConfigs[routeName].path;
    }

    if (pathPattern === undefined) {
      pathPattern = disableRouteNamePaths ? null : routeName;
    }

    (0, _invariant.default)(pathPattern === null || typeof pathPattern === 'string', "Route path for " + routeName + " must be specified as a string, or null.");
    var isPathMatchable = pathPattern !== null;
    var exactReKeys = [];
    var exactRe = isPathMatchable ? (0, _pathToRegexp.default)(pathPattern, exactReKeys) : null;
    var extendedPathReKeys = [];
    var isWildcard = pathPattern === '' || !isPathMatchable;
    var extendedPathRe = (0, _pathToRegexp.default)(isWildcard ? '*' : pathPattern + "/*", extendedPathReKeys);
    pathsByRouteNames[routeName] = {
      exactRe: exactRe,
      exactReKeys: exactReKeys,
      extendedPathRe: extendedPathRe,
      extendedPathReKeys: extendedPathReKeys,
      isWildcard: isWildcard,
      toPath: pathPattern === null ? function () {
        return '';
      } : (0, _pathToRegexp.compile)(pathPattern)
    };
  });
  paths = Object.entries(pathsByRouteNames);

  var getActionForPathAndParams = function getActionForPathAndParams() {
    var pathToResolve = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var inputParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    for (var _iterator = paths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : "@@iterator"]();;) {
      var _ref4;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref4 = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref4 = _i.value;
      }

      var _ref8 = _ref4;

      var _ref3 = (0, _slicedToArray2.default)(_ref8, 2);

      var _routeName2 = _ref3[0];
      var _path2 = _ref3[1];
      var exactRe = _path2.exactRe,
          exactReKeys = _path2.exactReKeys,
          extendedPathRe = _path2.extendedPathRe,
          extendedPathReKeys = _path2.extendedPathReKeys;
      var childRouter = childRouters[_routeName2];
      var exactMatch = exactRe && exactRe.exec(pathToResolve);

      if (exactMatch && exactMatch.length) {
        var extendedMatch = extendedPathRe && extendedPathRe.exec(pathToResolve);
        var childAction = null;

        if (extendedMatch && childRouter) {
          var restOfPath = getRestOfPath(extendedMatch, extendedPathReKeys);
          childAction = childRouter.getActionForPathAndParams(restOfPath, inputParams);
        }

        return NavigationActions.navigate({
          routeName: _routeName2,
          params: getParamsFromPath(inputParams, exactMatch, exactReKeys),
          action: childAction
        });
      }
    }

    for (var _iterator2 = paths, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : "@@iterator"]();;) {
      var _ref7;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref7 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref7 = _i2.value;
      }

      var _ref9 = _ref7;

      var _ref6 = (0, _slicedToArray2.default)(_ref9, 2);

      var _routeName3 = _ref6[0];
      var _path3 = _ref6[1];
      var _extendedPathRe = _path3.extendedPathRe,
          _extendedPathReKeys = _path3.extendedPathReKeys;
      var _childRouter = childRouters[_routeName3];

      var _extendedMatch = _extendedPathRe && _extendedPathRe.exec(pathToResolve);

      if (_extendedMatch && _extendedMatch.length) {
        var _restOfPath = getRestOfPath(_extendedMatch, _extendedPathReKeys);

        var _childAction = null;

        if (_childRouter) {
          _childAction = _childRouter.getActionForPathAndParams(_restOfPath, inputParams);
        }

        if (!_childAction) {
          continue;
        }

        return NavigationActions.navigate({
          routeName: _routeName3,
          params: getParamsFromPath(inputParams, _extendedMatch, _extendedPathReKeys),
          action: _childAction
        });
      }
    }

    return null;
  };

  var getPathAndParamsForRoute = function getPathAndParamsForRoute(route) {
    var routeName = route.routeName,
        params = route.params;
    var childRouter = childRouters[routeName];
    var _pathsByRouteNames$ro = pathsByRouteNames[routeName],
        toPath = _pathsByRouteNames$ro.toPath,
        exactReKeys = _pathsByRouteNames$ro.exactReKeys;
    var subPath = toPath(params);
    var nonPathParams = {};

    if (params) {
      Object.keys(params).filter(function (paramName) {
        return !exactReKeys.find(function (k) {
          return k.name === paramName;
        });
      }).forEach(function (paramName) {
        nonPathParams[paramName] = params[paramName];
      });
    }

    if (childRouter) {
      var child = childRouter.getPathAndParamsForState(route);
      return {
        path: subPath ? subPath + "/" + child.path : child.path,
        params: child.params ? (0, _objectSpread2.default)({}, nonPathParams, child.params) : nonPathParams
      };
    }

    return {
      path: subPath,
      params: nonPathParams
    };
  };

  return {
    getActionForPathAndParams: getActionForPathAndParams,
    getPathAndParamsForRoute: getPathAndParamsForRoute
  };
};

exports.createPathParser = createPathParser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,