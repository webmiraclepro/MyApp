{"version":3,"sources":["BorderlessButton.tsx"],"names":["AnimatedBaseButton","Animated","BaseButton","BorderlessButton","React","Component","defaultProps","activeOpacity","borderless","opacity","handleActiveStateChange","Platform","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","toValue","active","useNativeDriver","children","style","enabled","rest"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,0BAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;;;AAEA,IAAMA,kBAAkB,GAAGC,YAAAA,CAAAA,QAAAA,CAAAA,uBAAAA,CAAiCC,0BAAAA,CAA5D,UAA2BD,CAA3B;;AAMqBE,IAAAA,gB;;;;;;;;;;;;;;;UAMXM,O,GAAU,IAAIR,YAAAA,CAAAA,QAAAA,CAAJ,KAAA,CAAA,CAAA,C;;UAEVS,uB,GAA0B,UAAA,MAAA,EAAqB;AACrD,UAAIC,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,KAAJ,SAAA,EAA+B;AAC7BV,QAAAA,YAAAA,CAAAA,QAAAA,CAAAA,MAAAA,CAAgB,KAAA,CAAhBA,OAAAA,EAA8B;AAC5BW,UAAAA,SAAS,EADmB,IAAA;AAE5BC,UAAAA,OAAO,EAFqB,GAAA;AAG5BC,UAAAA,IAAI,EAHwB,CAAA;AAI5BC,UAAAA,iBAAiB,EAJW,IAAA;AAK5BC,UAAAA,yBAAyB,EALG,IAAA;AAM5BC,UAAAA,kBAAkB,EANU,IAAA;AAO5BC,UAAAA,OAAO,EAAEC,MAAM,GAAG,KAAA,CAAA,KAAA,CAAH,aAAA,GAPa,CAAA;AAQ5BC,UAAAA,eAAe,EARjBnB;AAA8B,SAA9BA,EAAAA,KAAAA;AAYF;;AAAA,MAAA,KAAA,CAAA,KAAA,CAAA,mBAAA,IAAkC,KAAA,CAAA,KAAA,CAAA,mBAAA,CAAlC,MAAkC,CAAlC;;;;;;;;6BAGO;AAAA,UAAA,WAAA,GACuC,KADvC,KAAA;AAAA,UACCoB,QADD,GAAA,WAAA,CAAA,QAAA;AAAA,UACWC,KADX,GAAA,WAAA,CAAA,KAAA;AAAA,UACkBC,OADlB,GAAA,WAAA,CAAA,OAAA;AAAA,UAC8BC,IAD9B,GAAA,CAAA,GAAA,yBAAA,CAAA,OAAA,EAAA,WAAA,EAAA,CAAA,UAAA,EAAA,OAAA,EAAA,SAAA,CAAA,CAAA;AAGP,aACE,KAAA,CAAA,aAAA,CAAA,kBAAA,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,EAAA,EAAA,IAAA,EAAA;AAEE,QAAA,mBAAmB,EAAE,KAFvB,uBAAA;AAGE,QAAA,KAAK,EAAE,CAAA,KAAA,EAELb,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,KAAAA,KAAAA,IAAAA,OAAAA,IAAoC;AAAEF,UAAAA,OAAO,EAAE,KALnD;AAKwC,SAF/B,CAHT;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAAA;AAAA;AAAA,OAAA,CAAA,EADF,QACE,CADF;;;;EA5B0CL,KAAK,CAACC,S,CAA/BF;;;AAAAA,gB,CACZG,YADYH,GACG;AACpBI,EAAAA,aAAa,EADO,GAAA;AAEpBC,EAAAA,UAAU,EAFU;AAAA,CADHL","sourcesContent":["import * as React from 'react';\nimport { Animated, Platform } from 'react-native';\nimport { BaseButton } from 'react-native-gesture-handler';\n\nconst AnimatedBaseButton = Animated.createAnimatedComponent(BaseButton);\n\ntype Props = React.ComponentProps<typeof BaseButton> & {\n  activeOpacity: number;\n};\n\nexport default class BorderlessButton extends React.Component<Props> {\n  static defaultProps = {\n    activeOpacity: 0.3,\n    borderless: true,\n  };\n\n  private opacity = new Animated.Value(1);\n\n  private handleActiveStateChange = (active: boolean) => {\n    if (Platform.OS !== 'android') {\n      Animated.spring(this.opacity, {\n        stiffness: 1000,\n        damping: 500,\n        mass: 3,\n        overshootClamping: true,\n        restDisplacementThreshold: 0.01,\n        restSpeedThreshold: 0.01,\n        toValue: active ? this.props.activeOpacity : 1,\n        useNativeDriver: true,\n      }).start();\n    }\n\n    this.props.onActiveStateChange && this.props.onActiveStateChange(active);\n  };\n\n  render() {\n    const { children, style, enabled, ...rest } = this.props;\n\n    return (\n      <AnimatedBaseButton\n        {...rest}\n        onActiveStateChange={this.handleActiveStateChange}\n        style={[\n          style,\n          Platform.OS === 'ios' && enabled && { opacity: this.opacity },\n        ]}\n      >\n        {children}\n      </AnimatedBaseButton>\n    );\n  }\n}\n"]}