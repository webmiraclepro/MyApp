{"version":3,"sources":["getPositionInterpolator.js"],"names":["getPositionInterpolator","spec","nativeInterpolator","getInterpolation","equalAspectRatio","translateX","interpolate","inputRange","outputRange","to","metrics","x","from","width","scaleX","translateY","y","height","scaleY","nativeAnimationStyles","transform"],"mappings":";;;;;AAAA;;AACA;;AAEO,IAAMA,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,IAAD,EAAwD;AAC7F,MAAMC,kBAAkB,GAAGD,IAAI,CAACE,gBAAL,CAAsB,IAAtB,CAA3B;;AACA,MAAIF,IAAI,CAACG,gBAAT,EAA2B;AAEzB,QAAMC,WAAU,GAAGH,kBAAkB,CAACI,WAAnB,CAA+B;AAChDC,MAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADoC;AAEhDC,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAKP,IAAI,CAACQ,EAAL,CAAQC,OAAR,CAAgBC,CAAhB,GAAoBV,IAAI,CAACW,IAAL,CAAUF,OAAV,CAAkBC,CAAvC,GACfV,IAAI,CAACW,IAAL,CAAUF,OAAV,CAAkBG,KAAlB,GAA0B,CAA1B,IAA+BZ,IAAI,CAACa,MAAL,GAAc,CAA7C,CADW;AAFmC,KAA/B,CAAnB;;AAMA,QAAMC,WAAU,GAAGb,kBAAkB,CAACI,WAAnB,CAA+B;AAChDC,MAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADoC;AAEhDC,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAKP,IAAI,CAACQ,EAAL,CAAQC,OAAR,CAAgBM,CAAhB,GAAoBf,IAAI,CAACW,IAAL,CAAUF,OAAV,CAAkBM,CAAvC,GACff,IAAI,CAACW,IAAL,CAAUF,OAAV,CAAkBO,MAAlB,GAA2B,CAA3B,IAAgChB,IAAI,CAACiB,MAAL,GAAc,CAA9C,CADW;AAFmC,KAA/B,CAAnB;;AAMA,WAAO;AAAEC,MAAAA,qBAAqB,EAAE;AAC9BN,QAAAA,KAAK,EAAEZ,IAAI,CAACW,IAAL,CAAUF,OAAV,CAAkBG,KADK;AAE9BI,QAAAA,MAAM,EAAEhB,IAAI,CAACW,IAAL,CAAUF,OAAV,CAAkBO,MAFI;AAG9BG,QAAAA,SAAS,EAAE,CAAC;AAAEf,UAAAA,UAAU,EAAVA;AAAF,SAAD,EAAiB;AAAEU,UAAAA,UAAU,EAAVA;AAAF,SAAjB;AAHmB;AAAzB,KAAP;AAKD;;AAED,MAAMV,UAAU,GAAGH,kBAAkB,CAACI,WAAnB,CAA+B;AAChDC,IAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADoC;AAEhDC,IAAAA,WAAW,EAAE,CAAC,CAAD,EAAKP,IAAI,CAACQ,EAAL,CAAQC,OAAR,CAAgBC,CAAhB,GAAoBV,IAAI,CAACW,IAAL,CAAUF,OAAV,CAAkBC,CAA3C;AAFmC,GAA/B,CAAnB;AAKA,MAAMI,UAAU,GAAGb,kBAAkB,CAACI,WAAnB,CAA+B;AAChDC,IAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADoC;AAEhDC,IAAAA,WAAW,EAAE,CAAC,CAAD,EAAKP,IAAI,CAACQ,EAAL,CAAQC,OAAR,CAAgBM,CAAhB,GAAoBf,IAAI,CAACW,IAAL,CAAUF,OAAV,CAAkBM,CAA3C;AAFmC,GAA/B,CAAnB;AAKA,SAAO;AAAEG,IAAAA,qBAAqB,EAAE;AAC9BC,MAAAA,SAAS,EAAE,CAAC;AAAEf,QAAAA,UAAU,EAAVA;AAAF,OAAD,EAAiB;AAAEU,QAAAA,UAAU,EAAVA;AAAF,OAAjB;AADmB;AAAzB,GAAP;AAGD,CApCM","sourcesContent":["import { StyleSheet } from 'react-native';\nimport { InterpolatorSpecification } from '../Types/InterpolatorSpecification';\n\nexport const getPositionInterpolator = (spec: InterpolatorSpecification): StyleSheet.Styles => {\n  const nativeInterpolator = spec.getInterpolation(true);\n  if (spec.equalAspectRatio) {\n  // Create Native interpolation\n    const translateX = nativeInterpolator.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, (spec.to.metrics.x - spec.from.metrics.x)\n      + spec.from.metrics.width / 2 * (spec.scaleX - 1)],\n    });\n\n    const translateY = nativeInterpolator.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, (spec.to.metrics.y - spec.from.metrics.y)\n      + spec.from.metrics.height / 2 * (spec.scaleY - 1)],\n    });\n\n    return { nativeAnimationStyles: {\n      width: spec.from.metrics.width,\n      height: spec.from.metrics.height,\n      transform: [{ translateX }, { translateY }] },\n    };\n  }\n\n  const translateX = nativeInterpolator.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, (spec.to.metrics.x - spec.from.metrics.x)],\n  });\n\n  const translateY = nativeInterpolator.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, (spec.to.metrics.y - spec.from.metrics.y)],\n  });\n\n  return { nativeAnimationStyles: {\n    transform: [{ translateX }, { translateY }] },\n  };\n};\n"]}