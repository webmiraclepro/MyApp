20343ea4884398bffe3c498fc7425794
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _TransitionItem = _interopRequireDefault(require("./TransitionItem"));

var TransitionItems = function () {
  function TransitionItems() {
    (0, _classCallCheck2.default)(this, TransitionItems);
    this._items = [];
  }

  (0, _createClass2.default)(TransitionItems, [{
    key: "count",
    value: function count() {
      return this._items.length;
    }
  }, {
    key: "add",
    value: function add(item) {
      if (this._items.findIndex(function (e) {
        return e.name === item.name && e.route === item.route;
      }) >= 0) {
        return false;
      }

      this._items = [].concat((0, _toConsumableArray2.default)(this._items), [item]);
      return true;
    }
  }, {
    key: "remove",
    value: function remove(name, route) {
      var index = this._items.findIndex(function (e) {
        return e.name === name && e.route === route;
      });

      if (index >= 0) {
        this._items = [].concat((0, _toConsumableArray2.default)(this._items.slice(0, index)), (0, _toConsumableArray2.default)(this._items.slice(index + 1)));
        return true;
      }

      return false;
    }
  }, {
    key: "getItems",
    value: function getItems() {
      return this._items;
    }
  }, {
    key: "getRoutes",
    value: function getRoutes() {
      var routes = [];

      for (var i = 0; i < this._items.length; i++) {
        if (!routes.includes(this._items[i].route)) {
          routes.push(this._items[i].route);
        }
      }

      if (routes.length !== 2) {
        throw new Error("Number of routes should be 2, was " + routes.length);
      }

      return {
        fromRoute: routes[0],
        toRoute: routes[1]
      };
    }
  }, {
    key: "getItemByNameAndRoute",
    value: function getItemByNameAndRoute(name, route) {
      return this._items.find(function (e) {
        return e.name === name && e.route === route;
      });
    }
  }, {
    key: "getSharedElements",
    value: function getSharedElements(fromRoute, toRoute) {
      return this._getItemPairs(fromRoute, toRoute).filter(function (pair) {
        return pair.toItem !== undefined && pair.fromItem !== undefined;
      });
    }
  }, {
    key: "getTransitionElements",
    value: function getTransitionElements(fromRoute, toRoute) {
      var itemPairs = this._getItemPairs(fromRoute, toRoute).filter(function (pair) {
        return pair.toItem !== undefined && pair.fromItem !== undefined;
      });

      var items = this._items.filter(function (e) {
        return e.getIsMounted() && (e.appear !== undefined || e.disappear !== undefined) && (e.route === fromRoute || e.route === toRoute);
      });

      items = items.filter(function (e) {
        return itemPairs.findIndex(function (p) {
          return e.name === p.fromItem.name && e.route === p.fromItem.route || e.name === p.toItem.name && e.route === p.toItem.route;
        }) === -1;
      });
      return items;
    }
  }, {
    key: "_getNamePairMap",
    value: function _getNamePairMap(fromRoute, toRoute) {
      var nameMap = this._items.filter(function (p) {
        return p.getIsMounted();
      }).reduce(function (map, item) {
        var pairByName = map.get(item.name);

        if (!pairByName) {
          pairByName = {};
          map.set(item.name, pairByName);
        }

        if (item.route === fromRoute) pairByName.fromItem = item;
        if (item.route === toRoute) pairByName.toItem = item;

        if (!pairByName.fromItem && !pairByName.toItem) {
          map.delete(item.name);
        }

        return map;
      }, new Map());

      return nameMap;
    }
  }, {
    key: "_getItemPairs",
    value: function _getItemPairs(fromRoute, toRoute) {
      var nameMap = this._getNamePairMap(fromRoute, toRoute);

      var pairs = Array.from(nameMap.values());

      var anchorItems = this._items.filter(function (e) {
        return (e.route === fromRoute || e.route === toRoute) && e.anchor;
      });

      return pairs.map(function (p) {
        var fromItem = p.fromItem,
            toItem = p.toItem;

        if (fromItem) {
          fromItem.anchors = anchorItems.filter(function (e) {
            return e.route === p.fromItem.route && e.anchor === p.fromItem.name;
          });
        }

        if (toItem) {
          toItem.anchors = anchorItems.filter(function (e) {
            return e.route === p.toItem.route && e.anchor === p.toItem.name;
          });
        }

        return {
          fromItem: fromItem,
          toItem: toItem
        };
      });
    }
  }]);
  return TransitionItems;
}();

exports.default = TransitionItems;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,