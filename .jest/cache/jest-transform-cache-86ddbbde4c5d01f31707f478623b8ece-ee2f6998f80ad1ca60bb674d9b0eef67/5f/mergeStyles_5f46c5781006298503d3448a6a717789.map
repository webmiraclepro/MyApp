{"version":3,"sources":["mergeStyles.js"],"names":["mergeStyles","styles","retVal","transform","forEach","style","flattenedStyle","isNumber","StyleSheet","flatten","Object","keys","key","Array","a","i","push","n","Number","isNaN","parseFloat"],"mappings":";;;;;AAAA;;AAEA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,EAA2C;AAC7D,MAAMC,MAAM,GAAG;AAAEC,IAAAA,SAAS,EAAE;AAAb,GAAf;AACAF,EAAAA,MAAM,CAACG,OAAP,CAAe,UAAAC,KAAK,EAAI;AACtB,QAAIA,KAAJ,EAAW;AACT,UAAIC,cAAc,GAAGD,KAArB;;AACA,UAAIE,QAAQ,CAACD,cAAD,CAAZ,EAA8B;AAAEA,QAAAA,cAAc,GAAGE,wBAAWC,OAAX,CAAmBH,cAAnB,CAAjB;AAAsD;;AAEtFI,MAAAA,MAAM,CAACC,IAAP,CAAYL,cAAZ,EAA4BF,OAA5B,CAAoC,UAAAQ,GAAG,EAAI;AACzC,YAAIN,cAAc,CAACM,GAAD,CAAd,IAAuBN,cAAc,CAACM,GAAD,CAAd,YAA+BC,KAA1D,EAAiE;AAC/D,cAAMC,CAAC,GAAGR,cAAc,CAACM,GAAD,CAAxB;AACA,cAAI,CAACV,MAAM,CAACU,GAAD,CAAX,EAAkBV,MAAM,CAACU,GAAD,CAAN,GAAc,EAAd;AAClBE,UAAAA,CAAC,CAACV,OAAF,CAAU,UAAAW,CAAC;AAAA,mBAAIb,MAAM,CAACU,GAAD,CAAN,CAAYI,IAAZ,CAAiBD,CAAjB,CAAJ;AAAA,WAAX;AACD,SAJD,MAIO,IAAIT,cAAc,CAACM,GAAD,CAAlB,EAAyB;AAC9BV,UAAAA,MAAM,CAACU,GAAD,CAAN,GAAcN,cAAc,CAACM,GAAD,CAA5B;AACD;AACF,OARD;AASD;AACF,GAfD;AAiBA,SAAOV,MAAP;AACD,CApBD;;;;AAsBA,SAASK,QAAT,CAAkBU,CAAlB,EAAqB;AAAE,SAAO,CAACC,MAAM,CAACC,KAAP,CAAaC,UAAU,CAACH,CAAD,CAAvB,CAAD,IAAgC,CAACC,MAAM,CAACC,KAAP,CAAaF,CAAC,GAAG,CAAjB,CAAxC;AAA8D","sourcesContent":["import { StyleSheet } from 'react-native';\n\nconst mergeStyles = (styles: Array<any>): StyleSheet.Styles => {\n  const retVal = { transform: [] };\n  styles.forEach(style => {\n    if (style) {\n      let flattenedStyle = style;\n      if (isNumber(flattenedStyle)) { flattenedStyle = StyleSheet.flatten(flattenedStyle); }\n\n      Object.keys(flattenedStyle).forEach(key => {\n        if (flattenedStyle[key] && flattenedStyle[key] instanceof Array) {\n          const a = flattenedStyle[key];\n          if (!retVal[key]) retVal[key] = [];\n          a.forEach(i => retVal[key].push(i));\n        } else if (flattenedStyle[key]) {\n          retVal[key] = flattenedStyle[key];\n        }\n      });\n    }\n  });\n\n  return retVal;\n};\n\nfunction isNumber(n) { return !Number.isNaN(parseFloat(n)) && !Number.isNaN(n - 0); }\n\nexport { mergeStyles };\n"]}