4d504527ea59933039e4fb6a17c65da2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _invariant = _interopRequireDefault(require("../utils/invariant"));

var _getScreenForRouteName = _interopRequireDefault(require("./getScreenForRouteName"));

var _validateScreenOptions = _interopRequireDefault(require("./validateScreenOptions"));

function applyConfig(configurer, navigationOptions, configProps) {
  if (typeof configurer === 'function') {
    return (0, _objectSpread2.default)({}, navigationOptions, configurer((0, _objectSpread2.default)({}, configProps, {
      navigationOptions: navigationOptions
    })));
  }

  if (typeof configurer === 'object') {
    return (0, _objectSpread2.default)({}, navigationOptions, configurer);
  }

  return navigationOptions;
}

var _default = function _default(routeConfigs, navigatorScreenConfig) {
  return function (navigation, screenProps) {
    var state = navigation.state;
    var route = state;
    (0, _invariant.default)(route.routeName && typeof route.routeName === 'string', 'Cannot get config because the route does not have a routeName.');
    var Component = (0, _getScreenForRouteName.default)(routeConfigs, route.routeName);
    var routeConfig = routeConfigs[route.routeName];
    var routeScreenConfig = routeConfig === Component ? null : routeConfig.navigationOptions;
    var componentScreenConfig = Component.navigationOptions;
    var configOptions = {
      navigation: navigation,
      screenProps: screenProps || {}
    };
    var outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);
    outputConfig = applyConfig(componentScreenConfig, outputConfig, configOptions);
    outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);
    (0, _validateScreenOptions.default)(outputConfig, route);
    return outputConfig;
  };
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZUNvbmZpZ0dldHRlci5qcyJdLCJuYW1lcyI6WyJjb25maWd1cmVyIiwibmF2aWdhdGlvbk9wdGlvbnMiLCJzdGF0ZSIsIm5hdmlnYXRpb24iLCJyb3V0ZSIsIkNvbXBvbmVudCIsInJvdXRlQ29uZmlnIiwicm91dGVDb25maWdzIiwicm91dGVTY3JlZW5Db25maWciLCJjb21wb25lbnRTY3JlZW5Db25maWciLCJjb25maWdPcHRpb25zIiwic2NyZWVuUHJvcHMiLCJvdXRwdXRDb25maWciLCJhcHBseUNvbmZpZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsSUFBQSxVQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsb0JBQUEsQ0FBQSxDQUFBOztBQUVBLElBQUEsc0JBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSx5QkFBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxzQkFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLHlCQUFBLENBQUEsQ0FBQTs7QUFFQSxTQUFBLFdBQUEsQ0FBQSxVQUFBLEVBQUEsaUJBQUEsRUFBQSxXQUFBLEVBQWlFO0FBQy9ELE1BQUksT0FBQSxVQUFBLEtBQUosVUFBQSxFQUFzQztBQUNwQyxXQUFBLENBQUEsR0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLEVBQUEsRUFBQSxpQkFBQSxFQUVLQSxVQUFVLENBQUEsQ0FBQSxHQUFBLGNBQUEsQ0FBQSxPQUFBLEVBQUEsRUFBQSxFQUFBLFdBQUEsRUFBQTtBQUVYQyxNQUFBQSxpQkFBaUIsRUFKckI7QUFFZSxLQUFBLENBQUEsQ0FGZixDQUFBO0FBUUY7O0FBQUEsTUFBSSxPQUFBLFVBQUEsS0FBSixRQUFBLEVBQW9DO0FBQ2xDLFdBQUEsQ0FBQSxHQUFBLGNBQUEsQ0FBQSxPQUFBLEVBQUEsRUFBQSxFQUFBLGlCQUFBLEVBQUEsVUFBQSxDQUFBO0FBS0Y7O0FBQUEsU0FBQSxpQkFBQTs7O2VBR2EsU0FBQSxRQUFBLENBQUEsWUFBQSxFQUFBLHFCQUFBLEVBQUE7QUFBQSxTQUF5QyxVQUFBLFVBQUEsRUFBQSxXQUFBLEVBR25EO0FBQUEsUUFDS0MsS0FETCxHQUNlQyxVQURmLENBQUEsS0FBQTtBQUVILFFBQU1DLEtBQUssR0FBWCxLQUFBO0FBRUEsS0FBQSxHQUFBLFVBQUEsQ0FBQSxPQUFBLEVBQ0VBLEtBQUssQ0FBTEEsU0FBQUEsSUFBbUIsT0FBT0EsS0FBSyxDQUFaLFNBQUEsS0FEckIsUUFBQSxFQUFBLGdFQUFBO0FBS0EsUUFBTUMsU0FBUyxHQUFHLENBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsRUFBQSxZQUFBLEVBQW9DRCxLQUFLLENBQTNELFNBQWtCLENBQWxCO0FBRUEsUUFBTUUsV0FBVyxHQUFHQyxZQUFZLENBQUNILEtBQUssQ0FBdEMsU0FBZ0MsQ0FBaEM7QUFFQSxRQUFNSSxpQkFBaUIsR0FDckJGLFdBQVcsS0FBWEEsU0FBQUEsR0FBQUEsSUFBQUEsR0FBbUNBLFdBQVcsQ0FEaEQsaUJBQUE7QUFFQSxRQUFNRyxxQkFBcUIsR0FBR0osU0FBUyxDQUF2QyxpQkFBQTtBQUVBLFFBQU1LLGFBQWEsR0FBRztBQUFFUCxNQUFBQSxVQUFVLEVBQVosVUFBQTtBQUFjUSxNQUFBQSxXQUFXLEVBQUVBLFdBQVcsSUFBNUQ7QUFBc0IsS0FBdEI7QUFFQSxRQUFJQyxZQUFZLEdBQUdDLFdBQVcsQ0FBQSxxQkFBQSxFQUFBLEVBQUEsRUFBOUIsYUFBOEIsQ0FBOUI7QUFDQUQsSUFBQUEsWUFBWSxHQUFHQyxXQUFXLENBQUEscUJBQUEsRUFBQSxZQUFBLEVBQTFCRCxhQUEwQixDQUExQkE7QUFLQUEsSUFBQUEsWUFBWSxHQUFHQyxXQUFXLENBQUEsaUJBQUEsRUFBQSxZQUFBLEVBQTFCRCxhQUEwQixDQUExQkE7QUFFQSxLQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLEVBQUEsWUFBQSxFQUFBLEtBQUE7QUFFQSxXQUFBLFlBQUE7QUFoQ2EsR0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpbnZhcmlhbnQgZnJvbSAnLi4vdXRpbHMvaW52YXJpYW50JztcblxuaW1wb3J0IGdldFNjcmVlbkZvclJvdXRlTmFtZSBmcm9tICcuL2dldFNjcmVlbkZvclJvdXRlTmFtZSc7XG5pbXBvcnQgdmFsaWRhdGVTY3JlZW5PcHRpb25zIGZyb20gJy4vdmFsaWRhdGVTY3JlZW5PcHRpb25zJztcblxuZnVuY3Rpb24gYXBwbHlDb25maWcoY29uZmlndXJlciwgbmF2aWdhdGlvbk9wdGlvbnMsIGNvbmZpZ1Byb3BzKSB7XG4gIGlmICh0eXBlb2YgY29uZmlndXJlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5uYXZpZ2F0aW9uT3B0aW9ucyxcbiAgICAgIC4uLmNvbmZpZ3VyZXIoe1xuICAgICAgICAuLi5jb25maWdQcm9wcyxcbiAgICAgICAgbmF2aWdhdGlvbk9wdGlvbnMsXG4gICAgICB9KSxcbiAgICB9O1xuICB9XG4gIGlmICh0eXBlb2YgY29uZmlndXJlciA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ubmF2aWdhdGlvbk9wdGlvbnMsXG4gICAgICAuLi5jb25maWd1cmVyLFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIG5hdmlnYXRpb25PcHRpb25zO1xufVxuXG5leHBvcnQgZGVmYXVsdCAocm91dGVDb25maWdzLCBuYXZpZ2F0b3JTY3JlZW5Db25maWcpID0+IChcbiAgbmF2aWdhdGlvbixcbiAgc2NyZWVuUHJvcHNcbikgPT4ge1xuICBjb25zdCB7IHN0YXRlIH0gPSBuYXZpZ2F0aW9uO1xuICBjb25zdCByb3V0ZSA9IHN0YXRlO1xuXG4gIGludmFyaWFudChcbiAgICByb3V0ZS5yb3V0ZU5hbWUgJiYgdHlwZW9mIHJvdXRlLnJvdXRlTmFtZSA9PT0gJ3N0cmluZycsXG4gICAgJ0Nhbm5vdCBnZXQgY29uZmlnIGJlY2F1c2UgdGhlIHJvdXRlIGRvZXMgbm90IGhhdmUgYSByb3V0ZU5hbWUuJ1xuICApO1xuXG4gIGNvbnN0IENvbXBvbmVudCA9IGdldFNjcmVlbkZvclJvdXRlTmFtZShyb3V0ZUNvbmZpZ3MsIHJvdXRlLnJvdXRlTmFtZSk7XG5cbiAgY29uc3Qgcm91dGVDb25maWcgPSByb3V0ZUNvbmZpZ3Nbcm91dGUucm91dGVOYW1lXTtcblxuICBjb25zdCByb3V0ZVNjcmVlbkNvbmZpZyA9XG4gICAgcm91dGVDb25maWcgPT09IENvbXBvbmVudCA/IG51bGwgOiByb3V0ZUNvbmZpZy5uYXZpZ2F0aW9uT3B0aW9ucztcbiAgY29uc3QgY29tcG9uZW50U2NyZWVuQ29uZmlnID0gQ29tcG9uZW50Lm5hdmlnYXRpb25PcHRpb25zO1xuXG4gIGNvbnN0IGNvbmZpZ09wdGlvbnMgPSB7IG5hdmlnYXRpb24sIHNjcmVlblByb3BzOiBzY3JlZW5Qcm9wcyB8fCB7fSB9O1xuXG4gIGxldCBvdXRwdXRDb25maWcgPSBhcHBseUNvbmZpZyhuYXZpZ2F0b3JTY3JlZW5Db25maWcsIHt9LCBjb25maWdPcHRpb25zKTtcbiAgb3V0cHV0Q29uZmlnID0gYXBwbHlDb25maWcoXG4gICAgY29tcG9uZW50U2NyZWVuQ29uZmlnLFxuICAgIG91dHB1dENvbmZpZyxcbiAgICBjb25maWdPcHRpb25zXG4gICk7XG4gIG91dHB1dENvbmZpZyA9IGFwcGx5Q29uZmlnKHJvdXRlU2NyZWVuQ29uZmlnLCBvdXRwdXRDb25maWcsIGNvbmZpZ09wdGlvbnMpO1xuXG4gIHZhbGlkYXRlU2NyZWVuT3B0aW9ucyhvdXRwdXRDb25maWcsIHJvdXRlKTtcblxuICByZXR1cm4gb3V0cHV0Q29uZmlnO1xufTtcbiJdfQ==