{"version":3,"sources":["createConfigGetter.js"],"names":["configurer","navigationOptions","state","navigation","route","Component","routeConfig","routeConfigs","routeScreenConfig","componentScreenConfig","configOptions","screenProps","outputConfig","applyConfig"],"mappings":";;;;;;;;;AAAA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA;;AAEA,IAAA,sBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,yBAAA,CAAA,CAAA;;AACA,IAAA,sBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,yBAAA,CAAA,CAAA;;AAEA,SAAA,WAAA,CAAA,UAAA,EAAA,iBAAA,EAAA,WAAA,EAAiE;AAC/D,MAAI,OAAA,UAAA,KAAJ,UAAA,EAAsC;AACpC,WAAA,CAAA,GAAA,cAAA,CAAA,OAAA,EAAA,EAAA,EAAA,iBAAA,EAEKA,UAAU,CAAA,CAAA,GAAA,cAAA,CAAA,OAAA,EAAA,EAAA,EAAA,WAAA,EAAA;AAEXC,MAAAA,iBAAiB,EAJrB;AAEe,KAAA,CAAA,CAFf,CAAA;AAQF;;AAAA,MAAI,OAAA,UAAA,KAAJ,QAAA,EAAoC;AAClC,WAAA,CAAA,GAAA,cAAA,CAAA,OAAA,EAAA,EAAA,EAAA,iBAAA,EAAA,UAAA,CAAA;AAKF;;AAAA,SAAA,iBAAA;;;eAGa,SAAA,QAAA,CAAA,YAAA,EAAA,qBAAA,EAAA;AAAA,SAAyC,UAAA,UAAA,EAAA,WAAA,EAGnD;AAAA,QACKC,KADL,GACeC,UADf,CAAA,KAAA;AAEH,QAAMC,KAAK,GAAX,KAAA;AAEA,KAAA,GAAA,UAAA,CAAA,OAAA,EACEA,KAAK,CAALA,SAAAA,IAAmB,OAAOA,KAAK,CAAZ,SAAA,KADrB,QAAA,EAAA,gEAAA;AAKA,QAAMC,SAAS,GAAG,CAAA,GAAA,sBAAA,CAAA,OAAA,EAAA,YAAA,EAAoCD,KAAK,CAA3D,SAAkB,CAAlB;AAEA,QAAME,WAAW,GAAGC,YAAY,CAACH,KAAK,CAAtC,SAAgC,CAAhC;AAEA,QAAMI,iBAAiB,GACrBF,WAAW,KAAXA,SAAAA,GAAAA,IAAAA,GAAmCA,WAAW,CADhD,iBAAA;AAEA,QAAMG,qBAAqB,GAAGJ,SAAS,CAAvC,iBAAA;AAEA,QAAMK,aAAa,GAAG;AAAEP,MAAAA,UAAU,EAAZ,UAAA;AAAcQ,MAAAA,WAAW,EAAEA,WAAW,IAA5D;AAAsB,KAAtB;AAEA,QAAIC,YAAY,GAAGC,WAAW,CAAA,qBAAA,EAAA,EAAA,EAA9B,aAA8B,CAA9B;AACAD,IAAAA,YAAY,GAAGC,WAAW,CAAA,qBAAA,EAAA,YAAA,EAA1BD,aAA0B,CAA1BA;AAKAA,IAAAA,YAAY,GAAGC,WAAW,CAAA,iBAAA,EAAA,YAAA,EAA1BD,aAA0B,CAA1BA;AAEA,KAAA,GAAA,sBAAA,CAAA,OAAA,EAAA,YAAA,EAAA,KAAA;AAEA,WAAA,YAAA;AAhCa,GAAA","sourcesContent":["import invariant from '../utils/invariant';\n\nimport getScreenForRouteName from './getScreenForRouteName';\nimport validateScreenOptions from './validateScreenOptions';\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return {\n      ...navigationOptions,\n      ...configurer({\n        ...configProps,\n        navigationOptions,\n      }),\n    };\n  }\n  if (typeof configurer === 'object') {\n    return {\n      ...navigationOptions,\n      ...configurer,\n    };\n  }\n  return navigationOptions;\n}\n\nexport default (routeConfigs, navigatorScreenConfig) => (\n  navigation,\n  screenProps\n) => {\n  const { state } = navigation;\n  const route = state;\n\n  invariant(\n    route.routeName && typeof route.routeName === 'string',\n    'Cannot get config because the route does not have a routeName.'\n  );\n\n  const Component = getScreenForRouteName(routeConfigs, route.routeName);\n\n  const routeConfig = routeConfigs[route.routeName];\n\n  const routeScreenConfig =\n    routeConfig === Component ? null : routeConfig.navigationOptions;\n  const componentScreenConfig = Component.navigationOptions;\n\n  const configOptions = { navigation, screenProps: screenProps || {} };\n\n  let outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);\n  outputConfig = applyConfig(\n    componentScreenConfig,\n    outputConfig,\n    configOptions\n  );\n  outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n\n  validateScreenOptions(outputConfig, route);\n\n  return outputConfig;\n};\n"]}