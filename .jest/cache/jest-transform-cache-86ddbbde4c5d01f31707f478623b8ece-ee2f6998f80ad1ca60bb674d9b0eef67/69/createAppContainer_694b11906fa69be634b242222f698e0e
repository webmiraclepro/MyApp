4c58845e274d61a772833daaf90c35b4
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports._TESTING_ONLY_reset_container_count = _TESTING_ONLY_reset_container_count;exports.default = createNavigationContainer;var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _core = require("@react-navigation/core");
var _invariant = _interopRequireDefault(require("./utils/invariant"));
var _docsUrl = _interopRequireDefault(require("./utils/docsUrl"));var _jsxFileName = "/Users/jdnichollsc/dev/react-native/Randomuser-me/node_modules/@react-navigation/native/dist/createAppContainer.js";var

urlToPathAndParams = _core.pathUtils.urlToPathAndParams;

function isStateful(props) {
  return !props.navigation;
}

function validateProps(props) {
  if (props.persistenceKey) {
    console.warn('You passed persistenceKey prop to a navigator. ' + 'The persistenceKey prop was replaced by a more flexible persistence mechanism, ' + 'please see the navigation state persistence docs for more information. ' + 'Passing the persistenceKey prop is a no-op.');
  }
  if (isStateful(props)) {
    return;
  }var


  navigation =




  props.navigation,screenProps = props.screenProps,persistNavigationState = props.persistNavigationState,loadNavigationState = props.loadNavigationState,containerProps = (0, _objectWithoutProperties2.default)(props, ["navigation", "screenProps", "persistNavigationState", "loadNavigationState"]);


  var keys = Object.keys(containerProps);

  if (keys.length !== 0) {
    throw new Error('This navigator has both navigation and container props, so it is ' + ("unclear if it should own its own state. Remove props: \"" + keys.join(', ') + "\" ") + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');
  }
  (0, _invariant.default)(persistNavigationState === undefined && loadNavigationState === undefined || typeof persistNavigationState === 'function' && typeof loadNavigationState === 'function', 'both persistNavigationState and loadNavigationState must either be undefined, or be functions');
}





var _statefulContainerCount = 0;
function _TESTING_ONLY_reset_container_count() {
  _statefulContainerCount = 0;
}



var _reactNavigationIsHydratingState = false;











function createNavigationContainer(Component) {var
  NavigationContainer = function (_React$Component) {(0, _inherits2.default)(NavigationContainer, _React$Component);(0, _createClass2.default)(NavigationContainer, null, [{ key: "getDerivedStateFromProps", value: function getDerivedStateFromProps(





      nextProps) {
        validateProps(nextProps);
        return null;
      } }]);



    function NavigationContainer(props) {var _this;(0, _classCallCheck2.default)(this, NavigationContainer);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(NavigationContainer).call(this, props));_this.subs = null;_this._actionEventSubscribers = new Set();_this.














































      _handleOpenURL = function (_ref) {var url = _ref.url;var _this$props =
        _this.props,enableURLHandling = _this$props.enableURLHandling,uriPrefix = _this$props.uriPrefix;
        if (enableURLHandling === false) {
          return;
        }
        var parsedUrl = urlToPathAndParams(url, uriPrefix);
        if (parsedUrl) {var
          path = parsedUrl.path,params = parsedUrl.params;
          var action = Component.router.getActionForPathAndParams(path, params);
          if (action) {
            _this.dispatch(action);
          }
        }
      };_this.

































































































































      _persistNavigationState = function _callee(nav) {var persistNavigationState;return _regenerator.default.async(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
                persistNavigationState = _this.props.persistNavigationState;if (!
                persistNavigationState) {_context.next = 10;break;}_context.prev = 2;_context.next = 5;return _regenerator.default.awrap(

                persistNavigationState(nav));case 5:_context.next = 10;break;case 7:_context.prev = 7;_context.t0 = _context["catch"](2);

                console.warn('Uncaught exception while calling persistNavigationState()! You should handle exceptions thrown from persistNavigationState(), ignoring them may result in undefined behavior.');case 10:case "end":return _context.stop();}}}, null, null, [[2, 7]]);};_this.
















      dispatch = function (action) {
        if (_this.props.navigation) {
          return _this.props.navigation.dispatch(action);
        }


        _this._navState = _this._navState || _this.state.nav;
        var lastNavState = _this._navState;
        (0, _invariant.default)(lastNavState, 'should be set in constructor if stateful');
        var reducedState = Component.router.getStateForAction(action, lastNavState);
        var navState = reducedState === null ? lastNavState : reducedState;

        var dispatchActionEvents = function dispatchActionEvents() {
          _this._actionEventSubscribers.forEach(function (subscriber) {return subscriber({
              type: 'action',
              action: action,
              state: navState,
              lastState: lastNavState });});

        };

        if (reducedState === null) {


          dispatchActionEvents();
          return true;
        }

        if (navState !== lastNavState) {

          _this._navState = navState;
          _this.setState({ nav: navState }, function () {
            _this._onNavigationStateChange(lastNavState, navState, action);
            dispatchActionEvents();
            _this._persistNavigationState(navState);
          });
          return true;
        }

        dispatchActionEvents();
        return false;
      };_this.

      _getScreenProps = function () {return _this.props.screenProps;};validateProps(props);_this._initialAction = _core.NavigationActions.init();if (_this._isStateful() && _reactNative.BackHandler && typeof _reactNative.BackHandler.addEventListener === 'function') {_this.subs = _reactNative.BackHandler.addEventListener('hardwareBackPress', function () {if (!_this._isMounted) {_this.subs && _this.subs.remove();} else {return _this.dispatch(_core.NavigationActions.back());}});}_this.state = { nav: _this._isStateful() && !props.loadNavigationState ? Component.router.getStateForAction(_this._initialAction) : null };return _this;}(0, _createClass2.default)(NavigationContainer, [{ key: "_renderLoading", value: function _renderLoading() {return this.props.renderLoadingExperimental ? this.props.renderLoadingExperimental() : null;} }, { key: "_isStateful", value: function _isStateful() {return isStateful(this.props);} }, { key: "_validateProps", value: function _validateProps(props) {if (this._isStateful()) {return;}var navigation = props.navigation,screenProps = props.screenProps,containerProps = (0, _objectWithoutProperties2.default)(props, ["navigation", "screenProps"]);var keys = Object.keys(containerProps);if (keys.length !== 0) {throw new Error('This navigator has both navigation and container props, so it is ' + ("unclear if it should own its own state. Remove props: \"" + keys.join(', ') + "\" ") + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');}} }, { key: "_onNavigationStateChange", value: function _onNavigationStateChange(prevNav, nav, action) {if (typeof this.props.onNavigationStateChange === 'undefined' && this._isStateful() && !!process.env.REACT_NAV_LOGGING) {if (console.group) {console.group('Navigation Dispatch: ');console.log('Action: ', action);console.log('New State: ', nav);console.log('Last State: ', prevNav);console.groupEnd();} else {console.log('Navigation Dispatch: ', { action: action, newState: nav, lastState: prevNav });}return;}if (typeof this.props.onNavigationStateChange === 'function') {this.props.onNavigationStateChange(prevNav, nav, action);}} }, { key: "componentDidUpdate", value: function componentDidUpdate() {if (this._navState === this.state.nav) {this._navState = null;}} }, { key: "componentDidMount", value: function componentDidMount() {var _this2 = this;var parsedUrl, userProvidedStartupState, _ref2, action, startupState, _parsedUrl, path, params, urlAction, dispatchActions;return _regenerator.default.async(function componentDidMount$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:this._isMounted = true;if (this._isStateful()) {_context2.next = 3;break;}return _context2.abrupt("return");case 3:if (__DEV__ && !this.props.detached) {if (_statefulContainerCount > 0) {if (_reactNative.Platform.OS === 'ios') {console.warn("You should only render one navigator explicitly in your app, and other navigators should be rendered by including them in that navigator. Full details at: " + (0, _docsUrl.default)('common-mistakes.html#explicitly-rendering-more-than-one-navigator'));}}}_statefulContainerCount++;_reactNative.Linking.addEventListener('url', this._handleOpenURL);parsedUrl = null;userProvidedStartupState = null;if (!(this.props.enableURLHandling !== false)) {_context2.next = 14;break;}_context2.next = 11;return _regenerator.default.awrap(this.getStartupParams());case 11:_ref2 = _context2.sent;parsedUrl = _ref2.parsedUrl;userProvidedStartupState = _ref2.userProvidedStartupState;case 14:action = this._initialAction;startupState = this.state.nav;if (!startupState && !userProvidedStartupState) {!!process.env.REACT_NAV_LOGGING && console.log('Init new Navigation State');startupState = Component.router.getStateForAction(action);}if (userProvidedStartupState) {startupState = userProvidedStartupState;_reactNavigationIsHydratingState = true;}if (parsedUrl) {_parsedUrl = parsedUrl, path = _parsedUrl.path, params = _parsedUrl.params;urlAction = Component.router.getActionForPathAndParams(path, params);if (urlAction) {!!process.env.REACT_NAV_LOGGING && console.log('Applying Navigation Action for Initial URL:', parsedUrl);action = urlAction;startupState = Component.router.getStateForAction(urlAction, startupState);}}dispatchActions = function dispatchActions() {return _this2._actionEventSubscribers.forEach(function (subscriber) {return subscriber({ type: 'action', action: action, state: _this2.state.nav, lastState: null });});};if (!(startupState === this.state.nav)) {_context2.next = 23;break;}dispatchActions();return _context2.abrupt("return");case 23:this.setState({ nav: startupState }, function () {_reactNavigationIsHydratingState = false;dispatchActions();});case 24:case "end":return _context2.stop();}}}, null, this);} }, { key: "getStartupParams", value: function getStartupParams() {var _this$props2, uriPrefix, loadNavigationState, url, loadedNavState, _ref3, _ref4;return _regenerator.default.async(function getStartupParams$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:_this$props2 = this.props, uriPrefix = _this$props2.uriPrefix, loadNavigationState = _this$props2.loadNavigationState;_context3.prev = 1;_context3.next = 4;return _regenerator.default.awrap(Promise.all([_reactNative.Linking.getInitialURL(), loadNavigationState && loadNavigationState()]));case 4:_ref3 = _context3.sent;_ref4 = (0, _slicedToArray2.default)(_ref3, 2);url = _ref4[0];loadedNavState = _ref4[1];_context3.next = 12;break;case 10:_context3.prev = 10;_context3.t0 = _context3["catch"](1);case 12:return _context3.abrupt("return", { parsedUrl: url && urlToPathAndParams(url, uriPrefix), userProvidedStartupState: loadedNavState });case 13:case "end":return _context3.stop();}}}, null, this, [[1, 10]]);} }, { key: "componentDidCatch", value: function componentDidCatch(e) {if (_reactNavigationIsHydratingState) {_reactNavigationIsHydratingState = false;console.warn('Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state...');this.dispatch(_core.NavigationActions.init());} else {throw e;}} }, { key: "componentWillUnmount", value: function componentWillUnmount() {this._isMounted = false;_reactNative.Linking.removeEventListener('url', this._handleOpenURL);this.subs && this.subs.remove();if (this._isStateful()) {_statefulContainerCount--;}} }, { key: "render", value: function render()

      {var _this3 = this;
        var navigation = this.props.navigation;
        if (this._isStateful()) {
          var navState = this.state.nav;
          if (!navState) {
            return this._renderLoading();
          }
          if (!this._navigation || this._navigation.state !== navState) {
            this._navigation = (0, _core.getNavigation)(Component.router, navState, this.dispatch, this._actionEventSubscribers, this._getScreenProps, function () {return _this3._navigation;});
          }
          navigation = this._navigation;
        }
        (0, _invariant.default)(navigation, 'failed to get navigation');
        return _react.default.createElement(_core.NavigationProvider, { value: navigation, __source: { fileName: _jsxFileName, lineNumber: 347 } },
        _react.default.createElement(Component, (0, _extends2.default)({}, this.props, { navigation: navigation, __source: { fileName: _jsxFileName, lineNumber: 348 } })));

      } }]);return NavigationContainer;}(_react.default.Component);NavigationContainer.router = Component.router;NavigationContainer.navigationOptions = null;


  return NavigationContainer;
}