ec8597b48aaee80a41a81b1412eab446
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactNative = require("react-native");

var _reactNavigation = require("react-navigation");

var _reactNavigationStack = require("react-navigation-stack");

var _lodash = _interopRequireDefault(require("lodash.clamp"));

var _TransitionItemsView = _interopRequireDefault(require("./TransitionItemsView"));

var _TransitionRouteView = _interopRequireDefault(require("./TransitionRouteView"));

var emptyFunction = function emptyFunction() {};

var ANIMATION_DURATION = 500;
var POSITION_THRESHOLD = 1 / 2;
var RESPOND_THRESHOLD = 20;
var GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 25;
var GESTURE_RESPONSE_DISTANCE_VERTICAL = 150;

var FluidTransitioner = function (_React$Component) {
  (0, _inherits2.default)(FluidTransitioner, _React$Component);

  function FluidTransitioner(_props) {
    var _this;

    (0, _classCallCheck2.default)(this, FluidTransitioner);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(FluidTransitioner).call(this, _props));
    _this._scenes = [];
    _this._gestureStartValue = 0;
    _this._isResponding = false;
    _this._immediateIndex = null;
    _this._panResponder = null;

    _this._transitionItemsViewOnLayout = function () {
      _this._layoutsReady = true;

      _this._checkScenesAndLayouts();
    };

    _this._onSceneReady = function (key) {
      if (!_this._scenesReadyResolveFunc) {
        return;
      }

      var sceneRenderInfo = _this._scenes.find(function (sri) {
        return sri.key === key;
      });

      if (sceneRenderInfo) sceneRenderInfo.isMounted = true;

      _this._checkScenesAndLayouts();
    };

    _this._onTransitionEnd = function (props, prevProps) {
      var onTransitionEnd = _this.props.onTransitionEnd;
      if (onTransitionEnd) return onTransitionEnd(props, prevProps);
      return null;
    };

    _this._onTransitionStart = function () {
      var onTransitionStart = _this.props.onTransitionStart;
      if (onTransitionStart) return onTransitionStart();

      if (_this._scenesReadyPromise) {
        return _this._scenesReadyPromise;
      }

      return null;
    };

    _this._configureTransition = function (props, prevProps) {
      var sceneTransitionConfig = {};

      if (props) {
        var moveForward = true;

        if (prevProps && prevProps.index > props.index) {
          moveForward = false;
        }

        var _ref = moveForward ? props : prevProps,
            scene = _ref.scene;

        var options = scene.descriptor.options;

        if (options && options.transitionConfig) {
          sceneTransitionConfig = options.transitionConfig;
        }
      }

      var transitionConfig = _this.props.transitionConfig;
      return (0, _objectSpread2.default)({
        timing: _reactNative.Animated.timing,
        duration: 650,
        easing: _reactNative.Easing.inOut(_reactNative.Easing.poly(4))
      }, transitionConfig, sceneTransitionConfig, {
        isInteraction: true,
        useNativeDriver: true
      });
    };

    _this.renderTransitionView = function (props, prevProps) {
      _this._layoutsReady = false;
      var position = props.position;
      var scene = props.scene,
          layout = props.layout;
      var navigation = scene.descriptor.navigation;

      _this._animatedSubscribeForNativeAnimation(props.position);

      _this._updateSceneArray(props.scenes);

      var toRoute = props.scene.route.key;
      var fromRoute = prevProps ? prevProps.scene.route.key : null;
      var index = props.scene.index;

      if (!fromRoute) {
        fromRoute = index > 0 ? props.scenes[index - 1].route.key : null;
      }

      if (prevProps && index < prevProps.index && fromRoute === prevProps.scene.route.key) {
        index = prevProps.index;
        var tmp = fromRoute;
        fromRoute = toRoute;
        toRoute = tmp;
      }

      var handlers = _this.getPanResponderHandlers(position, index, scene, layout, navigation, props);

      var scenes = props.scenes.map(function (scene) {
        return _this._renderScene((0, _objectSpread2.default)({}, props, {
          scene: scene
        }));
      });
      return _react.default.createElement(_TransitionItemsView.default, (0, _extends2.default)({}, handlers, {
        navigation: _this.props.navigation,
        style: _this.props.style,
        progress: props.position,
        fromRoute: fromRoute,
        toRoute: toRoute,
        index: index,
        onLayout: _this._transitionItemsViewOnLayout
      }), scenes);
    };

    _this._getSceneTransitionConfiguration = function (routeName, navigation) {
      var route = navigation.state;
      var descriptor = _this.props.descriptors;
      var props = {
        navigation: navigation,
        scene: {
          route: route,
          descriptor: descriptor
        }
      };
      return _this._configureTransition(props);
    };

    _this._scenesReadyPromise = new Promise(function (resolve) {
      return _this._scenesReadyResolveFunc = resolve;
    });
    return _this;
  }

  (0, _createClass2.default)(FluidTransitioner, [{
    key: "_animatedSubscribeForNativeAnimation",
    value: function _animatedSubscribeForNativeAnimation(animatedValue) {
      if (!animatedValue) return;
      if (!this._configureTransition().useNativeDriver) return;

      if (Object.keys(animatedValue._listeners).length === 0) {
        animatedValue.addListener(emptyFunction);
      }
    }
  }, {
    key: "getChildContext",
    value: function getChildContext() {
      var navigation = this.props.navigation;
      return {
        route: navigation.state.routes[navigation.state.index].key,
        onSceneReady: this._onSceneReady,
        getTransitionConfig: this._getSceneTransitionConfiguration
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          navigation = _this$props.navigation,
          descriptors = _this$props.descriptors;
      return _react.default.createElement(_reactNavigationStack.Transitioner, {
        configureTransition: this._configureTransition,
        render: this.renderTransitionView,
        navigation: navigation,
        descriptors: descriptors,
        onTransitionStart: this._onTransitionStart,
        onTransitionEnd: this._onTransitionEnd
      });
    }
  }, {
    key: "_checkScenesAndLayouts",
    value: function _checkScenesAndLayouts() {
      var _this2 = this;

      if (this._layoutsReady && !this._scenes.find(function (sri) {
        return !sri.isMounted;
      })) {
        if (this._scenesReadyResolveFunc) {
          this._scenesReadyResolveFunc();

          this._scenesReadyPromise = new Promise(function (resolve) {
            return _this2._scenesReadyResolveFunc = resolve;
          });
        }
      }
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return this.props !== nextProps;
    }
  }, {
    key: "_reset",
    value: function _reset(position, resetToIndex, duration) {
      _reactNative.Animated.timing(position, {
        toValue: resetToIndex,
        duration: duration,
        easing: _reactNative.Easing.EaseInOut,
        useNativeDriver: position.__isNative
      }).start();
    }
  }, {
    key: "_goBack",
    value: function _goBack(navigation, position, scenes, backFromIndex, duration) {
      var _this3 = this;

      var toValue = Math.max(backFromIndex - 1, 0);
      this._immediateIndex = toValue;

      _reactNative.Animated.timing(position, {
        toValue: toValue,
        duration: duration,
        easing: _reactNative.Easing.EaseInOut,
        useNativeDriver: position.__isNative
      }).start(function () {
        _this3._immediateIndex = null;
        var backFromScene = scenes.find(function (s) {
          return s.index === toValue + 1;
        });

        if (!_this3._isResponding && backFromScene) {
          navigation.dispatch(_reactNavigation.NavigationActions.back({
            key: backFromScene.route.key,
            immediate: true
          }));
        }
      });
    }
  }, {
    key: "getPanResponderHandlers",
    value: function getPanResponderHandlers(position, index, scene, layout, navigation, props) {
      var _this4 = this;

      var mode = this.props.mode;
      var isVertical = mode !== 'card';
      var options = scene.descriptor.options;
      var gestureDirectionInverted = options.gestureDirection === 'inverted';
      var gesturesEnabled = typeof options.gesturesEnabled === 'boolean' ? options.gesturesEnabled : _reactNative.Platform.OS === 'ios';

      if (this._panResponder) {
        var handle = this._panResponder.getInteractionHandle();

        if (handle) {
          _reactNative.InteractionManager.clearInteractionHandle(handle);
        }
      }

      this._panResponder = !gesturesEnabled ? null : _reactNative.PanResponder.create({
        onPanResponderTerminate: function onPanResponderTerminate() {
          _this4._isResponding = false;

          _this4._reset(position, index, 0);
        },
        onPanResponderGrant: function onPanResponderGrant() {
          position.stopAnimation(function (value) {
            _this4._isResponding = true;
            _this4._gestureStartValue = value;
          });
        },
        onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(event, gesture) {
          if (index !== scene.index) {
            return false;
          }

          var immediateIndex = _this4._immediateIndex == null ? index : _this4._immediateIndex;
          var currentDragDistance = gesture[isVertical ? 'dy' : 'dx'];
          var currentDragPosition = event.nativeEvent[isVertical ? 'pageY' : 'pageX'];
          var axisLength = isVertical ? layout.height.__getValue() : layout.width.__getValue();
          var axisHasBeenMeasured = !!axisLength;
          var screenEdgeDistance = gestureDirectionInverted ? axisLength - (currentDragPosition - currentDragDistance) : currentDragPosition - currentDragDistance;
          var _options$gestureRespo = options.gestureResponseDistance,
              userGestureResponseDistance = _options$gestureRespo === void 0 ? {} : _options$gestureRespo;
          var gestureResponseDistance = isVertical ? userGestureResponseDistance.vertical || GESTURE_RESPONSE_DISTANCE_VERTICAL : userGestureResponseDistance.horizontal || GESTURE_RESPONSE_DISTANCE_HORIZONTAL;

          if (screenEdgeDistance > gestureResponseDistance) {
            return false;
          }

          var hasDraggedEnough = Math.abs(currentDragDistance) > RESPOND_THRESHOLD;
          var isOnFirstCard = immediateIndex === 0;
          var shouldSetResponder = hasDraggedEnough && axisHasBeenMeasured && !isOnFirstCard;
          return shouldSetResponder;
        },
        onPanResponderMove: function onPanResponderMove(event, gesture) {
          var startValue = _this4._gestureStartValue;
          var axis = isVertical ? 'dy' : 'dx';
          var axisDistance = isVertical ? layout.height.__getValue() * 0.75 : layout.width.__getValue();
          var currentValue = (_reactNative.I18nManager.isRTL && axis === 'dx') !== gestureDirectionInverted ? startValue + gesture[axis] / axisDistance : startValue - gesture[axis] / axisDistance;
          var value = (0, _lodash.default)(index - 1, currentValue, index);
          position.setValue(value);
        },
        onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
          return false;
        },
        onPanResponderRelease: function onPanResponderRelease(event, gesture) {
          if (!_this4._isResponding) {
            return;
          }

          _this4._isResponding = false;
          var immediateIndex = _this4._immediateIndex == null ? index : _this4._immediateIndex;
          var axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();
          var movementDirection = gestureDirectionInverted ? -1 : 1;
          var movedDistance = movementDirection * gesture[isVertical ? 'dy' : 'dx'];
          var gestureVelocity = movementDirection * gesture[isVertical ? 'vy' : 'vx'];
          var defaultVelocity = axisDistance / ANIMATION_DURATION;
          var velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);
          var resetDuration = gestureDirectionInverted ? (axisDistance - movedDistance) / velocity : movedDistance / velocity;
          var goBackDuration = gestureDirectionInverted ? movedDistance / velocity : (axisDistance - movedDistance) / velocity;
          position.stopAnimation(function (value) {
            if (gestureVelocity < -0.5) {
              _this4._reset(position, immediateIndex, resetDuration);

              return;
            }

            if (gestureVelocity > 0.5) {
              _this4._goBack(navigation, position, props.scenes, immediateIndex, goBackDuration);

              return;
            }

            if (value <= index - POSITION_THRESHOLD) {
              _this4._goBack(navigation, position, props.scenes, immediateIndex, goBackDuration);
            } else {
              _this4._reset(position, immediateIndex, resetDuration);
            }
          });
        }
      });
      var handlers = gesturesEnabled ? this._panResponder.panHandlers : {};
      return handlers;
    }
  }, {
    key: "_renderScene",
    value: function _renderScene(transitionProps) {
      var scene = transitionProps.scene,
          position = transitionProps.position;
      var index = scene.index;
      var navigation = scene.descriptor.navigation;
      var screenProps = this.props.screenProps;
      return _react.default.createElement(_TransitionRouteView.default, {
        style: [styles.scene, this.getOpacityStyle(transitionProps.position, index)],
        key: transitionProps.scene.route.key,
        route: scene.route.key,
        isActive: scene.isActive,
        position: position,
        index: index,
        sceneKey: scene.key
      }, _react.default.createElement(_reactNavigation.SceneView, {
        navigation: navigation,
        screenProps: screenProps,
        component: scene.descriptor.getComponent()
      }));
    }
  }, {
    key: "getOpacityStyle",
    value: function getOpacityStyle(position, index) {
      return {
        opacity: position.interpolate({
          inputRange: [index - 1, index - 0.25, index, index + 0.25, index + 1],
          outputRange: [0, 1, 1, 1, 0]
        })
      };
    }
  }, {
    key: "_updateSceneArray",
    value: function _updateSceneArray(scenes) {
      var _this5 = this;

      scenes.forEach(function (scene) {
        if (!_this5._scenes.find(function (sri) {
          return sri.key === scene.key;
        })) {
          _this5._scenes = [].concat((0, _toConsumableArray2.default)(_this5._scenes), [{
            key: scene.key,
            isMounted: false
          }]);
        }
      });
      var toDelete = [];

      this._scenes.forEach(function (sri) {
        if (!scenes.find(function (scene) {
          return scene.key === sri.key;
        })) {
          toDelete.push(sri);
        }
      });

      toDelete.forEach(function (sri) {
        var index = _this5._scenes.indexOf(sri);

        _this5._scenes = [].concat((0, _toConsumableArray2.default)(_this5._scenes.slice(0, index)), (0, _toConsumableArray2.default)(_this5._scenes.slice(index + 1)));
      });
    }
  }]);
  return FluidTransitioner;
}(_react.default.Component);

FluidTransitioner.childContextTypes = {
  route: _propTypes.default.string,
  getTransitionConfig: _propTypes.default.func,
  onSceneReady: _propTypes.default.func
};

var styles = _reactNative.StyleSheet.create({
  container: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  },
  scene: {
    position: 'absolute',
    backgroundColor: 'transparent',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  },
  sceneContent: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  }
});

var _default = FluidTransitioner;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZsdWlkVHJhbnNpdGlvbmVyLmpzIl0sIm5hbWVzIjpbImVtcHR5RnVuY3Rpb24iLCJBTklNQVRJT05fRFVSQVRJT04iLCJQT1NJVElPTl9USFJFU0hPTEQiLCJSRVNQT05EX1RIUkVTSE9MRCIsIkdFU1RVUkVfUkVTUE9OU0VfRElTVEFOQ0VfSE9SSVpPTlRBTCIsIkdFU1RVUkVfUkVTUE9OU0VfRElTVEFOQ0VfVkVSVElDQUwiLCJGbHVpZFRyYW5zaXRpb25lciIsInByb3BzIiwiX3NjZW5lcyIsIl9nZXN0dXJlU3RhcnRWYWx1ZSIsIl9pc1Jlc3BvbmRpbmciLCJfaW1tZWRpYXRlSW5kZXgiLCJfcGFuUmVzcG9uZGVyIiwiX3RyYW5zaXRpb25JdGVtc1ZpZXdPbkxheW91dCIsIl9sYXlvdXRzUmVhZHkiLCJfY2hlY2tTY2VuZXNBbmRMYXlvdXRzIiwiX29uU2NlbmVSZWFkeSIsImtleSIsIl9zY2VuZXNSZWFkeVJlc29sdmVGdW5jIiwic2NlbmVSZW5kZXJJbmZvIiwiZmluZCIsInNyaSIsImlzTW91bnRlZCIsIl9vblRyYW5zaXRpb25FbmQiLCJwcmV2UHJvcHMiLCJvblRyYW5zaXRpb25FbmQiLCJfb25UcmFuc2l0aW9uU3RhcnQiLCJvblRyYW5zaXRpb25TdGFydCIsIl9zY2VuZXNSZWFkeVByb21pc2UiLCJfY29uZmlndXJlVHJhbnNpdGlvbiIsInNjZW5lVHJhbnNpdGlvbkNvbmZpZyIsIm1vdmVGb3J3YXJkIiwiaW5kZXgiLCJzY2VuZSIsIm9wdGlvbnMiLCJkZXNjcmlwdG9yIiwidHJhbnNpdGlvbkNvbmZpZyIsInRpbWluZyIsIkFuaW1hdGVkIiwiZHVyYXRpb24iLCJlYXNpbmciLCJFYXNpbmciLCJpbk91dCIsInBvbHkiLCJpc0ludGVyYWN0aW9uIiwidXNlTmF0aXZlRHJpdmVyIiwicmVuZGVyVHJhbnNpdGlvblZpZXciLCJwb3NpdGlvbiIsImxheW91dCIsIm5hdmlnYXRpb24iLCJfYW5pbWF0ZWRTdWJzY3JpYmVGb3JOYXRpdmVBbmltYXRpb24iLCJfdXBkYXRlU2NlbmVBcnJheSIsInNjZW5lcyIsInRvUm91dGUiLCJyb3V0ZSIsImZyb21Sb3V0ZSIsInRtcCIsImhhbmRsZXJzIiwiZ2V0UGFuUmVzcG9uZGVySGFuZGxlcnMiLCJtYXAiLCJfcmVuZGVyU2NlbmUiLCJzdHlsZSIsIl9nZXRTY2VuZVRyYW5zaXRpb25Db25maWd1cmF0aW9uIiwicm91dGVOYW1lIiwic3RhdGUiLCJkZXNjcmlwdG9ycyIsIlByb21pc2UiLCJyZXNvbHZlIiwiYW5pbWF0ZWRWYWx1ZSIsIk9iamVjdCIsImtleXMiLCJfbGlzdGVuZXJzIiwibGVuZ3RoIiwiYWRkTGlzdGVuZXIiLCJyb3V0ZXMiLCJvblNjZW5lUmVhZHkiLCJnZXRUcmFuc2l0aW9uQ29uZmlnIiwibmV4dFByb3BzIiwicmVzZXRUb0luZGV4IiwidG9WYWx1ZSIsIkVhc2VJbk91dCIsIl9faXNOYXRpdmUiLCJzdGFydCIsImJhY2tGcm9tSW5kZXgiLCJNYXRoIiwibWF4IiwiYmFja0Zyb21TY2VuZSIsInMiLCJkaXNwYXRjaCIsIk5hdmlnYXRpb25BY3Rpb25zIiwiYmFjayIsImltbWVkaWF0ZSIsIm1vZGUiLCJpc1ZlcnRpY2FsIiwiZ2VzdHVyZURpcmVjdGlvbkludmVydGVkIiwiZ2VzdHVyZURpcmVjdGlvbiIsImdlc3R1cmVzRW5hYmxlZCIsIlBsYXRmb3JtIiwiT1MiLCJoYW5kbGUiLCJnZXRJbnRlcmFjdGlvbkhhbmRsZSIsIkludGVyYWN0aW9uTWFuYWdlciIsImNsZWFySW50ZXJhY3Rpb25IYW5kbGUiLCJQYW5SZXNwb25kZXIiLCJjcmVhdGUiLCJvblBhblJlc3BvbmRlclRlcm1pbmF0ZSIsIl9yZXNldCIsIm9uUGFuUmVzcG9uZGVyR3JhbnQiLCJzdG9wQW5pbWF0aW9uIiwidmFsdWUiLCJvbk1vdmVTaG91bGRTZXRQYW5SZXNwb25kZXIiLCJldmVudCIsImdlc3R1cmUiLCJpbW1lZGlhdGVJbmRleCIsImN1cnJlbnREcmFnRGlzdGFuY2UiLCJjdXJyZW50RHJhZ1Bvc2l0aW9uIiwibmF0aXZlRXZlbnQiLCJheGlzTGVuZ3RoIiwiaGVpZ2h0IiwiX19nZXRWYWx1ZSIsIndpZHRoIiwiYXhpc0hhc0JlZW5NZWFzdXJlZCIsInNjcmVlbkVkZ2VEaXN0YW5jZSIsImdlc3R1cmVSZXNwb25zZURpc3RhbmNlIiwidXNlckdlc3R1cmVSZXNwb25zZURpc3RhbmNlIiwidmVydGljYWwiLCJob3Jpem9udGFsIiwiaGFzRHJhZ2dlZEVub3VnaCIsImFicyIsImlzT25GaXJzdENhcmQiLCJzaG91bGRTZXRSZXNwb25kZXIiLCJvblBhblJlc3BvbmRlck1vdmUiLCJzdGFydFZhbHVlIiwiYXhpcyIsImF4aXNEaXN0YW5jZSIsImN1cnJlbnRWYWx1ZSIsIkkxOG5NYW5hZ2VyIiwiaXNSVEwiLCJzZXRWYWx1ZSIsIm9uUGFuUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0Iiwib25QYW5SZXNwb25kZXJSZWxlYXNlIiwibW92ZW1lbnREaXJlY3Rpb24iLCJtb3ZlZERpc3RhbmNlIiwiZ2VzdHVyZVZlbG9jaXR5IiwiZGVmYXVsdFZlbG9jaXR5IiwidmVsb2NpdHkiLCJyZXNldER1cmF0aW9uIiwiZ29CYWNrRHVyYXRpb24iLCJfZ29CYWNrIiwicGFuSGFuZGxlcnMiLCJ0cmFuc2l0aW9uUHJvcHMiLCJzY3JlZW5Qcm9wcyIsInN0eWxlcyIsImdldE9wYWNpdHlTdHlsZSIsImlzQWN0aXZlIiwiZ2V0Q29tcG9uZW50Iiwib3BhY2l0eSIsImludGVycG9sYXRlIiwiaW5wdXRSYW5nZSIsIm91dHB1dFJhbmdlIiwiZm9yRWFjaCIsInRvRGVsZXRlIiwicHVzaCIsImluZGV4T2YiLCJzbGljZSIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY2hpbGRDb250ZXh0VHlwZXMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJmdW5jIiwiU3R5bGVTaGVldCIsImNvbnRhaW5lciIsInRvcCIsImxlZnQiLCJyaWdodCIsImJvdHRvbSIsImJhY2tncm91bmRDb2xvciIsInNjZW5lQ29udGVudCJdLCJtYXBwaW5ncyI6Ijs7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LE1BRFE7QUFFekI3RixFQUFBQSxtQkFBbUIsRUFBRTRGLG1CQUFVRSxJQUZOO0FBR3pCL0YsRUFBQUEsWUFBWSxFQUFFNkYsbUJBQVVFO0FBSEMsQzs7QUFvWDdCLElBQU1sQixNQUFNLEdBQUdtQix3QkFBV25FLE1BQVgsQ0FBa0I7QUFDL0JvRSxFQUFBQSxTQUFTLEVBQUU7QUFDVDdILElBQUFBLFFBQVEsRUFBRSxVQUREO0FBRVQ4SCxJQUFBQSxHQUFHLEVBQUUsQ0FGSTtBQUdUQyxJQUFBQSxJQUFJLEVBQUUsQ0FIRztBQUlUQyxJQUFBQSxLQUFLLEVBQUUsQ0FKRTtBQUtUQyxJQUFBQSxNQUFNLEVBQUU7QUFMQyxHQURvQjtBQVEvQi9JLEVBQUFBLEtBQUssRUFBRTtBQUNMYyxJQUFBQSxRQUFRLEVBQUUsVUFETDtBQUVMa0ksSUFBQUEsZUFBZSxFQUFFLGFBRlo7QUFHTEosSUFBQUEsR0FBRyxFQUFFLENBSEE7QUFJTEMsSUFBQUEsSUFBSSxFQUFFLENBSkQ7QUFLTEMsSUFBQUEsS0FBSyxFQUFFLENBTEY7QUFNTEMsSUFBQUEsTUFBTSxFQUFFO0FBTkgsR0FSd0I7QUFnQi9CRSxFQUFBQSxZQUFZLEVBQUU7QUFDWm5JLElBQUFBLFFBQVEsRUFBRSxVQURFO0FBRVo4SCxJQUFBQSxHQUFHLEVBQUUsQ0FGTztBQUdaQyxJQUFBQSxJQUFJLEVBQUUsQ0FITTtBQUlaQyxJQUFBQSxLQUFLLEVBQUUsQ0FKSztBQUtaQyxJQUFBQSxNQUFNLEVBQUU7QUFMSTtBQWhCaUIsQ0FBbEIsQ0FBZjs7ZUF5QmUxSyxpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgU3R5bGVTaGVldCwgUGxhdGZvcm0sIEVhc2luZywgSTE4bk1hbmFnZXIsIEFuaW1hdGVkLCBQYW5SZXNwb25kZXIsIEludGVyYWN0aW9uTWFuYWdlciB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uQWN0aW9ucywgU2NlbmVWaWV3IH0gZnJvbSAncmVhY3QtbmF2aWdhdGlvbic7XG5pbXBvcnQgeyBUcmFuc2l0aW9uZXIgfSBmcm9tICdyZWFjdC1uYXZpZ2F0aW9uLXN0YWNrJztcbmltcG9ydCBjbGFtcCBmcm9tICdsb2Rhc2guY2xhbXAnO1xuXG5pbXBvcnQgVHJhbnNpdGlvbkl0ZW1zVmlldyBmcm9tICcuL1RyYW5zaXRpb25JdGVtc1ZpZXcnO1xuaW1wb3J0IFRyYW5zaXRpb25Sb3V0ZVZpZXcgZnJvbSAnLi9UcmFuc2l0aW9uUm91dGVWaWV3JztcblxuY29uc3QgZW1wdHlGdW5jdGlvbiA9ICgpID0+IHt9O1xuXG5jb25zdCBBTklNQVRJT05fRFVSQVRJT04gPSA1MDA7XG5jb25zdCBQT1NJVElPTl9USFJFU0hPTEQgPSAxIC8gMjtcbmNvbnN0IFJFU1BPTkRfVEhSRVNIT0xEID0gMjA7XG5jb25zdCBHRVNUVVJFX1JFU1BPTlNFX0RJU1RBTkNFX0hPUklaT05UQUwgPSAyNTtcbmNvbnN0IEdFU1RVUkVfUkVTUE9OU0VfRElTVEFOQ0VfVkVSVElDQUwgPSAxNTA7XG5cbnR5cGUgU2NlbmVSZW5kZXJlZEluZm8gPSB7XG4gIGtleTogc3RyaW5nLFxuICBpc01vdW50ZWQ6IGJvb2xlYW4sXG59O1xuXG5jbGFzcyBGbHVpZFRyYW5zaXRpb25lciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDwqPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5fc2NlbmVzUmVhZHlQcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB0aGlzLl9zY2VuZXNSZWFkeVJlc29sdmVGdW5jID0gcmVzb2x2ZSk7XG4gIH1cblxuICBfc2NlbmVzOiBBcnJheTxTY2VuZVJlbmRlcmVkSW5mbz4gPSBbXTtcblxuICBfc2NlbmVzUmVhZHlSZXNvbHZlRnVuYzogP0Z1bmN0aW9uO1xuXG4gIF9zY2VuZXNSZWFkeVByb21pc2U6ID9Qcm9taXNlPHZvaWQ+O1xuXG4gIF9sYXlvdXRzUmVhZHk6IGJvb2xlYW47XG5cbiAgX2dlc3R1cmVTdGFydFZhbHVlID0gMDtcblxuICBfaXNSZXNwb25kaW5nID0gZmFsc2U7XG5cbiAgX2ltbWVkaWF0ZUluZGV4ID0gbnVsbDtcblxuICBfcGFuUmVzcG9uZGVyID0gbnVsbDtcblxuICBzdGF0aWMgY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gICAgcm91dGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZ2V0VHJhbnNpdGlvbkNvbmZpZzogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25TY2VuZVJlYWR5OiBQcm9wVHlwZXMuZnVuYyxcbiAgfVxuXG4gIF9hbmltYXRlZFN1YnNjcmliZUZvck5hdGl2ZUFuaW1hdGlvbihhbmltYXRlZFZhbHVlOiBBbmltYXRlZC5WYWx1ZSkge1xuICAgIGlmICghYW5pbWF0ZWRWYWx1ZSkgcmV0dXJuO1xuICAgIGlmICghdGhpcy5fY29uZmlndXJlVHJhbnNpdGlvbigpLnVzZU5hdGl2ZURyaXZlcikgcmV0dXJuO1xuICAgIGlmIChPYmplY3Qua2V5cyhhbmltYXRlZFZhbHVlLl9saXN0ZW5lcnMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgYW5pbWF0ZWRWYWx1ZS5hZGRMaXN0ZW5lcihlbXB0eUZ1bmN0aW9uKTtcbiAgICB9XG4gIH1cblxuICBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgY29uc3QgeyBuYXZpZ2F0aW9uIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZTogbmF2aWdhdGlvbi5zdGF0ZS5yb3V0ZXNbbmF2aWdhdGlvbi5zdGF0ZS5pbmRleF0ua2V5LFxuICAgICAgb25TY2VuZVJlYWR5OiB0aGlzLl9vblNjZW5lUmVhZHksXG4gICAgICBnZXRUcmFuc2l0aW9uQ29uZmlnOiB0aGlzLl9nZXRTY2VuZVRyYW5zaXRpb25Db25maWd1cmF0aW9uLFxuICAgIH07XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBuYXZpZ2F0aW9uLCBkZXNjcmlwdG9ycyB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPFRyYW5zaXRpb25lclxuICAgICAgICBjb25maWd1cmVUcmFuc2l0aW9uPXt0aGlzLl9jb25maWd1cmVUcmFuc2l0aW9ufVxuICAgICAgICByZW5kZXI9e3RoaXMucmVuZGVyVHJhbnNpdGlvblZpZXd9XG4gICAgICAgIG5hdmlnYXRpb249e25hdmlnYXRpb259XG4gICAgICAgIGRlc2NyaXB0b3JzPXtkZXNjcmlwdG9yc31cbiAgICAgICAgb25UcmFuc2l0aW9uU3RhcnQ9e3RoaXMuX29uVHJhbnNpdGlvblN0YXJ0fVxuICAgICAgICBvblRyYW5zaXRpb25FbmQ9e3RoaXMuX29uVHJhbnNpdGlvbkVuZH1cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxuXG4gIF90cmFuc2l0aW9uSXRlbXNWaWV3T25MYXlvdXQgPSAoKSA9PiB7XG4gICAgdGhpcy5fbGF5b3V0c1JlYWR5ID0gdHJ1ZTtcbiAgICB0aGlzLl9jaGVja1NjZW5lc0FuZExheW91dHMoKTtcbiAgfVxuXG4gIF9vblNjZW5lUmVhZHkgPSAoa2V5OiBzdHJpbmcpID0+IHtcbiAgICBpZiAoIXRoaXMuX3NjZW5lc1JlYWR5UmVzb2x2ZUZ1bmMpIHsgcmV0dXJuOyB9XG4gICAgLy8gY2hlY2sgaWYgdGhpcyBpcyBhIHNjZW5lIHdlIGFyZSB3YWl0aW5nIGZvclxuICAgIGNvbnN0IHNjZW5lUmVuZGVySW5mbyA9IHRoaXMuX3NjZW5lcy5maW5kKHNyaSA9PiBzcmkua2V5ID09PSBrZXkpO1xuICAgIGlmIChzY2VuZVJlbmRlckluZm8pIHNjZW5lUmVuZGVySW5mby5pc01vdW50ZWQgPSB0cnVlO1xuICAgIHRoaXMuX2NoZWNrU2NlbmVzQW5kTGF5b3V0cygpO1xuICB9XG5cbiAgX2NoZWNrU2NlbmVzQW5kTGF5b3V0cygpIHtcbiAgICBpZiAodGhpcy5fbGF5b3V0c1JlYWR5ICYmICF0aGlzLl9zY2VuZXMuZmluZChzcmkgPT4gIXNyaS5pc01vdW50ZWQpKSB7XG4gICAgICBpZiAodGhpcy5fc2NlbmVzUmVhZHlSZXNvbHZlRnVuYykge1xuICAgICAgICB0aGlzLl9zY2VuZXNSZWFkeVJlc29sdmVGdW5jKCk7XG5cbiAgICAgICAgdGhpcy5fc2NlbmVzUmVhZHlQcm9taXNlID0gbmV3IFByb21pc2UoXG4gICAgICAgICAgcmVzb2x2ZSA9PiB0aGlzLl9zY2VuZXNSZWFkeVJlc29sdmVGdW5jID0gcmVzb2x2ZSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfb25UcmFuc2l0aW9uRW5kID0gKHByb3BzOiBhbnksIHByZXZQcm9wczogYW55KTogUHJvbWlzZTx2b2lkPiB8IHZvaWQgPT4ge1xuICAgIGNvbnN0IHsgb25UcmFuc2l0aW9uRW5kIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChvblRyYW5zaXRpb25FbmQpIHJldHVybiBvblRyYW5zaXRpb25FbmQocHJvcHMsIHByZXZQcm9wcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBfb25UcmFuc2l0aW9uU3RhcnQgPSAoKTogUHJvbWlzZTx2b2lkPiB8IHZvaWQgPT4ge1xuICAgIGNvbnN0IHsgb25UcmFuc2l0aW9uU3RhcnQgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKG9uVHJhbnNpdGlvblN0YXJ0KSByZXR1cm4gb25UcmFuc2l0aW9uU3RhcnQoKTtcblxuICAgIGlmICh0aGlzLl9zY2VuZXNSZWFkeVByb21pc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zY2VuZXNSZWFkeVByb21pc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMgIT09IG5leHRQcm9wcztcbiAgfVxuXG4gIF9jb25maWd1cmVUcmFuc2l0aW9uID0gKHByb3BzLCBwcmV2UHJvcHMpID0+IHtcbiAgICBsZXQgc2NlbmVUcmFuc2l0aW9uQ29uZmlnID0ge307XG4gICAgaWYgKHByb3BzKSB7XG4gICAgICBsZXQgbW92ZUZvcndhcmQgPSB0cnVlO1xuICAgICAgaWYgKHByZXZQcm9wcyAmJiBwcmV2UHJvcHMuaW5kZXggPiBwcm9wcy5pbmRleCkge1xuICAgICAgICBtb3ZlRm9yd2FyZCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3QgeyBzY2VuZSB9ID0gbW92ZUZvcndhcmQgPyBwcm9wcyA6IHByZXZQcm9wcztcbiAgICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gc2NlbmUuZGVzY3JpcHRvcjtcbiAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMudHJhbnNpdGlvbkNvbmZpZykge1xuICAgICAgICBzY2VuZVRyYW5zaXRpb25Db25maWcgPSBvcHRpb25zLnRyYW5zaXRpb25Db25maWc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgeyB0cmFuc2l0aW9uQ29uZmlnIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiB7XG4gICAgICB0aW1pbmc6IEFuaW1hdGVkLnRpbWluZyxcbiAgICAgIGR1cmF0aW9uOiA2NTAsXG4gICAgICBlYXNpbmc6IEVhc2luZy5pbk91dChFYXNpbmcucG9seSg0KSksXG4gICAgICAuLi50cmFuc2l0aW9uQ29uZmlnLFxuICAgICAgLi4uc2NlbmVUcmFuc2l0aW9uQ29uZmlnLFxuICAgICAgaXNJbnRlcmFjdGlvbjogdHJ1ZSxcbiAgICAgIHVzZU5hdGl2ZURyaXZlcjogdHJ1ZSxcbiAgICB9O1xuICB9XG5cbiAgX3Jlc2V0KHBvc2l0aW9uLCByZXNldFRvSW5kZXgsIGR1cmF0aW9uKSB7XG4gICAgQW5pbWF0ZWQudGltaW5nKHBvc2l0aW9uLCB7XG4gICAgICB0b1ZhbHVlOiByZXNldFRvSW5kZXgsXG4gICAgICBkdXJhdGlvbixcbiAgICAgIGVhc2luZzogRWFzaW5nLkVhc2VJbk91dCxcbiAgICAgIHVzZU5hdGl2ZURyaXZlcjogcG9zaXRpb24uX19pc05hdGl2ZSxcbiAgICB9KS5zdGFydCgpO1xuICB9XG5cbiAgX2dvQmFjayhuYXZpZ2F0aW9uLCBwb3NpdGlvbiwgc2NlbmVzLCBiYWNrRnJvbUluZGV4LCBkdXJhdGlvbikge1xuICAgIGNvbnN0IHRvVmFsdWUgPSBNYXRoLm1heChiYWNrRnJvbUluZGV4IC0gMSwgMCk7XG5cbiAgICAvLyBzZXQgdGVtcG9yYXJ5IGluZGV4IGZvciBnZXN0dXJlIGhhbmRsZXIgdG8gcmVzcGVjdCB1bnRpbCB0aGUgYWN0aW9uIGlzXG4gICAgLy8gZGlzcGF0Y2hlZCBhdCB0aGUgZW5kIG9mIHRoZSB0cmFuc2l0aW9uLlxuICAgIHRoaXMuX2ltbWVkaWF0ZUluZGV4ID0gdG9WYWx1ZTtcblxuICAgIEFuaW1hdGVkLnRpbWluZyhwb3NpdGlvbiwge1xuICAgICAgdG9WYWx1ZSxcbiAgICAgIGR1cmF0aW9uLFxuICAgICAgZWFzaW5nOiBFYXNpbmcuRWFzZUluT3V0LFxuICAgICAgdXNlTmF0aXZlRHJpdmVyOiBwb3NpdGlvbi5fX2lzTmF0aXZlLFxuICAgIH0pLnN0YXJ0KCgpID0+IHtcbiAgICAgIHRoaXMuX2ltbWVkaWF0ZUluZGV4ID0gbnVsbDtcbiAgICAgIGNvbnN0IGJhY2tGcm9tU2NlbmUgPSBzY2VuZXMuZmluZChzID0+IHMuaW5kZXggPT09IHRvVmFsdWUgKyAxKTtcbiAgICAgIGlmICghdGhpcy5faXNSZXNwb25kaW5nICYmIGJhY2tGcm9tU2NlbmUpIHtcbiAgICAgICAgbmF2aWdhdGlvbi5kaXNwYXRjaChOYXZpZ2F0aW9uQWN0aW9ucy5iYWNrKHtcbiAgICAgICAgICBrZXk6IGJhY2tGcm9tU2NlbmUucm91dGUua2V5LFxuICAgICAgICAgIGltbWVkaWF0ZTogdHJ1ZSxcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyVHJhbnNpdGlvblZpZXcgPSAocHJvcHMsIHByZXZQcm9wcykgPT4ge1xuICAgIHRoaXMuX2xheW91dHNSZWFkeSA9IGZhbHNlO1xuXG4gICAgY29uc3QgeyBwb3NpdGlvbiB9ID0gcHJvcHM7XG4gICAgY29uc3QgeyBzY2VuZSwgbGF5b3V0IH0gPSBwcm9wcztcbiAgICBjb25zdCB7IG5hdmlnYXRpb24gfSA9IHNjZW5lLmRlc2NyaXB0b3I7XG5cbiAgICB0aGlzLl9hbmltYXRlZFN1YnNjcmliZUZvck5hdGl2ZUFuaW1hdGlvbihwcm9wcy5wb3NpdGlvbik7XG4gICAgdGhpcy5fdXBkYXRlU2NlbmVBcnJheShwcm9wcy5zY2VuZXMpO1xuXG4gICAgbGV0IHRvUm91dGUgPSBwcm9wcy5zY2VuZS5yb3V0ZS5rZXk7XG4gICAgbGV0IGZyb21Sb3V0ZSA9IHByZXZQcm9wcyA/IHByZXZQcm9wcy5zY2VuZS5yb3V0ZS5rZXkgOiBudWxsO1xuICAgIGxldCB7IGluZGV4IH0gPSBwcm9wcy5zY2VuZTtcblxuICAgIGlmICghZnJvbVJvdXRlKSB7XG4gICAgICBmcm9tUm91dGUgPSBpbmRleCA+IDAgPyBwcm9wcy5zY2VuZXNbaW5kZXggLSAxXS5yb3V0ZS5rZXkgOiBudWxsO1xuICAgIH1cblxuICAgIC8vIElmIHdlIGFyZSBqdXN0IHJldHVybmluZyB0byB0aGUgcHJldmlvdXMgcGFnZSBrZWVwIHRoZSBzYW1lIHByb3BzXG4gICAgaWYgKHByZXZQcm9wcyAmJiBpbmRleCA8IHByZXZQcm9wcy5pbmRleCAmJiBmcm9tUm91dGUgPT09IHByZXZQcm9wcy5zY2VuZS5yb3V0ZS5rZXkpIHtcbiAgICAgIGluZGV4ID0gcHJldlByb3BzLmluZGV4O1xuICAgICAgY29uc3QgdG1wID0gZnJvbVJvdXRlO1xuICAgICAgZnJvbVJvdXRlID0gdG9Sb3V0ZTtcbiAgICAgIHRvUm91dGUgPSB0bXA7XG4gICAgfVxuXG4gICAgY29uc3QgaGFuZGxlcnMgPSB0aGlzLmdldFBhblJlc3BvbmRlckhhbmRsZXJzKFxuICAgICAgcG9zaXRpb24sIGluZGV4LFxuICAgICAgc2NlbmUsIGxheW91dCwgbmF2aWdhdGlvbiwgcHJvcHMsXG4gICAgKTtcblxuICAgIGNvbnN0IHNjZW5lcyA9IHByb3BzLnNjZW5lcy5tYXAoc2NlbmUgPT4gdGhpcy5fcmVuZGVyU2NlbmUoeyAuLi5wcm9wcywgc2NlbmUgfSkpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxUcmFuc2l0aW9uSXRlbXNWaWV3XG4gICAgICAgIHsuLi5oYW5kbGVyc31cbiAgICAgICAgbmF2aWdhdGlvbj17dGhpcy5wcm9wcy5uYXZpZ2F0aW9ufVxuICAgICAgICBzdHlsZT17dGhpcy5wcm9wcy5zdHlsZX1cbiAgICAgICAgcHJvZ3Jlc3M9e3Byb3BzLnBvc2l0aW9ufVxuICAgICAgICBmcm9tUm91dGU9e2Zyb21Sb3V0ZX1cbiAgICAgICAgdG9Sb3V0ZT17dG9Sb3V0ZX1cbiAgICAgICAgaW5kZXg9e2luZGV4fVxuICAgICAgICBvbkxheW91dD17dGhpcy5fdHJhbnNpdGlvbkl0ZW1zVmlld09uTGF5b3V0fVxuICAgICAgPlxuICAgICAgICB7c2NlbmVzfVxuICAgICAgPC9UcmFuc2l0aW9uSXRlbXNWaWV3PlxuICAgICk7XG4gIH1cblxuICBnZXRQYW5SZXNwb25kZXJIYW5kbGVycyhwb3NpdGlvbiwgaW5kZXgsIHNjZW5lLCBsYXlvdXQsIG5hdmlnYXRpb24sIHByb3BzKSB7XG4gICAgY29uc3QgeyBtb2RlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGlzVmVydGljYWwgPSBtb2RlICE9PSAnY2FyZCc7XG4gICAgY29uc3QgeyBvcHRpb25zIH0gPSBzY2VuZS5kZXNjcmlwdG9yO1xuICAgIGNvbnN0IGdlc3R1cmVEaXJlY3Rpb25JbnZlcnRlZCA9IG9wdGlvbnMuZ2VzdHVyZURpcmVjdGlvbiA9PT0gJ2ludmVydGVkJztcbiAgICBjb25zdCBnZXN0dXJlc0VuYWJsZWQgPSB0eXBlb2Ygb3B0aW9ucy5nZXN0dXJlc0VuYWJsZWQgPT09ICdib29sZWFuJ1xuICAgICAgPyBvcHRpb25zLmdlc3R1cmVzRW5hYmxlZFxuICAgICAgOiBQbGF0Zm9ybS5PUyA9PT0gJ2lvcyc7XG5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL2lzc3Vlcy84NjI0XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdmlnYXRpb24vcmVhY3QtbmF2aWdhdGlvbi9pc3N1ZXMvNDE0NFxuICAgIGlmICh0aGlzLl9wYW5SZXNwb25kZXIpIHtcbiAgICAgIGNvbnN0IGhhbmRsZSA9IHRoaXMuX3BhblJlc3BvbmRlci5nZXRJbnRlcmFjdGlvbkhhbmRsZSgpO1xuICAgICAgaWYgKGhhbmRsZSkgeyBJbnRlcmFjdGlvbk1hbmFnZXIuY2xlYXJJbnRlcmFjdGlvbkhhbmRsZShoYW5kbGUpOyB9XG4gICAgfVxuICAgIHRoaXMuX3BhblJlc3BvbmRlciA9ICFnZXN0dXJlc0VuYWJsZWRcblxuICAgICAgPyBudWxsXG4gICAgICA6IFBhblJlc3BvbmRlci5jcmVhdGUoe1xuICAgICAgICBvblBhblJlc3BvbmRlclRlcm1pbmF0ZTogKCkgPT4ge1xuICAgICAgICAgIHRoaXMuX2lzUmVzcG9uZGluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuX3Jlc2V0KHBvc2l0aW9uLCBpbmRleCwgMCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uUGFuUmVzcG9uZGVyR3JhbnQ6ICgpID0+IHtcbiAgICAgICAgICBwb3NpdGlvbi5zdG9wQW5pbWF0aW9uKHZhbHVlID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2lzUmVzcG9uZGluZyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9nZXN0dXJlU3RhcnRWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBvbk1vdmVTaG91bGRTZXRQYW5SZXNwb25kZXI6IChldmVudCwgZ2VzdHVyZSkgPT4ge1xuICAgICAgICAgIGlmIChpbmRleCAhPT0gc2NlbmUuaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgaW1tZWRpYXRlSW5kZXggPSB0aGlzLl9pbW1lZGlhdGVJbmRleCA9PSBudWxsID8gaW5kZXggOiB0aGlzLl9pbW1lZGlhdGVJbmRleDtcbiAgICAgICAgICBjb25zdCBjdXJyZW50RHJhZ0Rpc3RhbmNlID0gZ2VzdHVyZVtpc1ZlcnRpY2FsID8gJ2R5JyA6ICdkeCddO1xuICAgICAgICAgIGNvbnN0IGN1cnJlbnREcmFnUG9zaXRpb24gPSBldmVudC5uYXRpdmVFdmVudFtpc1ZlcnRpY2FsID8gJ3BhZ2VZJyA6ICdwYWdlWCddO1xuICAgICAgICAgIGNvbnN0IGF4aXNMZW5ndGggPSBpc1ZlcnRpY2FsXG4gICAgICAgICAgICA/IGxheW91dC5oZWlnaHQuX19nZXRWYWx1ZSgpXG4gICAgICAgICAgICA6IGxheW91dC53aWR0aC5fX2dldFZhbHVlKCk7XG4gICAgICAgICAgY29uc3QgYXhpc0hhc0JlZW5NZWFzdXJlZCA9ICEhYXhpc0xlbmd0aDtcbiAgICAgICAgICAvLyBNZWFzdXJlIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSB0b3VjaCB0byB0aGUgZWRnZSBvZiB0aGUgc2NyZWVuXG4gICAgICAgICAgY29uc3Qgc2NyZWVuRWRnZURpc3RhbmNlID0gZ2VzdHVyZURpcmVjdGlvbkludmVydGVkXG4gICAgICAgICAgICA/IGF4aXNMZW5ndGggLSAoY3VycmVudERyYWdQb3NpdGlvbiAtIGN1cnJlbnREcmFnRGlzdGFuY2UpXG4gICAgICAgICAgICA6IGN1cnJlbnREcmFnUG9zaXRpb24gLSBjdXJyZW50RHJhZ0Rpc3RhbmNlO1xuICAgICAgICAgIC8vIENvbXBhcmUgdG8gdGhlIGdlc3R1cmUgZGlzdGFuY2UgcmVsZXZhbnQgdG8gY2FyZCBvciBtb2RhbFxuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGdlc3R1cmVSZXNwb25zZURpc3RhbmNlOiB1c2VyR2VzdHVyZVJlc3BvbnNlRGlzdGFuY2UgPSB7fSxcbiAgICAgICAgICB9ID0gb3B0aW9ucztcbiAgICAgICAgICBjb25zdCBnZXN0dXJlUmVzcG9uc2VEaXN0YW5jZSA9IGlzVmVydGljYWxcbiAgICAgICAgICAgID8gdXNlckdlc3R1cmVSZXNwb25zZURpc3RhbmNlLnZlcnRpY2FsXG4gICAgICAgICAgICAgIHx8IEdFU1RVUkVfUkVTUE9OU0VfRElTVEFOQ0VfVkVSVElDQUxcbiAgICAgICAgICAgIDogdXNlckdlc3R1cmVSZXNwb25zZURpc3RhbmNlLmhvcml6b250YWxcbiAgICAgICAgICAgICAgfHwgR0VTVFVSRV9SRVNQT05TRV9ESVNUQU5DRV9IT1JJWk9OVEFMO1xuICAgICAgICAgIC8vIEdFU1RVUkVfUkVTUE9OU0VfRElTVEFOQ0UgaXMgYWJvdXQgMjUgb3IgMzAuIE9yIDEzNSBmb3IgbW9kYWxzXG4gICAgICAgICAgaWYgKHNjcmVlbkVkZ2VEaXN0YW5jZSA+IGdlc3R1cmVSZXNwb25zZURpc3RhbmNlKSB7XG4gICAgICAgICAgICAvLyBSZWplY3QgdG91Y2hlcyB0aGF0IHN0YXJ0ZWQgaW4gdGhlIG1pZGRsZSBvZiB0aGUgc2NyZWVuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGhhc0RyYWdnZWRFbm91Z2ggPSBNYXRoLmFicyhjdXJyZW50RHJhZ0Rpc3RhbmNlKSA+IFJFU1BPTkRfVEhSRVNIT0xEO1xuICAgICAgICAgIGNvbnN0IGlzT25GaXJzdENhcmQgPSBpbW1lZGlhdGVJbmRleCA9PT0gMDtcbiAgICAgICAgICBjb25zdCBzaG91bGRTZXRSZXNwb25kZXIgPSBoYXNEcmFnZ2VkRW5vdWdoICYmIGF4aXNIYXNCZWVuTWVhc3VyZWQgJiYgIWlzT25GaXJzdENhcmQ7XG4gICAgICAgICAgcmV0dXJuIHNob3VsZFNldFJlc3BvbmRlcjtcbiAgICAgICAgfSxcbiAgICAgICAgb25QYW5SZXNwb25kZXJNb3ZlOiAoZXZlbnQsIGdlc3R1cmUpID0+IHtcbiAgICAgICAgICAvLyBIYW5kbGUgdGhlIG1vdmluZyB0b3VjaGVzIGZvciBvdXIgZ3JhbnRlZCByZXNwb25kZXJcbiAgICAgICAgICBjb25zdCBzdGFydFZhbHVlID0gdGhpcy5fZ2VzdHVyZVN0YXJ0VmFsdWU7XG4gICAgICAgICAgY29uc3QgYXhpcyA9IGlzVmVydGljYWwgPyAnZHknIDogJ2R4JztcbiAgICAgICAgICBjb25zdCBheGlzRGlzdGFuY2UgPSBpc1ZlcnRpY2FsXG4gICAgICAgICAgICA/IGxheW91dC5oZWlnaHQuX19nZXRWYWx1ZSgpICogMC43NVxuICAgICAgICAgICAgOiBsYXlvdXQud2lkdGguX19nZXRWYWx1ZSgpO1xuICAgICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IChJMThuTWFuYWdlci5pc1JUTCAmJiBheGlzID09PSAnZHgnKSAhPT0gZ2VzdHVyZURpcmVjdGlvbkludmVydGVkXG4gICAgICAgICAgICA/IHN0YXJ0VmFsdWUgKyBnZXN0dXJlW2F4aXNdIC8gYXhpc0Rpc3RhbmNlXG4gICAgICAgICAgICA6IHN0YXJ0VmFsdWUgLSBnZXN0dXJlW2F4aXNdIC8gYXhpc0Rpc3RhbmNlO1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gY2xhbXAoaW5kZXggLSAxLCBjdXJyZW50VmFsdWUsIGluZGV4KTtcbiAgICAgICAgICBwb3NpdGlvbi5zZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uUGFuUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0OiAoKSA9PiBmYWxzZSxcbiAgICAgICAgb25QYW5SZXNwb25kZXJSZWxlYXNlOiAoZXZlbnQsIGdlc3R1cmUpID0+IHtcbiAgICAgICAgICBpZiAoIXRoaXMuX2lzUmVzcG9uZGluZykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLl9pc1Jlc3BvbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgICBjb25zdCBpbW1lZGlhdGVJbmRleCA9IHRoaXMuX2ltbWVkaWF0ZUluZGV4ID09IG51bGwgPyBpbmRleCA6IHRoaXMuX2ltbWVkaWF0ZUluZGV4O1xuICAgICAgICAgIC8vIENhbGN1bGF0ZSBhbmltYXRlIGR1cmF0aW9uIGFjY29yZGluZyB0byBnZXN0dXJlIHNwZWVkIGFuZCBtb3ZlZCBkaXN0YW5jZVxuICAgICAgICAgIGNvbnN0IGF4aXNEaXN0YW5jZSA9IGlzVmVydGljYWxcbiAgICAgICAgICAgID8gbGF5b3V0LmhlaWdodC5fX2dldFZhbHVlKClcbiAgICAgICAgICAgIDogbGF5b3V0LndpZHRoLl9fZ2V0VmFsdWUoKTtcbiAgICAgICAgICBjb25zdCBtb3ZlbWVudERpcmVjdGlvbiA9IGdlc3R1cmVEaXJlY3Rpb25JbnZlcnRlZCA/IC0xIDogMTtcbiAgICAgICAgICBjb25zdCBtb3ZlZERpc3RhbmNlID0gbW92ZW1lbnREaXJlY3Rpb24gKiBnZXN0dXJlW2lzVmVydGljYWwgPyAnZHknIDogJ2R4J107XG4gICAgICAgICAgY29uc3QgZ2VzdHVyZVZlbG9jaXR5ID0gbW92ZW1lbnREaXJlY3Rpb24gKiBnZXN0dXJlW2lzVmVydGljYWwgPyAndnknIDogJ3Z4J107XG4gICAgICAgICAgY29uc3QgZGVmYXVsdFZlbG9jaXR5ID0gYXhpc0Rpc3RhbmNlIC8gQU5JTUFUSU9OX0RVUkFUSU9OO1xuICAgICAgICAgIGNvbnN0IHZlbG9jaXR5ID0gTWF0aC5tYXgoTWF0aC5hYnMoZ2VzdHVyZVZlbG9jaXR5KSwgZGVmYXVsdFZlbG9jaXR5KTtcbiAgICAgICAgICBjb25zdCByZXNldER1cmF0aW9uID0gZ2VzdHVyZURpcmVjdGlvbkludmVydGVkXG4gICAgICAgICAgICA/IChheGlzRGlzdGFuY2UgLSBtb3ZlZERpc3RhbmNlKSAvIHZlbG9jaXR5XG4gICAgICAgICAgICA6IG1vdmVkRGlzdGFuY2UgLyB2ZWxvY2l0eTtcbiAgICAgICAgICBjb25zdCBnb0JhY2tEdXJhdGlvbiA9IGdlc3R1cmVEaXJlY3Rpb25JbnZlcnRlZFxuICAgICAgICAgICAgPyBtb3ZlZERpc3RhbmNlIC8gdmVsb2NpdHlcbiAgICAgICAgICAgIDogKGF4aXNEaXN0YW5jZSAtIG1vdmVkRGlzdGFuY2UpIC8gdmVsb2NpdHk7XG4gICAgICAgICAgLy8gVG8gYXN5bmNocm9ub3VzbHkgZ2V0IHRoZSBjdXJyZW50IGFuaW1hdGVkIHZhbHVlLCB3ZSBuZWVkIHRvIHJ1biBzdG9wQW5pbWF0aW9uOlxuICAgICAgICAgIHBvc2l0aW9uLnN0b3BBbmltYXRpb24odmFsdWUgPT4ge1xuICAgICAgICAgICAgLy8gSWYgdGhlIHNwZWVkIG9mIHRoZSBnZXN0dXJlIHJlbGVhc2UgaXMgc2lnbmlmaWNhbnQsIHVzZSB0aGF0IGFzIHRoZSBpbmRpY2F0aW9uXG4gICAgICAgICAgICAvLyBvZiBpbnRlbnRcbiAgICAgICAgICAgIGlmIChnZXN0dXJlVmVsb2NpdHkgPCAtMC41KSB7XG4gICAgICAgICAgICAgIHRoaXMuX3Jlc2V0KHBvc2l0aW9uLCBpbW1lZGlhdGVJbmRleCwgcmVzZXREdXJhdGlvbik7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChnZXN0dXJlVmVsb2NpdHkgPiAwLjUpIHtcbiAgICAgICAgICAgICAgdGhpcy5fZ29CYWNrKG5hdmlnYXRpb24sIHBvc2l0aW9uLCBwcm9wcy5zY2VuZXMsIGltbWVkaWF0ZUluZGV4LCBnb0JhY2tEdXJhdGlvbik7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRoZW4gZmlsdGVyIGJhc2VkIG9uIHRoZSBkaXN0YW5jZSB0aGUgc2NyZWVuIHdhcyBtb3ZlZC4gT3ZlciBhIHRoaXJkIG9mXG4gICAgICAgICAgICAvLyB0aGUgd2F5IHN3aXBlZCwgYW5kIHRoZSBiYWNrIHdpbGwgaGFwcGVuLlxuICAgICAgICAgICAgaWYgKHZhbHVlIDw9IGluZGV4IC0gUE9TSVRJT05fVEhSRVNIT0xEKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2dvQmFjayhuYXZpZ2F0aW9uLCBwb3NpdGlvbiwgcHJvcHMuc2NlbmVzLCBpbW1lZGlhdGVJbmRleCwgZ29CYWNrRHVyYXRpb24pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5fcmVzZXQocG9zaXRpb24sIGltbWVkaWF0ZUluZGV4LCByZXNldER1cmF0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIGNvbnN0IGhhbmRsZXJzID0gZ2VzdHVyZXNFbmFibGVkID8gdGhpcy5fcGFuUmVzcG9uZGVyLnBhbkhhbmRsZXJzIDoge307XG4gICAgcmV0dXJuIGhhbmRsZXJzO1xuICB9XG5cbiAgX3JlbmRlclNjZW5lKHRyYW5zaXRpb25Qcm9wcykge1xuICAgIGNvbnN0IHsgc2NlbmUsIHBvc2l0aW9uIH0gPSB0cmFuc2l0aW9uUHJvcHM7XG4gICAgY29uc3QgeyBpbmRleCB9ID0gc2NlbmU7XG4gICAgY29uc3QgeyBuYXZpZ2F0aW9uIH0gPSBzY2VuZS5kZXNjcmlwdG9yO1xuICAgIGNvbnN0IHsgc2NyZWVuUHJvcHMgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxUcmFuc2l0aW9uUm91dGVWaWV3XG4gICAgICAgIHN0eWxlPXtbc3R5bGVzLnNjZW5lLCB0aGlzLmdldE9wYWNpdHlTdHlsZSh0cmFuc2l0aW9uUHJvcHMucG9zaXRpb24sIGluZGV4KV19XG4gICAgICAgIGtleT17dHJhbnNpdGlvblByb3BzLnNjZW5lLnJvdXRlLmtleX1cbiAgICAgICAgcm91dGU9e3NjZW5lLnJvdXRlLmtleX1cbiAgICAgICAgaXNBY3RpdmU9e3NjZW5lLmlzQWN0aXZlfVxuICAgICAgICBwb3NpdGlvbj17cG9zaXRpb259XG4gICAgICAgIGluZGV4PXtpbmRleH1cbiAgICAgICAgc2NlbmVLZXk9e3NjZW5lLmtleX1cbiAgICAgID5cbiAgICAgICAgPFNjZW5lVmlld1xuICAgICAgICAgIG5hdmlnYXRpb249e25hdmlnYXRpb259XG4gICAgICAgICAgc2NyZWVuUHJvcHM9e3NjcmVlblByb3BzfVxuICAgICAgICAgIGNvbXBvbmVudD17c2NlbmUuZGVzY3JpcHRvci5nZXRDb21wb25lbnQoKX1cbiAgICAgICAgLz5cbiAgICAgIDwvVHJhbnNpdGlvblJvdXRlVmlldz5cbiAgICApO1xuICB9XG5cbiAgZ2V0T3BhY2l0eVN0eWxlKHBvc2l0aW9uOiBBbmltYXRlZC5WYWx1ZSwgaW5kZXg6IG51bWJlcikge1xuICAgIHJldHVybiB7IG9wYWNpdHk6IHBvc2l0aW9uLmludGVycG9sYXRlKHtcbiAgICAgIGlucHV0UmFuZ2U6IFtpbmRleCAtIDEsIGluZGV4IC0gMC4yNSwgaW5kZXgsIGluZGV4ICsgMC4yNSwgaW5kZXggKyAxXSxcbiAgICAgIG91dHB1dFJhbmdlOiBbMCwgMSwgMSwgMSwgMF0sXG4gICAgfSkgfTtcbiAgfVxuXG4gIF91cGRhdGVTY2VuZUFycmF5KHNjZW5lczogQXJyYXk8YW55Pikge1xuICAgIHNjZW5lcy5mb3JFYWNoKHNjZW5lID0+IHtcbiAgICAgIGlmICghdGhpcy5fc2NlbmVzLmZpbmQoc3JpID0+IHNyaS5rZXkgPT09IHNjZW5lLmtleSkpIHtcbiAgICAgICAgdGhpcy5fc2NlbmVzID0gWy4uLnRoaXMuX3NjZW5lcywgeyBrZXk6IHNjZW5lLmtleSwgaXNNb3VudGVkOiBmYWxzZSB9XTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IHRvRGVsZXRlID0gW107XG4gICAgdGhpcy5fc2NlbmVzLmZvckVhY2goc3JpID0+IHtcbiAgICAgIGlmICghc2NlbmVzLmZpbmQoc2NlbmUgPT4gc2NlbmUua2V5ID09PSBzcmkua2V5KSkgeyB0b0RlbGV0ZS5wdXNoKHNyaSk7IH1cbiAgICB9KTtcblxuICAgIHRvRGVsZXRlLmZvckVhY2goc3JpID0+IHtcbiAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fc2NlbmVzLmluZGV4T2Yoc3JpKTtcbiAgICAgIHRoaXMuX3NjZW5lcyA9IFsuLi50aGlzLl9zY2VuZXMuc2xpY2UoMCwgaW5kZXgpLCAuLi50aGlzLl9zY2VuZXMuc2xpY2UoaW5kZXggKyAxKV07XG4gICAgfSk7XG4gIH1cblxuICBfZ2V0U2NlbmVUcmFuc2l0aW9uQ29uZmlndXJhdGlvbiA9IChyb3V0ZU5hbWU6IHN0cmluZywgbmF2aWdhdGlvbjogYW55KSA9PiB7XG4gICAgY29uc3Qgcm91dGUgPSBuYXZpZ2F0aW9uLnN0YXRlO1xuICAgIGNvbnN0IGRlc2NyaXB0b3IgPSB0aGlzLnByb3BzLmRlc2NyaXB0b3JzO1xuICAgIGNvbnN0IHByb3BzID0geyBuYXZpZ2F0aW9uLCBzY2VuZTogeyByb3V0ZSwgZGVzY3JpcHRvciB9IH07XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZ3VyZVRyYW5zaXRpb24ocHJvcHMpO1xuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgY29udGFpbmVyOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICB9LFxuICBzY2VuZToge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gIH0sXG4gIHNjZW5lQ29udGVudDoge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBGbHVpZFRyYW5zaXRpb25lcjtcbiJdfQ==