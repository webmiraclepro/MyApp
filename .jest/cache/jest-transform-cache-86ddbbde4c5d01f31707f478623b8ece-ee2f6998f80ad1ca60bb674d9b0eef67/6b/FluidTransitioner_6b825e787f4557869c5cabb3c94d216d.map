{"version":3,"sources":["FluidTransitioner.js"],"names":["emptyFunction","ANIMATION_DURATION","POSITION_THRESHOLD","RESPOND_THRESHOLD","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","FluidTransitioner","props","_scenes","_gestureStartValue","_isResponding","_immediateIndex","_panResponder","_transitionItemsViewOnLayout","_layoutsReady","_checkScenesAndLayouts","_onSceneReady","key","_scenesReadyResolveFunc","sceneRenderInfo","find","sri","isMounted","_onTransitionEnd","prevProps","onTransitionEnd","_onTransitionStart","onTransitionStart","_scenesReadyPromise","_configureTransition","sceneTransitionConfig","moveForward","index","scene","options","descriptor","transitionConfig","timing","Animated","duration","easing","Easing","inOut","poly","isInteraction","useNativeDriver","renderTransitionView","position","layout","navigation","_animatedSubscribeForNativeAnimation","_updateSceneArray","scenes","toRoute","route","fromRoute","tmp","handlers","getPanResponderHandlers","map","_renderScene","style","_getSceneTransitionConfiguration","routeName","state","descriptors","Promise","resolve","animatedValue","Object","keys","_listeners","length","addListener","routes","onSceneReady","getTransitionConfig","nextProps","resetToIndex","toValue","EaseInOut","__isNative","start","backFromIndex","Math","max","backFromScene","s","dispatch","NavigationActions","back","immediate","mode","isVertical","gestureDirectionInverted","gestureDirection","gesturesEnabled","Platform","OS","handle","getInteractionHandle","InteractionManager","clearInteractionHandle","PanResponder","create","onPanResponderTerminate","_reset","onPanResponderGrant","stopAnimation","value","onMoveShouldSetPanResponder","event","gesture","immediateIndex","currentDragDistance","currentDragPosition","nativeEvent","axisLength","height","__getValue","width","axisHasBeenMeasured","screenEdgeDistance","gestureResponseDistance","userGestureResponseDistance","vertical","horizontal","hasDraggedEnough","abs","isOnFirstCard","shouldSetResponder","onPanResponderMove","startValue","axis","axisDistance","currentValue","I18nManager","isRTL","setValue","onPanResponderTerminationRequest","onPanResponderRelease","movementDirection","movedDistance","gestureVelocity","defaultVelocity","velocity","resetDuration","goBackDuration","_goBack","panHandlers","transitionProps","screenProps","styles","getOpacityStyle","isActive","getComponent","opacity","interpolate","inputRange","outputRange","forEach","toDelete","push","indexOf","slice","React","Component","childContextTypes","PropTypes","string","func","StyleSheet","container","top","left","right","bottom","backgroundColor","sceneContent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyleSheet, Platform, Easing, I18nManager, Animated, PanResponder, InteractionManager } from 'react-native';\nimport { NavigationActions, SceneView } from 'react-navigation';\nimport { Transitioner } from 'react-navigation-stack';\nimport clamp from 'lodash.clamp';\n\nimport TransitionItemsView from './TransitionItemsView';\nimport TransitionRouteView from './TransitionRouteView';\n\nconst emptyFunction = () => {};\n\nconst ANIMATION_DURATION = 500;\nconst POSITION_THRESHOLD = 1 / 2;\nconst RESPOND_THRESHOLD = 20;\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 25;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 150;\n\ntype SceneRenderedInfo = {\n  key: string,\n  isMounted: boolean,\n};\n\nclass FluidTransitioner extends React.Component<*> {\n  constructor(props) {\n    super(props);\n\n    this._scenesReadyPromise = new Promise(resolve => this._scenesReadyResolveFunc = resolve);\n  }\n\n  _scenes: Array<SceneRenderedInfo> = [];\n\n  _scenesReadyResolveFunc: ?Function;\n\n  _scenesReadyPromise: ?Promise<void>;\n\n  _layoutsReady: boolean;\n\n  _gestureStartValue = 0;\n\n  _isResponding = false;\n\n  _immediateIndex = null;\n\n  _panResponder = null;\n\n  static childContextTypes = {\n    route: PropTypes.string,\n    getTransitionConfig: PropTypes.func,\n    onSceneReady: PropTypes.func,\n  }\n\n  _animatedSubscribeForNativeAnimation(animatedValue: Animated.Value) {\n    if (!animatedValue) return;\n    if (!this._configureTransition().useNativeDriver) return;\n    if (Object.keys(animatedValue._listeners).length === 0) {\n      animatedValue.addListener(emptyFunction);\n    }\n  }\n\n  getChildContext() {\n    const { navigation } = this.props;\n    return {\n      route: navigation.state.routes[navigation.state.index].key,\n      onSceneReady: this._onSceneReady,\n      getTransitionConfig: this._getSceneTransitionConfiguration,\n    };\n  }\n\n  render() {\n    const { navigation, descriptors } = this.props;\n    return (\n      <Transitioner\n        configureTransition={this._configureTransition}\n        render={this.renderTransitionView}\n        navigation={navigation}\n        descriptors={descriptors}\n        onTransitionStart={this._onTransitionStart}\n        onTransitionEnd={this._onTransitionEnd}\n      />\n    );\n  }\n\n  _transitionItemsViewOnLayout = () => {\n    this._layoutsReady = true;\n    this._checkScenesAndLayouts();\n  }\n\n  _onSceneReady = (key: string) => {\n    if (!this._scenesReadyResolveFunc) { return; }\n    // check if this is a scene we are waiting for\n    const sceneRenderInfo = this._scenes.find(sri => sri.key === key);\n    if (sceneRenderInfo) sceneRenderInfo.isMounted = true;\n    this._checkScenesAndLayouts();\n  }\n\n  _checkScenesAndLayouts() {\n    if (this._layoutsReady && !this._scenes.find(sri => !sri.isMounted)) {\n      if (this._scenesReadyResolveFunc) {\n        this._scenesReadyResolveFunc();\n\n        this._scenesReadyPromise = new Promise(\n          resolve => this._scenesReadyResolveFunc = resolve,\n        );\n      }\n    }\n  }\n\n  _onTransitionEnd = (props: any, prevProps: any): Promise<void> | void => {\n    const { onTransitionEnd } = this.props;\n    if (onTransitionEnd) return onTransitionEnd(props, prevProps);\n    return null;\n  }\n\n  _onTransitionStart = (): Promise<void> | void => {\n    const { onTransitionStart } = this.props;\n    if (onTransitionStart) return onTransitionStart();\n\n    if (this._scenesReadyPromise) {\n      return this._scenesReadyPromise;\n    }\n\n    return null;\n  }\n\n  shouldComponentUpdate(nextProps) {\n    return this.props !== nextProps;\n  }\n\n  _configureTransition = (props, prevProps) => {\n    let sceneTransitionConfig = {};\n    if (props) {\n      let moveForward = true;\n      if (prevProps && prevProps.index > props.index) {\n        moveForward = false;\n      }\n      const { scene } = moveForward ? props : prevProps;\n      const { options } = scene.descriptor;\n      if (options && options.transitionConfig) {\n        sceneTransitionConfig = options.transitionConfig;\n      }\n    }\n\n    const { transitionConfig } = this.props;\n    return {\n      timing: Animated.timing,\n      duration: 650,\n      easing: Easing.inOut(Easing.poly(4)),\n      ...transitionConfig,\n      ...sceneTransitionConfig,\n      isInteraction: true,\n      useNativeDriver: true,\n    };\n  }\n\n  _reset(position, resetToIndex, duration) {\n    Animated.timing(position, {\n      toValue: resetToIndex,\n      duration,\n      easing: Easing.EaseInOut,\n      useNativeDriver: position.__isNative,\n    }).start();\n  }\n\n  _goBack(navigation, position, scenes, backFromIndex, duration) {\n    const toValue = Math.max(backFromIndex - 1, 0);\n\n    // set temporary index for gesture handler to respect until the action is\n    // dispatched at the end of the transition.\n    this._immediateIndex = toValue;\n\n    Animated.timing(position, {\n      toValue,\n      duration,\n      easing: Easing.EaseInOut,\n      useNativeDriver: position.__isNative,\n    }).start(() => {\n      this._immediateIndex = null;\n      const backFromScene = scenes.find(s => s.index === toValue + 1);\n      if (!this._isResponding && backFromScene) {\n        navigation.dispatch(NavigationActions.back({\n          key: backFromScene.route.key,\n          immediate: true,\n        }));\n      }\n    });\n  }\n\n  renderTransitionView = (props, prevProps) => {\n    this._layoutsReady = false;\n\n    const { position } = props;\n    const { scene, layout } = props;\n    const { navigation } = scene.descriptor;\n\n    this._animatedSubscribeForNativeAnimation(props.position);\n    this._updateSceneArray(props.scenes);\n\n    let toRoute = props.scene.route.key;\n    let fromRoute = prevProps ? prevProps.scene.route.key : null;\n    let { index } = props.scene;\n\n    if (!fromRoute) {\n      fromRoute = index > 0 ? props.scenes[index - 1].route.key : null;\n    }\n\n    // If we are just returning to the previous page keep the same props\n    if (prevProps && index < prevProps.index && fromRoute === prevProps.scene.route.key) {\n      index = prevProps.index;\n      const tmp = fromRoute;\n      fromRoute = toRoute;\n      toRoute = tmp;\n    }\n\n    const handlers = this.getPanResponderHandlers(\n      position, index,\n      scene, layout, navigation, props,\n    );\n\n    const scenes = props.scenes.map(scene => this._renderScene({ ...props, scene }));\n\n    return (\n      <TransitionItemsView\n        {...handlers}\n        navigation={this.props.navigation}\n        style={this.props.style}\n        progress={props.position}\n        fromRoute={fromRoute}\n        toRoute={toRoute}\n        index={index}\n        onLayout={this._transitionItemsViewOnLayout}\n      >\n        {scenes}\n      </TransitionItemsView>\n    );\n  }\n\n  getPanResponderHandlers(position, index, scene, layout, navigation, props) {\n    const { mode } = this.props;\n    const isVertical = mode !== 'card';\n    const { options } = scene.descriptor;\n    const gestureDirectionInverted = options.gestureDirection === 'inverted';\n    const gesturesEnabled = typeof options.gesturesEnabled === 'boolean'\n      ? options.gesturesEnabled\n      : Platform.OS === 'ios';\n\n    // https://github.com/facebook/react-native/issues/8624\n    // https://github.com/react-navigation/react-navigation/issues/4144\n    if (this._panResponder) {\n      const handle = this._panResponder.getInteractionHandle();\n      if (handle) { InteractionManager.clearInteractionHandle(handle); }\n    }\n    this._panResponder = !gesturesEnabled\n\n      ? null\n      : PanResponder.create({\n        onPanResponderTerminate: () => {\n          this._isResponding = false;\n          this._reset(position, index, 0);\n        },\n        onPanResponderGrant: () => {\n          position.stopAnimation(value => {\n            this._isResponding = true;\n            this._gestureStartValue = value;\n          });\n        },\n        onMoveShouldSetPanResponder: (event, gesture) => {\n          if (index !== scene.index) {\n            return false;\n          }\n          const immediateIndex = this._immediateIndex == null ? index : this._immediateIndex;\n          const currentDragDistance = gesture[isVertical ? 'dy' : 'dx'];\n          const currentDragPosition = event.nativeEvent[isVertical ? 'pageY' : 'pageX'];\n          const axisLength = isVertical\n            ? layout.height.__getValue()\n            : layout.width.__getValue();\n          const axisHasBeenMeasured = !!axisLength;\n          // Measure the distance from the touch to the edge of the screen\n          const screenEdgeDistance = gestureDirectionInverted\n            ? axisLength - (currentDragPosition - currentDragDistance)\n            : currentDragPosition - currentDragDistance;\n          // Compare to the gesture distance relevant to card or modal\n          const {\n            gestureResponseDistance: userGestureResponseDistance = {},\n          } = options;\n          const gestureResponseDistance = isVertical\n            ? userGestureResponseDistance.vertical\n              || GESTURE_RESPONSE_DISTANCE_VERTICAL\n            : userGestureResponseDistance.horizontal\n              || GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n          // GESTURE_RESPONSE_DISTANCE is about 25 or 30. Or 135 for modals\n          if (screenEdgeDistance > gestureResponseDistance) {\n            // Reject touches that started in the middle of the screen\n            return false;\n          }\n          const hasDraggedEnough = Math.abs(currentDragDistance) > RESPOND_THRESHOLD;\n          const isOnFirstCard = immediateIndex === 0;\n          const shouldSetResponder = hasDraggedEnough && axisHasBeenMeasured && !isOnFirstCard;\n          return shouldSetResponder;\n        },\n        onPanResponderMove: (event, gesture) => {\n          // Handle the moving touches for our granted responder\n          const startValue = this._gestureStartValue;\n          const axis = isVertical ? 'dy' : 'dx';\n          const axisDistance = isVertical\n            ? layout.height.__getValue() * 0.75\n            : layout.width.__getValue();\n          const currentValue = (I18nManager.isRTL && axis === 'dx') !== gestureDirectionInverted\n            ? startValue + gesture[axis] / axisDistance\n            : startValue - gesture[axis] / axisDistance;\n          const value = clamp(index - 1, currentValue, index);\n          position.setValue(value);\n        },\n        onPanResponderTerminationRequest: () => false,\n        onPanResponderRelease: (event, gesture) => {\n          if (!this._isResponding) {\n            return;\n          }\n          this._isResponding = false;\n          const immediateIndex = this._immediateIndex == null ? index : this._immediateIndex;\n          // Calculate animate duration according to gesture speed and moved distance\n          const axisDistance = isVertical\n            ? layout.height.__getValue()\n            : layout.width.__getValue();\n          const movementDirection = gestureDirectionInverted ? -1 : 1;\n          const movedDistance = movementDirection * gesture[isVertical ? 'dy' : 'dx'];\n          const gestureVelocity = movementDirection * gesture[isVertical ? 'vy' : 'vx'];\n          const defaultVelocity = axisDistance / ANIMATION_DURATION;\n          const velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);\n          const resetDuration = gestureDirectionInverted\n            ? (axisDistance - movedDistance) / velocity\n            : movedDistance / velocity;\n          const goBackDuration = gestureDirectionInverted\n            ? movedDistance / velocity\n            : (axisDistance - movedDistance) / velocity;\n          // To asynchronously get the current animated value, we need to run stopAnimation:\n          position.stopAnimation(value => {\n            // If the speed of the gesture release is significant, use that as the indication\n            // of intent\n            if (gestureVelocity < -0.5) {\n              this._reset(position, immediateIndex, resetDuration);\n              return;\n            }\n            if (gestureVelocity > 0.5) {\n              this._goBack(navigation, position, props.scenes, immediateIndex, goBackDuration);\n              return;\n            }\n            // Then filter based on the distance the screen was moved. Over a third of\n            // the way swiped, and the back will happen.\n            if (value <= index - POSITION_THRESHOLD) {\n              this._goBack(navigation, position, props.scenes, immediateIndex, goBackDuration);\n            } else {\n              this._reset(position, immediateIndex, resetDuration);\n            }\n          });\n        },\n      });\n    const handlers = gesturesEnabled ? this._panResponder.panHandlers : {};\n    return handlers;\n  }\n\n  _renderScene(transitionProps) {\n    const { scene, position } = transitionProps;\n    const { index } = scene;\n    const { navigation } = scene.descriptor;\n    const { screenProps } = this.props;\n    return (\n      <TransitionRouteView\n        style={[styles.scene, this.getOpacityStyle(transitionProps.position, index)]}\n        key={transitionProps.scene.route.key}\n        route={scene.route.key}\n        isActive={scene.isActive}\n        position={position}\n        index={index}\n        sceneKey={scene.key}\n      >\n        <SceneView\n          navigation={navigation}\n          screenProps={screenProps}\n          component={scene.descriptor.getComponent()}\n        />\n      </TransitionRouteView>\n    );\n  }\n\n  getOpacityStyle(position: Animated.Value, index: number) {\n    return { opacity: position.interpolate({\n      inputRange: [index - 1, index - 0.25, index, index + 0.25, index + 1],\n      outputRange: [0, 1, 1, 1, 0],\n    }) };\n  }\n\n  _updateSceneArray(scenes: Array<any>) {\n    scenes.forEach(scene => {\n      if (!this._scenes.find(sri => sri.key === scene.key)) {\n        this._scenes = [...this._scenes, { key: scene.key, isMounted: false }];\n      }\n    });\n\n    const toDelete = [];\n    this._scenes.forEach(sri => {\n      if (!scenes.find(scene => scene.key === sri.key)) { toDelete.push(sri); }\n    });\n\n    toDelete.forEach(sri => {\n      const index = this._scenes.indexOf(sri);\n      this._scenes = [...this._scenes.slice(0, index), ...this._scenes.slice(index + 1)];\n    });\n  }\n\n  _getSceneTransitionConfiguration = (routeName: string, navigation: any) => {\n    const route = navigation.state;\n    const descriptor = this.props.descriptors;\n    const props = { navigation, scene: { route, descriptor } };\n    return this._configureTransition(props);\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  scene: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  sceneContent: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n\nexport default FluidTransitioner;\n"]}