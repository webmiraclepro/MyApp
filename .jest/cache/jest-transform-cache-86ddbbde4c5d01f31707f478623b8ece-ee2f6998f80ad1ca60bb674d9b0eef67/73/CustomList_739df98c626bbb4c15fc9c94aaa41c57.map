{"version":3,"sources":["CustomList.tsx"],"names":["CustomListContainer","props","data","itemWidth","onLayout","event","width","nativeEvent","layout","numColumns","Math","floor","styles","container","margin","item","id","row","textContainer","StyleSheet","create","flex","padding","backgroundColor","borderColor","borderWidth","hairlineWidth","shadowColor","shadowRadius","shadowOffset","height","shadowOpacity","flexDirection","elevation","marginLeft","justifyContent"],"mappings":";;;;;;;AAAA;;AACA;;AAOA,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,KAAD,EAAgB;AAAA,MAClCC,IADkC,GACzBD,KADyB,CAClCC,IADkC;AAG1C,MAAMC,SAAS,GAAG,GAAlB;;AAEA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAgB;AAAA,QACxBC,KADwB,GACfD,KAAK,CAACE,WAAN,CAAkBC,MADH,CACxBF,KADwB;AAE/B,QAAMG,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWL,KAAK,GAACH,SAAjB,CAAnB;AAED,GAJD;;AAMA,SACE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAES,MAAM,CAACC,SAApB;AAA+B,IAAA,QAAQ,EAAET;AAAzC,KACE,6BAAC,qBAAD;AACE,IAAA,IAAI,EAAEF,IADR;AAEE,IAAA,UAAU,EAAE,KAFd;AAGE,IAAA,oBAAoB,EAAE,IAHxB;AAIE,IAAA,sBAAsB,EAAE,IAJ1B;AAKE,IAAA,4BAA4B,EAAE,KALhC;AAME,IAAA,qBAAqB,EAAE;AAAEY,MAAAA,MAAM,EAAE;AAAV,KANzB;AAOE,IAAA,UAAU,EAAE;AAAA,UAAGC,IAAH,QAAGA,IAAH;AAAA,aACV,6BAAC,6BAAD;AACE,QAAA,GAAG,EAAEA,IAAI,CAACC,EADZ;AAEE,QAAA,KAAK,EAAEJ,MAAM,CAACK;AAFhB,SAIE,6BAAC,iBAAD;AAAM,QAAA,KAAK,EAAEL,MAAM,CAACM;AAApB,SACE,6BAAC,iBAAD,oBADF,CAJF,CADU;AAAA;AAPd,IADF,CADF;AAsBD,CAjCD;;AAmCA,IAAMN,MAAM,GAAGO,wBAAWC,MAAX,CAAkB;AAC/BP,EAAAA,SAAS,EAAE;AACTQ,IAAAA,IAAI,EAAE;AADG,GADoB;AAI/BJ,EAAAA,GAAG,EAAE;AACHH,IAAAA,MAAM,EAAE,EADL;AAEHQ,IAAAA,OAAO,EAAE,EAFN;AAGHC,IAAAA,eAAe,EAAE,SAHd;AAIHC,IAAAA,WAAW,EAAE,MAJV;AAKHC,IAAAA,WAAW,EAAEN,wBAAWO,aALrB;AAMHC,IAAAA,WAAW,EAAE,MANV;AAOHC,IAAAA,YAAY,EAAE,CAPX;AAQHC,IAAAA,YAAY,EAAE;AAAEvB,MAAAA,KAAK,EAAE,CAAT;AAAYwB,MAAAA,MAAM,EAAE;AAApB,KARX;AASHC,IAAAA,aAAa,EAAE,GATZ;AAUHC,IAAAA,aAAa,EAAE,KAVZ;AAWHC,IAAAA,SAAS,EAAE;AAXR,GAJ0B;AAiB/Bf,EAAAA,aAAa,EAAE;AACbc,IAAAA,aAAa,EAAE,QADF;AAEbE,IAAAA,UAAU,EAAE,EAFC;AAGbb,IAAAA,IAAI,EAAE,CAHO;AAIbc,IAAAA,cAAc,EAAE;AAJH;AAjBgB,CAAlB,CAAf;;eAyBenC,mB","sourcesContent":["import React from 'react'\nimport { View, FlatList, Text, StyleSheet , TouchableOpacity} from 'react-native'\nimport { Transition } from 'react-navigation-fluid-transitions'\n\ninterface Props {\n  data: any[]\n}\n\nconst CustomListContainer = (props: any) => {\n  const { data } = props\n\n  const itemWidth = 100\n\n  const onLayout = (event: any) => { \n    const {width} = event.nativeEvent.layout\n    const numColumns = Math.floor(width/itemWidth)\n    //this.setState({ numColumns: numColumns })\n  }\n\n  return (\n    <View style={styles.container} onLayout={onLayout}>\n      <FlatList\n        data={data}\n        horizontal={false}\n        alwaysBounceVertical={true}\n        directionalLockEnabled={true}\n        showsVerticalScrollIndicator={false}\n        contentContainerStyle={{ margin: 0 }}\n        renderItem={({ item } : any) =>\n          <TouchableOpacity\n            key={item.id}\n            style={styles.row}\n          >\n            <View style={styles.textContainer}>\n              <Text>User List</Text>\n            </View>\n          </TouchableOpacity>\n        }\n      />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  row: {\n    margin: 10,\n    padding: 10,\n    backgroundColor: '#ECECEC',\n    borderColor: '#CCC',\n    borderWidth: StyleSheet.hairlineWidth,\n    shadowColor: '#EEE',\n    shadowRadius: 5,\n    shadowOffset: { width: 0, height: 5 },\n    shadowOpacity: 0.4,\n    flexDirection: 'row',\n    elevation: 3,\n  },\n  textContainer: {\n    flexDirection: 'column',\n    marginLeft: 18,\n    flex: 1,\n    justifyContent: 'center',\n  },\n})\n\nexport default CustomListContainer\n"]}