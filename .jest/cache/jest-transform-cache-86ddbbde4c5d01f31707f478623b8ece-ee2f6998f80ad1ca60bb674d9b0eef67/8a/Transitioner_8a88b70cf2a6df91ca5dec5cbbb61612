af5a0011a2ed006205ceb889d04f2acf
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _ScenesReducer = _interopRequireDefault(require("./ScenesReducer"));

var _jsxFileName = "/Users/brentvatne/coding/react-navigation-stack/src/views/Transitioner.tsx";
var DefaultTransitionSpec = {
  duration: 250,
  easing: _reactNative.Easing.inOut(_reactNative.Easing.ease),
  timing: _reactNative.Animated.timing
};

var Transitioner = function (_React$Component) {
  (0, _inherits2.default)(Transitioner, _React$Component);

  function Transitioner(_props) {
    var _this;

    (0, _classCallCheck2.default)(this, Transitioner);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Transitioner).call(this, _props));

    _this.computeScenes = function (props, nextProps) {
      var nextScenes = (0, _ScenesReducer.default)(_this.state.scenes, nextProps.navigation.state, props.navigation.state, nextProps.descriptors);

      if (!nextProps.navigation.state.isTransitioning) {
        nextScenes = filterStale(nextScenes);
      }

      if (nextProps.screenProps !== _this.props.screenProps) {
        _this.setState({
          nextScenes: nextScenes
        });
      }

      if (nextScenes === _this.state.scenes) {
        return;
      }

      return nextScenes;
    };

    _this.handleLayout = function (event) {
      var _event$nativeEvent$la = event.nativeEvent.layout,
          height = _event$nativeEvent$la.height,
          width = _event$nativeEvent$la.width;

      if (_this.state.layout.initWidth === width && _this.state.layout.initHeight === height) {
        return;
      }

      var layout = (0, _objectSpread2.default)({}, _this.state.layout, {
        initHeight: height,
        initWidth: width,
        isMeasured: true
      });
      layout.height.setValue(height);
      layout.width.setValue(width);
      var nextState = (0, _objectSpread2.default)({}, _this.state, {
        layout: layout
      });
      _this.transitionProps = buildTransitionProps(_this.props, nextState);

      _this.setState(nextState);
    };

    _this.handleTransitionEnd = function () {
      if (!_this.isComponentMounted) {
        return;
      }

      var prevTransitionProps = _this.prevTransitionProps;
      _this.prevTransitionProps = undefined;
      var scenes = filterStale(_this.state.scenes);
      var nextState = (0, _objectSpread2.default)({}, _this.state, {
        scenes: scenes
      });
      _this.transitionProps = buildTransitionProps(_this.props, nextState);

      _this.setState(nextState, function _callee() {
        var result, prevProps;
        return _regenerator.default.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!_this.props.onTransitionEnd) {
                  _context.next = 5;
                  break;
                }

                result = _this.props.onTransitionEnd(_this.transitionProps, prevTransitionProps);

                if (!(result instanceof Promise)) {
                  _context.next = 5;
                  break;
                }

                _context.next = 5;
                return _regenerator.default.awrap(result);

              case 5:
                if (_this.queuedTransition) {
                  prevProps = _this.queuedTransition.prevProps;
                  _this.queuedTransition = null;

                  _this.startTransition(prevProps, _this.props);
                } else {
                  _this.isTransitionRunning = false;
                }

              case 6:
              case "end":
                return _context.stop();
            }
          }
        });
      });
    };

    var _layout = {
      height: new _reactNative.Animated.Value(0),
      initHeight: 0,
      initWidth: 0,
      isMeasured: false,
      width: new _reactNative.Animated.Value(0)
    };
    var position = new _reactNative.Animated.Value(_this.props.navigation.state.index);
    _this.positionListener = position.addListener(function () {});
    _this.state = {
      layout: _layout,
      position: position,
      scenes: (0, _ScenesReducer.default)([], _this.props.navigation.state, null, _this.props.descriptors)
    };
    _this.prevTransitionProps = undefined;
    _this.transitionProps = buildTransitionProps(_props, _this.state);
    _this.isComponentMounted = false;
    _this.isTransitionRunning = false;
    _this.queuedTransition = null;
    return _this;
  }

  (0, _createClass2.default)(Transitioner, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.isComponentMounted = true;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.isComponentMounted = false;
      this.positionListener && this.state.position.removeListener(this.positionListener);
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (this.isTransitionRunning) {
        if (!this.queuedTransition) {
          this.queuedTransition = {
            prevProps: this.props
          };
        }

        return;
      }

      this.startTransition(this.props, nextProps);
    }
  }, {
    key: "startTransition",
    value: function startTransition(props, nextProps) {
      var _this2 = this;

      var indexHasChanged = props.navigation.state.index !== nextProps.navigation.state.index;
      var nextScenes = this.computeScenes(props, nextProps);

      if (!nextScenes) {
        this.prevTransitionProps = this.transitionProps;
        this.state.position.setValue(props.navigation.state.index);
        this.handleTransitionEnd();
        return;
      }

      var nextState = (0, _objectSpread2.default)({}, this.state, {
        scenes: nextScenes
      });
      var position = nextState.position;
      var toValue = nextProps.navigation.state.index;
      this.prevTransitionProps = this.transitionProps;
      this.transitionProps = buildTransitionProps(nextProps, nextState);
      var isTransitioning = this.transitionProps.navigation.state.isTransitioning;

      if (!isTransitioning || !indexHasChanged) {
        this.setState(nextState, function _callee2() {
          var result;
          return _regenerator.default.async(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!nextProps.onTransitionStart) {
                    _context2.next = 5;
                    break;
                  }

                  result = nextProps.onTransitionStart(_this2.transitionProps, _this2.prevTransitionProps);

                  if (!(result instanceof Promise)) {
                    _context2.next = 5;
                    break;
                  }

                  _context2.next = 5;
                  return _regenerator.default.awrap(result);

                case 5:
                  indexHasChanged && position.setValue(toValue);

                  _this2.handleTransitionEnd();

                case 7:
                case "end":
                  return _context2.stop();
              }
            }
          });
        });
      } else if (isTransitioning) {
        this.isTransitionRunning = true;
        this.setState(nextState, function _callee3() {
          var result, transitionUserSpec, transitionSpec, timing, positionHasChanged;
          return _regenerator.default.async(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  if (!nextProps.onTransitionStart) {
                    _context3.next = 5;
                    break;
                  }

                  result = nextProps.onTransitionStart(_this2.transitionProps, _this2.prevTransitionProps);

                  if (!(result instanceof Promise)) {
                    _context3.next = 5;
                    break;
                  }

                  _context3.next = 5;
                  return _regenerator.default.awrap(result);

                case 5:
                  transitionUserSpec = nextProps.configureTransition ? nextProps.configureTransition(_this2.transitionProps, _this2.prevTransitionProps) : null;
                  transitionSpec = (0, _objectSpread2.default)({}, DefaultTransitionSpec, transitionUserSpec);
                  timing = transitionSpec.timing;
                  delete transitionSpec.timing;
                  positionHasChanged = position.__getValue() !== toValue;

                  if (indexHasChanged && positionHasChanged) {
                    timing(position, (0, _objectSpread2.default)({}, transitionSpec, {
                      toValue: nextProps.navigation.state.index
                    })).start(function () {
                      requestAnimationFrame(_this2.handleTransitionEnd);
                    });
                  } else {
                    _this2.handleTransitionEnd();
                  }

                case 11:
                case "end":
                  return _context3.stop();
              }
            }
          });
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement(_reactNative.View, {
        onLayout: this.handleLayout,
        style: styles.main,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 267
        }
      }, this.props.render(this.transitionProps, this.prevTransitionProps));
    }
  }]);
  return Transitioner;
}(React.Component);

function buildTransitionProps(props, state) {
  var navigation = props.navigation;
  var layout = state.layout,
      position = state.position,
      scenes = state.scenes;
  var scene = scenes.find(isSceneActive);

  if (!scene) {
    throw new Error('Could not find active scene');
  }

  return {
    layout: layout,
    navigation: navigation,
    position: position,
    scenes: scenes,
    scene: scene,
    index: scene.index
  };
}

function isSceneNotStale(scene) {
  return !scene.isStale;
}

function filterStale(scenes) {
  var filtered = scenes.filter(isSceneNotStale);

  if (filtered.length === scenes.length) {
    return scenes;
  }

  return filtered;
}

function isSceneActive(scene) {
  return scene.isActive;
}

var styles = _reactNative.StyleSheet.create({
  main: {
    flex: 1
  }
});

var _default = Transitioner;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,