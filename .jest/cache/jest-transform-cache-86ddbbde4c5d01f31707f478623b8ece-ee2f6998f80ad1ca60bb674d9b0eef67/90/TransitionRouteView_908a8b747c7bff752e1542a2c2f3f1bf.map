{"version":3,"sources":["TransitionRouteView.js"],"names":["EPS","TransitionRouteView","onSceneReady","context","sceneKey","props","route","style","children","isActive","position","index","numericPosition","__getValue","active","React","Component","childContextTypes","PropTypes","string","contextTypes","func"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,IAAMA,GAAG,GAAG,IAAZ;;IASMC,mB;;;;;;;;;;wCASgB;AAAA,UACVC,YADU,GACO,KAAKC,OADZ,CACVD,YADU;AAAA,UAEVE,QAFU,GAEG,KAAKC,KAFR,CAEVD,QAFU;AAGlB,UAAI,CAACF,YAAD,IAAiB,CAACE,QAAtB,EAAgC;AAChCF,MAAAA,YAAY,CAACE,QAAD,CAAZ;AACD;;;sCAEiB;AAAA,UACRE,KADQ,GACE,KAAKD,KADP,CACRC,KADQ;AAEhB,aAAO;AACLA,QAAAA,KAAK,EAALA;AADK,OAAP;AAGD;;;6BAEQ;AAAA,wBACgD,KAAKD,KADrD;AAAA,UACCE,KADD,eACCA,KADD;AAAA,UACQC,QADR,eACQA,QADR;AAAA,UACkBC,QADlB,eACkBA,QADlB;AAAA,UAC4BC,QAD5B,eAC4BA,QAD5B;AAAA,UACsCC,KADtC,eACsCA,KADtC;;AAEP,UAAMC,eAAe,GAAGF,QAAQ,CAACG,UAAT,EAAxB;;AACA,UAAMC,MAAM,GAAGL,QAAQ,KACjBG,eAAe,IAAID,KAAK,GAAG,CAA3B,IAAgCC,eAAe,IAAID,KAAK,GAAG,CAA3D,GAA+D,CAA/D,GAAmE,CADlD,CAAvB;AAGA,aACE,oBAAC,0BAAD;AACE,QAAA,KAAK,EAAEJ,KADT;AAEE,QAAA,MAAM,EAAEO,MAAM,GAAG,CAAH,GAAO;AAFvB,SAIGN,QAJH,CADF;AAQD;;;EArC+BO,KAAK,CAACC,S;;AAAlCf,mB,CACGgB,iB,GAAoB;AACzBX,EAAAA,KAAK,EAAEY,mBAAUC;AADQ,C;AADvBlB,mB,CAKGmB,Y,GAAe;AACpBlB,EAAAA,YAAY,EAAEgB,mBAAUG;AADJ,C;eAmCTpB,mB","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyleSheet } from 'react-native';\nimport { Screen } from 'react-native-screens';\n\nconst EPS = 1e-5;\n\ntype TransitionRouteViewProps = {\n  children: React.Node,\n  style: StyleSheet.Styles,\n  route: string,\n  sceneKey: ?string,\n}\n\nclass TransitionRouteView extends React.Component<TransitionRouteViewProps> {\n  static childContextTypes = {\n    route: PropTypes.string,\n  }\n\n  static contextTypes = {\n    onSceneReady: PropTypes.func,\n  }\n\n  componentDidMount() {\n    const { onSceneReady } = this.context;\n    const { sceneKey } = this.props;\n    if (!onSceneReady || !sceneKey) return;\n    onSceneReady(sceneKey);\n  }\n\n  getChildContext() {\n    const { route } = this.props;\n    return {\n      route,\n    };\n  }\n\n  render() {\n    const { style, children, isActive, position, index } = this.props;\n    const numericPosition = position.__getValue();\n    const active = isActive\n      || (numericPosition >= index - 1 && numericPosition <= index + 1 ? 1 : 0);\n\n    return (\n      <Screen\n        style={style}\n        active={active ? 1 : 0}\n      >\n        {children}\n      </Screen>\n    );\n  }\n}\n\nexport default TransitionRouteView;\n"]}