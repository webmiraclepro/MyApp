c6e5f1e8e18019f5fb378b0851323eea
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");
var _reactNavigation = require("react-navigation");
var _reactNavigationStack = require("react-navigation-stack");
var _lodash = _interopRequireDefault(require("lodash.clamp"));

var _TransitionItemsView = _interopRequireDefault(require("./TransitionItemsView"));
var _TransitionRouteView = _interopRequireDefault(require("./TransitionRouteView"));var _jsxFileName = "/Users/jdnichollsc/dev/react-native/Randomuser-me/node_modules/react-navigation-fluid-transitions/FluidTransitioner.js";

var emptyFunction = function emptyFunction() {};

var ANIMATION_DURATION = 500;
var POSITION_THRESHOLD = 1 / 2;
var RESPOND_THRESHOLD = 20;
var GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 25;
var GESTURE_RESPONSE_DISTANCE_VERTICAL = 150;var






FluidTransitioner = function (_React$Component) {(0, _inherits2.default)(FluidTransitioner, _React$Component);
  function FluidTransitioner(_props) {var _this;(0, _classCallCheck2.default)(this, FluidTransitioner);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(FluidTransitioner).call(this, _props));_this.




    _scenes = [];_this.







    _gestureStartValue = 0;_this.

    _isResponding = false;_this.

    _immediateIndex = null;_this.

    _panResponder = null;_this.






































    _transitionItemsViewOnLayout = function () {
      _this._layoutsReady = true;
      _this._checkScenesAndLayouts();
    };_this.

    _onSceneReady = function (key) {
      if (!_this._scenesReadyResolveFunc) {return;}

      var sceneRenderInfo = _this._scenes.find(function (sri) {return sri.key === key;});
      if (sceneRenderInfo) sceneRenderInfo.isMounted = true;
      _this._checkScenesAndLayouts();
    };_this.













    _onTransitionEnd = function (props, prevProps) {var
      onTransitionEnd = _this.props.onTransitionEnd;
      if (onTransitionEnd) return onTransitionEnd(props, prevProps);
      return null;
    };_this.

    _onTransitionStart = function () {var
      onTransitionStart = _this.props.onTransitionStart;
      if (onTransitionStart) return onTransitionStart();

      if (_this._scenesReadyPromise) {
        return _this._scenesReadyPromise;
      }

      return null;
    };_this.





    _configureTransition = function (props, prevProps) {
      var sceneTransitionConfig = {};
      if (props) {
        var moveForward = true;
        if (prevProps && prevProps.index > props.index) {
          moveForward = false;
        }var _ref =
        moveForward ? props : prevProps,scene = _ref.scene;var
        options = scene.descriptor.options;
        if (options && options.transitionConfig) {
          sceneTransitionConfig = options.transitionConfig;
        }
      }var

      transitionConfig = _this.props.transitionConfig;
      return (0, _objectSpread2.default)({
        timing: _reactNative.Animated.timing,
        duration: 650,
        easing: _reactNative.Easing.inOut(_reactNative.Easing.poly(4)) },
      transitionConfig,
      sceneTransitionConfig, {
        isInteraction: true,
        useNativeDriver: true });

    };_this.


































    renderTransitionView = function (props, prevProps) {
      _this._layoutsReady = false;var

      position = props.position;var
      scene = props.scene,layout = props.layout;var
      navigation = scene.descriptor.navigation;

      _this._animatedSubscribeForNativeAnimation(props.position);
      _this._updateSceneArray(props.scenes);

      var toRoute = props.scene.route.key;
      var fromRoute = prevProps ? prevProps.scene.route.key : null;var
      index = props.scene.index;

      if (!fromRoute) {
        fromRoute = index > 0 ? props.scenes[index - 1].route.key : null;
      }


      if (prevProps && index < prevProps.index && fromRoute === prevProps.scene.route.key) {
        index = prevProps.index;
        var tmp = fromRoute;
        fromRoute = toRoute;
        toRoute = tmp;
      }

      var handlers = _this.getPanResponderHandlers(
      position, index,
      scene, layout, navigation, props);


      var scenes = props.scenes.map(function (scene) {return _this._renderScene((0, _objectSpread2.default)({}, props, { scene: scene }));});

      return (
        _react.default.createElement(_TransitionItemsView.default, (0, _extends2.default)({},
        handlers, {
          navigation: _this.props.navigation,
          style: _this.props.style,
          progress: props.position,
          fromRoute: fromRoute,
          toRoute: toRoute,
          index: index,
          onLayout: _this._transitionItemsViewOnLayout, __source: { fileName: _jsxFileName, lineNumber: 223 } }),

        scenes));


    };_this.














































































































































































    _getSceneTransitionConfiguration = function (routeName, navigation) {
      var route = navigation.state;
      var descriptor = _this.props.descriptors;
      var props = { navigation: navigation, scene: { route: route, descriptor: descriptor } };
      return _this._configureTransition(props);
    };_this._scenesReadyPromise = new Promise(function (resolve) {return _this._scenesReadyResolveFunc = resolve;});return _this;}(0, _createClass2.default)(FluidTransitioner, [{ key: "_animatedSubscribeForNativeAnimation", value: function _animatedSubscribeForNativeAnimation(animatedValue) {if (!animatedValue) return;if (!this._configureTransition().useNativeDriver) return;if (Object.keys(animatedValue._listeners).length === 0) {animatedValue.addListener(emptyFunction);}} }, { key: "getChildContext", value: function getChildContext() {var navigation = this.props.navigation;return { route: navigation.state.routes[navigation.state.index].key, onSceneReady: this._onSceneReady, getTransitionConfig: this._getSceneTransitionConfiguration };} }, { key: "render", value: function render() {var _this$props = this.props,navigation = _this$props.navigation,descriptors = _this$props.descriptors;return _react.default.createElement(_reactNavigationStack.Transitioner, { configureTransition: this._configureTransition, render: this.renderTransitionView, navigation: navigation, descriptors: descriptors, onTransitionStart: this._onTransitionStart, onTransitionEnd: this._onTransitionEnd, __source: { fileName: _jsxFileName, lineNumber: 73 } });} }, { key: "_checkScenesAndLayouts", value: function _checkScenesAndLayouts() {var _this2 = this;if (this._layoutsReady && !this._scenes.find(function (sri) {return !sri.isMounted;})) {if (this._scenesReadyResolveFunc) {this._scenesReadyResolveFunc();this._scenesReadyPromise = new Promise(function (resolve) {return _this2._scenesReadyResolveFunc = resolve;});}}} }, { key: "shouldComponentUpdate", value: function shouldComponentUpdate(nextProps) {return this.props !== nextProps;} }, { key: "_reset", value: function _reset(position, resetToIndex, duration) {_reactNative.Animated.timing(position, { toValue: resetToIndex, duration: duration, easing: _reactNative.Easing.EaseInOut, useNativeDriver: position.__isNative }).start();} }, { key: "_goBack", value: function _goBack(navigation, position, scenes, backFromIndex, duration) {var _this3 = this;var toValue = Math.max(backFromIndex - 1, 0);this._immediateIndex = toValue;_reactNative.Animated.timing(position, { toValue: toValue, duration: duration, easing: _reactNative.Easing.EaseInOut, useNativeDriver: position.__isNative }).start(function () {_this3._immediateIndex = null;var backFromScene = scenes.find(function (s) {return s.index === toValue + 1;});if (!_this3._isResponding && backFromScene) {navigation.dispatch(_reactNavigation.NavigationActions.back({ key: backFromScene.route.key, immediate: true }));}});} }, { key: "getPanResponderHandlers", value: function getPanResponderHandlers(position, index, scene, layout, navigation, props) {var _this4 = this;var mode = this.props.mode;var isVertical = mode !== 'card';var options = scene.descriptor.options;var gestureDirectionInverted = options.gestureDirection === 'inverted';var gesturesEnabled = typeof options.gesturesEnabled === 'boolean' ? options.gesturesEnabled : _reactNative.Platform.OS === 'ios';if (this._panResponder) {var handle = this._panResponder.getInteractionHandle();if (handle) {_reactNative.InteractionManager.clearInteractionHandle(handle);}}this._panResponder = !gesturesEnabled ? null : _reactNative.PanResponder.create({ onPanResponderTerminate: function onPanResponderTerminate() {_this4._isResponding = false;_this4._reset(position, index, 0);}, onPanResponderGrant: function onPanResponderGrant() {position.stopAnimation(function (value) {_this4._isResponding = true;_this4._gestureStartValue = value;});}, onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(event, gesture) {if (index !== scene.index) {return false;}var immediateIndex = _this4._immediateIndex == null ? index : _this4._immediateIndex;var currentDragDistance = gesture[isVertical ? 'dy' : 'dx'];var currentDragPosition = event.nativeEvent[isVertical ? 'pageY' : 'pageX'];var axisLength = isVertical ? layout.height.__getValue() : layout.width.__getValue();var axisHasBeenMeasured = !!axisLength;var screenEdgeDistance = gestureDirectionInverted ? axisLength - (currentDragPosition - currentDragDistance) : currentDragPosition - currentDragDistance;var _options$gestureRespo = options.gestureResponseDistance,userGestureResponseDistance = _options$gestureRespo === void 0 ? {} : _options$gestureRespo;var gestureResponseDistance = isVertical ? userGestureResponseDistance.vertical || GESTURE_RESPONSE_DISTANCE_VERTICAL : userGestureResponseDistance.horizontal || GESTURE_RESPONSE_DISTANCE_HORIZONTAL;if (screenEdgeDistance > gestureResponseDistance) {return false;}var hasDraggedEnough = Math.abs(currentDragDistance) > RESPOND_THRESHOLD;var isOnFirstCard = immediateIndex === 0;var shouldSetResponder = hasDraggedEnough && axisHasBeenMeasured && !isOnFirstCard;return shouldSetResponder;}, onPanResponderMove: function onPanResponderMove(event, gesture) {var startValue = _this4._gestureStartValue;var axis = isVertical ? 'dy' : 'dx';var axisDistance = isVertical ? layout.height.__getValue() * 0.75 : layout.width.__getValue();var currentValue = (_reactNative.I18nManager.isRTL && axis === 'dx') !== gestureDirectionInverted ? startValue + gesture[axis] / axisDistance : startValue - gesture[axis] / axisDistance;var value = (0, _lodash.default)(index - 1, currentValue, index);position.setValue(value);}, onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {return false;}, onPanResponderRelease: function onPanResponderRelease(event, gesture) {if (!_this4._isResponding) {return;}_this4._isResponding = false;var immediateIndex = _this4._immediateIndex == null ? index : _this4._immediateIndex;var axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();var movementDirection = gestureDirectionInverted ? -1 : 1;var movedDistance = movementDirection * gesture[isVertical ? 'dy' : 'dx'];var gestureVelocity = movementDirection * gesture[isVertical ? 'vy' : 'vx'];var defaultVelocity = axisDistance / ANIMATION_DURATION;var velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);var resetDuration = gestureDirectionInverted ? (axisDistance - movedDistance) / velocity : movedDistance / velocity;var goBackDuration = gestureDirectionInverted ? movedDistance / velocity : (axisDistance - movedDistance) / velocity;position.stopAnimation(function (value) {if (gestureVelocity < -0.5) {_this4._reset(position, immediateIndex, resetDuration);return;}if (gestureVelocity > 0.5) {_this4._goBack(navigation, position, props.scenes, immediateIndex, goBackDuration);return;}if (value <= index - POSITION_THRESHOLD) {_this4._goBack(navigation, position, props.scenes, immediateIndex, goBackDuration);} else {_this4._reset(position, immediateIndex, resetDuration);}});} });var handlers = gesturesEnabled ? this._panResponder.panHandlers : {};return handlers;} }, { key: "_renderScene", value: function _renderScene(transitionProps) {var scene = transitionProps.scene,position = transitionProps.position;var index = scene.index;var navigation = scene.descriptor.navigation;var screenProps = this.props.screenProps;return _react.default.createElement(_TransitionRouteView.default, { style: [styles.scene, this.getOpacityStyle(transitionProps.position, index)], key: transitionProps.scene.route.key, route: scene.route.key, isActive: scene.isActive, position: position, index: index, sceneKey: scene.key, __source: { fileName: _jsxFileName, lineNumber: 368 } }, _react.default.createElement(_reactNavigation.SceneView, { navigation: navigation, screenProps: screenProps, component: scene.descriptor.getComponent(), __source: { fileName: _jsxFileName, lineNumber: 377 } }));} }, { key: "getOpacityStyle", value: function getOpacityStyle(position, index) {return { opacity: position.interpolate({ inputRange: [index - 1, index - 0.25, index, index + 0.25, index + 1], outputRange: [0, 1, 1, 1, 0] }) };} }, { key: "_updateSceneArray", value: function _updateSceneArray(scenes) {var _this5 = this;scenes.forEach(function (scene) {if (!_this5._scenes.find(function (sri) {return sri.key === scene.key;})) {_this5._scenes = [].concat((0, _toConsumableArray2.default)(_this5._scenes), [{ key: scene.key, isMounted: false }]);}});var toDelete = [];this._scenes.forEach(function (sri) {if (!scenes.find(function (scene) {return scene.key === sri.key;})) {toDelete.push(sri);}});toDelete.forEach(function (sri) {var index = _this5._scenes.indexOf(sri);_this5._scenes = [].concat((0, _toConsumableArray2.default)(_this5._scenes.slice(0, index)), (0, _toConsumableArray2.default)(_this5._scenes.slice(index + 1)));});} }]);return FluidTransitioner;}(_react.default.Component);FluidTransitioner.childContextTypes = { route: _propTypes.default.string, getTransitionConfig: _propTypes.default.func, onSceneReady: _propTypes.default.func };


var styles = _reactNative.StyleSheet.create({
  container: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0 },

  scene: {
    position: 'absolute',
    backgroundColor: 'transparent',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0 },

  sceneContent: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0 } });var _default =



FluidTransitioner;exports.default = _default;