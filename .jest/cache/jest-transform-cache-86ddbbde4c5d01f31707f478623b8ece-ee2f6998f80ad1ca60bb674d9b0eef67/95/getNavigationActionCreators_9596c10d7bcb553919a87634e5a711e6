700fb1109593f0f2ced150148d645672
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var NavigationActions = _interopRequireWildcard(require("../NavigationActions"));

var _invariant = _interopRequireDefault(require("../utils/invariant"));

var getNavigationActionCreators = function getNavigationActionCreators(route) {
  return {
    goBack: function goBack(key) {
      var actualizedKey = key;

      if (key === undefined && route.key) {
        (0, _invariant.default)(typeof route.key === 'string', 'key should be a string');
        actualizedKey = route.key;
      }

      return NavigationActions.back({
        key: actualizedKey
      });
    },
    navigate: function navigate(navigateTo, params, action) {
      if (typeof navigateTo === 'string') {
        return NavigationActions.navigate({
          routeName: navigateTo,
          params: params,
          action: action
        });
      }

      (0, _invariant.default)(typeof navigateTo === 'object', 'Must navigateTo an object or a string');
      (0, _invariant.default)(params == null, 'Params must not be provided to .navigate() when specifying an object');
      (0, _invariant.default)(action == null, 'Child action must not be provided to .navigate() when specifying an object');
      return NavigationActions.navigate(navigateTo);
    },
    setParams: function setParams(params) {
      (0, _invariant.default)(route.key && typeof route.key === 'string', 'setParams cannot be called by root navigator');
      return NavigationActions.setParams({
        params: params,
        key: route.key
      });
    }
  };
};

var _default = getNavigationActionCreators;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdldE5hdmlnYXRpb25BY3Rpb25DcmVhdG9ycy5qcyJdLCJuYW1lcyI6WyJnZXROYXZpZ2F0aW9uQWN0aW9uQ3JlYXRvcnMiLCJnb0JhY2siLCJhY3R1YWxpemVkS2V5Iiwia2V5Iiwicm91dGUiLCJOYXZpZ2F0aW9uQWN0aW9ucyIsIm5hdmlnYXRlIiwicm91dGVOYW1lIiwicGFyYW1zIiwiYWN0aW9uIiwic2V0UGFyYW1zIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxJQUFBLGlCQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBLENBQUEsc0JBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsVUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLG9CQUFBLENBQUEsQ0FBQTs7QUFFQSxJQUFNQSwyQkFBMkIsR0FBM0JBLFNBQUFBLDJCQUFBQSxDQUE4QixLQUE5QkEsRUFBdUM7QUFDM0MsU0FBTztBQUNMQyxJQUFBQSxNQUFNLEVBQUUsU0FBQSxNQUFBLENBQUEsR0FBQSxFQUFPO0FBQ2IsVUFBSUMsYUFBYSxHQUFqQixHQUFBOztBQUNBLFVBQUlDLEdBQUcsS0FBSEEsU0FBQUEsSUFBcUJDLEtBQUssQ0FBOUIsR0FBQSxFQUFvQztBQUNsQyxTQUFBLEdBQUEsVUFBQSxDQUFBLE9BQUEsRUFBVSxPQUFPQSxLQUFLLENBQVosR0FBQSxLQUFWLFFBQUEsRUFBQSx3QkFBQTtBQUNBRixRQUFBQSxhQUFhLEdBQUdFLEtBQUssQ0FBckJGLEdBQUFBO0FBRUY7O0FBQUEsYUFBT0csaUJBQWlCLENBQWpCQSxJQUFBQSxDQUF1QjtBQUFFRixRQUFBQSxHQUFHLEVBQW5DO0FBQThCLE9BQXZCRSxDQUFQO0FBUEcsS0FBQTtBQVNMQyxJQUFBQSxRQUFRLEVBQUUsU0FBQSxRQUFBLENBQUEsVUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQWdDO0FBQ3hDLFVBQUksT0FBQSxVQUFBLEtBQUosUUFBQSxFQUFvQztBQUNsQyxlQUFPRCxpQkFBaUIsQ0FBakJBLFFBQUFBLENBQTJCO0FBQ2hDRSxVQUFBQSxTQUFTLEVBRHVCLFVBQUE7QUFFaENDLFVBQUFBLE1BQU0sRUFGMEIsTUFBQTtBQUdoQ0MsVUFBQUEsTUFBTSxFQUhSO0FBQWtDLFNBQTNCSixDQUFQO0FBTUY7O0FBQUEsT0FBQSxHQUFBLFVBQUEsQ0FBQSxPQUFBLEVBQ0UsT0FBQSxVQUFBLEtBREYsUUFBQSxFQUFBLHVDQUFBO0FBSUEsT0FBQSxHQUFBLFVBQUEsQ0FBQSxPQUFBLEVBQ0VHLE1BQU0sSUFEUixJQUFBLEVBQUEsc0VBQUE7QUFJQSxPQUFBLEdBQUEsVUFBQSxDQUFBLE9BQUEsRUFDRUMsTUFBTSxJQURSLElBQUEsRUFBQSw0RUFBQTtBQUlBLGFBQU9KLGlCQUFpQixDQUFqQkEsUUFBQUEsQ0FBUCxVQUFPQSxDQUFQO0FBN0JHLEtBQUE7QUErQkxLLElBQUFBLFNBQVMsRUFBRSxTQUFBLFNBQUEsQ0FBQSxNQUFBLEVBQVU7QUFDbkIsT0FBQSxHQUFBLFVBQUEsQ0FBQSxPQUFBLEVBQ0VOLEtBQUssQ0FBTEEsR0FBQUEsSUFBYSxPQUFPQSxLQUFLLENBQVosR0FBQSxLQURmLFFBQUEsRUFBQSw4Q0FBQTtBQUlBLGFBQU9DLGlCQUFpQixDQUFqQkEsU0FBQUEsQ0FBNEI7QUFBRUcsUUFBQUEsTUFBTSxFQUFSLE1BQUE7QUFBVUwsUUFBQUEsR0FBRyxFQUFFQyxLQUFLLENBQXZEO0FBQW1DLE9BQTVCQyxDQUFQO0FBcENKO0FBQU8sR0FBUDtBQURGLENBQUE7O2VBMENlTCwyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIE5hdmlnYXRpb25BY3Rpb25zIGZyb20gJy4uL05hdmlnYXRpb25BY3Rpb25zJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnLi4vdXRpbHMvaW52YXJpYW50JztcblxuY29uc3QgZ2V0TmF2aWdhdGlvbkFjdGlvbkNyZWF0b3JzID0gcm91dGUgPT4ge1xuICByZXR1cm4ge1xuICAgIGdvQmFjazoga2V5ID0+IHtcbiAgICAgIGxldCBhY3R1YWxpemVkS2V5ID0ga2V5O1xuICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkICYmIHJvdXRlLmtleSkge1xuICAgICAgICBpbnZhcmlhbnQodHlwZW9mIHJvdXRlLmtleSA9PT0gJ3N0cmluZycsICdrZXkgc2hvdWxkIGJlIGEgc3RyaW5nJyk7XG4gICAgICAgIGFjdHVhbGl6ZWRLZXkgPSByb3V0ZS5rZXk7XG4gICAgICB9XG4gICAgICByZXR1cm4gTmF2aWdhdGlvbkFjdGlvbnMuYmFjayh7IGtleTogYWN0dWFsaXplZEtleSB9KTtcbiAgICB9LFxuICAgIG5hdmlnYXRlOiAobmF2aWdhdGVUbywgcGFyYW1zLCBhY3Rpb24pID0+IHtcbiAgICAgIGlmICh0eXBlb2YgbmF2aWdhdGVUbyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIE5hdmlnYXRpb25BY3Rpb25zLm5hdmlnYXRlKHtcbiAgICAgICAgICByb3V0ZU5hbWU6IG5hdmlnYXRlVG8sXG4gICAgICAgICAgcGFyYW1zLFxuICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIHR5cGVvZiBuYXZpZ2F0ZVRvID09PSAnb2JqZWN0JyxcbiAgICAgICAgJ011c3QgbmF2aWdhdGVUbyBhbiBvYmplY3Qgb3IgYSBzdHJpbmcnXG4gICAgICApO1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBwYXJhbXMgPT0gbnVsbCxcbiAgICAgICAgJ1BhcmFtcyBtdXN0IG5vdCBiZSBwcm92aWRlZCB0byAubmF2aWdhdGUoKSB3aGVuIHNwZWNpZnlpbmcgYW4gb2JqZWN0J1xuICAgICAgKTtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgYWN0aW9uID09IG51bGwsXG4gICAgICAgICdDaGlsZCBhY3Rpb24gbXVzdCBub3QgYmUgcHJvdmlkZWQgdG8gLm5hdmlnYXRlKCkgd2hlbiBzcGVjaWZ5aW5nIGFuIG9iamVjdCdcbiAgICAgICk7XG4gICAgICByZXR1cm4gTmF2aWdhdGlvbkFjdGlvbnMubmF2aWdhdGUobmF2aWdhdGVUbyk7XG4gICAgfSxcbiAgICBzZXRQYXJhbXM6IHBhcmFtcyA9PiB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIHJvdXRlLmtleSAmJiB0eXBlb2Ygcm91dGUua2V5ID09PSAnc3RyaW5nJyxcbiAgICAgICAgJ3NldFBhcmFtcyBjYW5ub3QgYmUgY2FsbGVkIGJ5IHJvb3QgbmF2aWdhdG9yJ1xuICAgICAgKTtcbiAgICAgIHJldHVybiBOYXZpZ2F0aW9uQWN0aW9ucy5zZXRQYXJhbXMoeyBwYXJhbXMsIGtleTogcm91dGUua2V5IH0pO1xuICAgIH0sXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBnZXROYXZpZ2F0aW9uQWN0aW9uQ3JlYXRvcnM7XG4iXX0=