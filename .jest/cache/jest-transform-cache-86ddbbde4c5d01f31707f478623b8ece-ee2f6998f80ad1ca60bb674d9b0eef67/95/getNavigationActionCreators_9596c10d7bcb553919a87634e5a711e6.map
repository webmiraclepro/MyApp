{"version":3,"sources":["getNavigationActionCreators.js"],"names":["getNavigationActionCreators","goBack","actualizedKey","key","route","NavigationActions","navigate","routeName","params","action","setParams"],"mappings":";;;;;;;;;AAAA,IAAA,iBAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,sBAAA,CAAA,CAAA;;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA;;AAEA,IAAMA,2BAA2B,GAA3BA,SAAAA,2BAAAA,CAA8B,KAA9BA,EAAuC;AAC3C,SAAO;AACLC,IAAAA,MAAM,EAAE,SAAA,MAAA,CAAA,GAAA,EAAO;AACb,UAAIC,aAAa,GAAjB,GAAA;;AACA,UAAIC,GAAG,KAAHA,SAAAA,IAAqBC,KAAK,CAA9B,GAAA,EAAoC;AAClC,SAAA,GAAA,UAAA,CAAA,OAAA,EAAU,OAAOA,KAAK,CAAZ,GAAA,KAAV,QAAA,EAAA,wBAAA;AACAF,QAAAA,aAAa,GAAGE,KAAK,CAArBF,GAAAA;AAEF;;AAAA,aAAOG,iBAAiB,CAAjBA,IAAAA,CAAuB;AAAEF,QAAAA,GAAG,EAAnC;AAA8B,OAAvBE,CAAP;AAPG,KAAA;AASLC,IAAAA,QAAQ,EAAE,SAAA,QAAA,CAAA,UAAA,EAAA,MAAA,EAAA,MAAA,EAAgC;AACxC,UAAI,OAAA,UAAA,KAAJ,QAAA,EAAoC;AAClC,eAAOD,iBAAiB,CAAjBA,QAAAA,CAA2B;AAChCE,UAAAA,SAAS,EADuB,UAAA;AAEhCC,UAAAA,MAAM,EAF0B,MAAA;AAGhCC,UAAAA,MAAM,EAHR;AAAkC,SAA3BJ,CAAP;AAMF;;AAAA,OAAA,GAAA,UAAA,CAAA,OAAA,EACE,OAAA,UAAA,KADF,QAAA,EAAA,uCAAA;AAIA,OAAA,GAAA,UAAA,CAAA,OAAA,EACEG,MAAM,IADR,IAAA,EAAA,sEAAA;AAIA,OAAA,GAAA,UAAA,CAAA,OAAA,EACEC,MAAM,IADR,IAAA,EAAA,4EAAA;AAIA,aAAOJ,iBAAiB,CAAjBA,QAAAA,CAAP,UAAOA,CAAP;AA7BG,KAAA;AA+BLK,IAAAA,SAAS,EAAE,SAAA,SAAA,CAAA,MAAA,EAAU;AACnB,OAAA,GAAA,UAAA,CAAA,OAAA,EACEN,KAAK,CAALA,GAAAA,IAAa,OAAOA,KAAK,CAAZ,GAAA,KADf,QAAA,EAAA,8CAAA;AAIA,aAAOC,iBAAiB,CAAjBA,SAAAA,CAA4B;AAAEG,QAAAA,MAAM,EAAR,MAAA;AAAUL,QAAAA,GAAG,EAAEC,KAAK,CAAvD;AAAmC,OAA5BC,CAAP;AApCJ;AAAO,GAAP;AADF,CAAA;;eA0CeL,2B","sourcesContent":["import * as NavigationActions from '../NavigationActions';\nimport invariant from '../utils/invariant';\n\nconst getNavigationActionCreators = route => {\n  return {\n    goBack: key => {\n      let actualizedKey = key;\n      if (key === undefined && route.key) {\n        invariant(typeof route.key === 'string', 'key should be a string');\n        actualizedKey = route.key;\n      }\n      return NavigationActions.back({ key: actualizedKey });\n    },\n    navigate: (navigateTo, params, action) => {\n      if (typeof navigateTo === 'string') {\n        return NavigationActions.navigate({\n          routeName: navigateTo,\n          params,\n          action,\n        });\n      }\n      invariant(\n        typeof navigateTo === 'object',\n        'Must navigateTo an object or a string'\n      );\n      invariant(\n        params == null,\n        'Params must not be provided to .navigate() when specifying an object'\n      );\n      invariant(\n        action == null,\n        'Child action must not be provided to .navigate() when specifying an object'\n      );\n      return NavigationActions.navigate(navigateTo);\n    },\n    setParams: params => {\n      invariant(\n        route.key && typeof route.key === 'string',\n        'setParams cannot be called by root navigator'\n      );\n      return NavigationActions.setParams({ params, key: route.key });\n    },\n  };\n};\n\nexport default getNavigationActionCreators;\n"]}