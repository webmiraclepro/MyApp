819ed07b8bc1d39d654553ee0186b006
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRotationInterpolator = void 0;

var _reactNative = require("react-native");

var _InterpolatorSpecification = require("../Types/InterpolatorSpecification");

var _Utils = require("../Utils");

var getRotationInterpolator = function getRotationInterpolator(spec) {
  var fromStyle = spec.from.style;
  var toStyle = spec.to.style;
  if ((!fromStyle || !fromStyle.transform) && (!toStyle || !toStyle.transform)) return {};
  var rotateFrom = (0, _Utils.getRotationFromStyle)(fromStyle);
  var rotateTo = (0, _Utils.getRotationFromStyle)(toStyle);
  if (rotateFrom === {} && rotateTo === {}) return {};
  var retVal = [];
  var interpolator = spec.getInterpolation(true);

  if (rotateFrom.rotate || rotateTo.rotate) {
    retVal.push({
      rotate: interpolator.interpolate({
        inputRange: [0, 1],
        outputRange: [rotateFrom.rotate ? rotateFrom.rotate.rotate : '0deg', rotateTo.rotate ? rotateTo.rotate.rotate : '0deg']
      })
    });
  }

  if (rotateFrom.rotateX || rotateTo.rotateX) {
    retVal.push({
      rotateX: interpolator.interpolate({
        inputRange: [0, 1],
        outputRange: [rotateFrom.rotateX ? rotateFrom.rotateX.rotateX : '0deg', rotateTo.rotateX ? rotateTo.rotateX.rotateX : '0deg']
      })
    });
  }

  if (rotateFrom.rotateY || rotateTo.rotateY) {
    retVal.push({
      rotateY: interpolator.interpolate({
        inputRange: [0, 1],
        outputRange: [rotateFrom.rotateY ? rotateFrom.rotateY.rotateY : '0deg', rotateTo.rotateY ? rotateTo.rotateY.rotateY : '0deg']
      })
    });
  }

  if (retVal.length === 0) return {};
  var transform = [];
  retVal.forEach(function (r) {
    return transform.push(r);
  });
  return {
    nativeAnimationStyles: {
      transform: transform
    }
  };
};

exports.getRotationInterpolator = getRotationInterpolator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdldFJvdGF0aW9uSW50ZXJwb2xhdG9yLmpzIl0sIm5hbWVzIjpbImdldFJvdGF0aW9uSW50ZXJwb2xhdG9yIiwic3BlYyIsImZyb21TdHlsZSIsImZyb20iLCJzdHlsZSIsInRvU3R5bGUiLCJ0byIsInRyYW5zZm9ybSIsInJvdGF0ZUZyb20iLCJyb3RhdGVUbyIsInJldFZhbCIsImludGVycG9sYXRvciIsImdldEludGVycG9sYXRpb24iLCJyb3RhdGUiLCJwdXNoIiwiaW50ZXJwb2xhdGUiLCJpbnB1dFJhbmdlIiwib3V0cHV0UmFuZ2UiLCJyb3RhdGVYIiwicm90YXRlWSIsImxlbmd0aCIsImZvckVhY2giLCJyIiwibmF0aXZlQW5pbWF0aW9uU3R5bGVzIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOztBQUNBOztBQUNBOztBQUVPLElBQU1BLHVCQUF1QixHQUFHLFNBQTFCQSx1QkFBMEIsQ0FBQ0MsSUFBRCxFQUF3RDtBQUM3RixNQUFNQyxTQUFTLEdBQUdELElBQUksQ0FBQ0UsSUFBTCxDQUFVQyxLQUE1QjtBQUNBLE1BQU1DLE9BQU8sR0FBR0osSUFBSSxDQUFDSyxFQUFMLENBQVFGLEtBQXhCO0FBRUEsTUFBSSxDQUFDLENBQUNGLFNBQUQsSUFBYyxDQUFDQSxTQUFTLENBQUNLLFNBQTFCLE1BQ0UsQ0FBQ0YsT0FBRCxJQUFZLENBQUNBLE9BQU8sQ0FBQ0UsU0FEdkIsQ0FBSixFQUN1QyxPQUFPLEVBQVA7QUFFdkMsTUFBTUMsVUFBVSxHQUFHLGlDQUFxQk4sU0FBckIsQ0FBbkI7QUFDQSxNQUFNTyxRQUFRLEdBQUcsaUNBQXFCSixPQUFyQixDQUFqQjtBQUVBLE1BQUlHLFVBQVUsS0FBSyxFQUFmLElBQXFCQyxRQUFRLEtBQUssRUFBdEMsRUFBMEMsT0FBTyxFQUFQO0FBRTFDLE1BQU1DLE1BQU0sR0FBRyxFQUFmO0FBQ0EsTUFBTUMsWUFBWSxHQUFHVixJQUFJLENBQUNXLGdCQUFMLENBQXNCLElBQXRCLENBQXJCOztBQUVBLE1BQUlKLFVBQVUsQ0FBQ0ssTUFBWCxJQUFxQkosUUFBUSxDQUFDSSxNQUFsQyxFQUEwQztBQUN4Q0gsSUFBQUEsTUFBTSxDQUFDSSxJQUFQLENBQVk7QUFBRUQsTUFBQUEsTUFBTSxFQUFFRixZQUFZLENBQUNJLFdBQWIsQ0FBeUI7QUFDN0NDLFFBQUFBLFVBQVUsRUFBRSxDQUFDLENBQUQsRUFBSSxDQUFKLENBRGlDO0FBRTdDQyxRQUFBQSxXQUFXLEVBQUUsQ0FDVlQsVUFBVSxDQUFDSyxNQUFYLEdBQW9CTCxVQUFVLENBQUNLLE1BQVgsQ0FBa0JBLE1BQXRDLEdBQStDLE1BRHJDLEVBRVZKLFFBQVEsQ0FBQ0ksTUFBVCxHQUFrQkosUUFBUSxDQUFDSSxNQUFULENBQWdCQSxNQUFsQyxHQUEyQyxNQUZqQztBQUZnQyxPQUF6QjtBQUFWLEtBQVo7QUFNRDs7QUFFRCxNQUFJTCxVQUFVLENBQUNVLE9BQVgsSUFBc0JULFFBQVEsQ0FBQ1MsT0FBbkMsRUFBNEM7QUFDMUNSLElBQUFBLE1BQU0sQ0FBQ0ksSUFBUCxDQUFZO0FBQUVJLE1BQUFBLE9BQU8sRUFBRVAsWUFBWSxDQUFDSSxXQUFiLENBQXlCO0FBQzlDQyxRQUFBQSxVQUFVLEVBQUUsQ0FBQyxDQUFELEVBQUksQ0FBSixDQURrQztBQUU5Q0MsUUFBQUEsV0FBVyxFQUFFLENBQUNULFVBQVUsQ0FBQ1UsT0FBWCxHQUFxQlYsVUFBVSxDQUFDVSxPQUFYLENBQW1CQSxPQUF4QyxHQUFrRCxNQUFuRCxFQUNYVCxRQUFRLENBQUNTLE9BQVQsR0FBbUJULFFBQVEsQ0FBQ1MsT0FBVCxDQUFpQkEsT0FBcEMsR0FBOEMsTUFEbkM7QUFGaUMsT0FBekI7QUFBWCxLQUFaO0FBS0Q7O0FBRUQsTUFBSVYsVUFBVSxDQUFDVyxPQUFYLElBQXNCVixRQUFRLENBQUNVLE9BQW5DLEVBQTRDO0FBQzFDVCxJQUFBQSxNQUFNLENBQUNJLElBQVAsQ0FBWTtBQUFFSyxNQUFBQSxPQUFPLEVBQUVSLFlBQVksQ0FBQ0ksV0FBYixDQUF5QjtBQUM5Q0MsUUFBQUEsVUFBVSxFQUFFLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FEa0M7QUFFOUNDLFFBQUFBLFdBQVcsRUFBRSxDQUFDVCxVQUFVLENBQUNXLE9BQVgsR0FBcUJYLFVBQVUsQ0FBQ1csT0FBWCxDQUFtQkEsT0FBeEMsR0FBa0QsTUFBbkQsRUFDWFYsUUFBUSxDQUFDVSxPQUFULEdBQW1CVixRQUFRLENBQUNVLE9BQVQsQ0FBaUJBLE9BQXBDLEdBQThDLE1BRG5DO0FBRmlDLE9BQXpCO0FBQVgsS0FBWjtBQUtEOztBQUVELE1BQUlULE1BQU0sQ0FBQ1UsTUFBUCxLQUFrQixDQUF0QixFQUF5QixPQUFPLEVBQVA7QUFDekIsTUFBTWIsU0FBUyxHQUFHLEVBQWxCO0FBQ0FHLEVBQUFBLE1BQU0sQ0FBQ1csT0FBUCxDQUFlLFVBQUFDLENBQUM7QUFBQSxXQUFJZixTQUFTLENBQUNPLElBQVYsQ0FBZVEsQ0FBZixDQUFKO0FBQUEsR0FBaEI7QUFDQSxTQUFPO0FBQUVDLElBQUFBLHFCQUFxQixFQUFFO0FBQUVoQixNQUFBQSxTQUFTLEVBQVRBO0FBQUY7QUFBekIsR0FBUDtBQUNELENBNUNNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBJbnRlcnBvbGF0b3JTcGVjaWZpY2F0aW9uIH0gZnJvbSAnLi4vVHlwZXMvSW50ZXJwb2xhdG9yU3BlY2lmaWNhdGlvbic7XG5pbXBvcnQgeyBnZXRSb3RhdGlvbkZyb21TdHlsZSB9IGZyb20gJy4uL1V0aWxzJztcblxuZXhwb3J0IGNvbnN0IGdldFJvdGF0aW9uSW50ZXJwb2xhdG9yID0gKHNwZWM6IEludGVycG9sYXRvclNwZWNpZmljYXRpb24pOiBTdHlsZVNoZWV0LlN0eWxlcyA9PiB7XG4gIGNvbnN0IGZyb21TdHlsZSA9IHNwZWMuZnJvbS5zdHlsZTtcbiAgY29uc3QgdG9TdHlsZSA9IHNwZWMudG8uc3R5bGU7XG5cbiAgaWYgKCghZnJvbVN0eWxlIHx8ICFmcm9tU3R5bGUudHJhbnNmb3JtKVxuICAgICYmICghdG9TdHlsZSB8fCAhdG9TdHlsZS50cmFuc2Zvcm0pKSByZXR1cm4ge307XG5cbiAgY29uc3Qgcm90YXRlRnJvbSA9IGdldFJvdGF0aW9uRnJvbVN0eWxlKGZyb21TdHlsZSk7XG4gIGNvbnN0IHJvdGF0ZVRvID0gZ2V0Um90YXRpb25Gcm9tU3R5bGUodG9TdHlsZSk7XG5cbiAgaWYgKHJvdGF0ZUZyb20gPT09IHt9ICYmIHJvdGF0ZVRvID09PSB7fSkgcmV0dXJuIHt9O1xuXG4gIGNvbnN0IHJldFZhbCA9IFtdO1xuICBjb25zdCBpbnRlcnBvbGF0b3IgPSBzcGVjLmdldEludGVycG9sYXRpb24odHJ1ZSk7XG5cbiAgaWYgKHJvdGF0ZUZyb20ucm90YXRlIHx8IHJvdGF0ZVRvLnJvdGF0ZSkge1xuICAgIHJldFZhbC5wdXNoKHsgcm90YXRlOiBpbnRlcnBvbGF0b3IuaW50ZXJwb2xhdGUoe1xuICAgICAgaW5wdXRSYW5nZTogWzAsIDFdLFxuICAgICAgb3V0cHV0UmFuZ2U6IFtcbiAgICAgICAgKHJvdGF0ZUZyb20ucm90YXRlID8gcm90YXRlRnJvbS5yb3RhdGUucm90YXRlIDogJzBkZWcnKSxcbiAgICAgICAgKHJvdGF0ZVRvLnJvdGF0ZSA/IHJvdGF0ZVRvLnJvdGF0ZS5yb3RhdGUgOiAnMGRlZycpXSxcbiAgICB9KSB9KTtcbiAgfVxuXG4gIGlmIChyb3RhdGVGcm9tLnJvdGF0ZVggfHwgcm90YXRlVG8ucm90YXRlWCkge1xuICAgIHJldFZhbC5wdXNoKHsgcm90YXRlWDogaW50ZXJwb2xhdG9yLmludGVycG9sYXRlKHtcbiAgICAgIGlucHV0UmFuZ2U6IFswLCAxXSxcbiAgICAgIG91dHB1dFJhbmdlOiBbcm90YXRlRnJvbS5yb3RhdGVYID8gcm90YXRlRnJvbS5yb3RhdGVYLnJvdGF0ZVggOiAnMGRlZycsXG4gICAgICAgIHJvdGF0ZVRvLnJvdGF0ZVggPyByb3RhdGVUby5yb3RhdGVYLnJvdGF0ZVggOiAnMGRlZyddLFxuICAgIH0pIH0pO1xuICB9XG5cbiAgaWYgKHJvdGF0ZUZyb20ucm90YXRlWSB8fCByb3RhdGVUby5yb3RhdGVZKSB7XG4gICAgcmV0VmFsLnB1c2goeyByb3RhdGVZOiBpbnRlcnBvbGF0b3IuaW50ZXJwb2xhdGUoe1xuICAgICAgaW5wdXRSYW5nZTogWzAsIDFdLFxuICAgICAgb3V0cHV0UmFuZ2U6IFtyb3RhdGVGcm9tLnJvdGF0ZVkgPyByb3RhdGVGcm9tLnJvdGF0ZVkucm90YXRlWSA6ICcwZGVnJyxcbiAgICAgICAgcm90YXRlVG8ucm90YXRlWSA/IHJvdGF0ZVRvLnJvdGF0ZVkucm90YXRlWSA6ICcwZGVnJ10sXG4gICAgfSkgfSk7XG4gIH1cblxuICBpZiAocmV0VmFsLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHt9O1xuICBjb25zdCB0cmFuc2Zvcm0gPSBbXTtcbiAgcmV0VmFsLmZvckVhY2gociA9PiB0cmFuc2Zvcm0ucHVzaChyKSk7XG4gIHJldHVybiB7IG5hdGl2ZUFuaW1hdGlvblN0eWxlczogeyB0cmFuc2Zvcm0gfSB9O1xufTtcbiJdfQ==