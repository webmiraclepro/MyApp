{"version":3,"sources":["StateUtils.js"],"names":["StateUtils","get","state","route","indexOf","has","push","routes","index","pop","jumpToIndex","jumpTo","back","forward","replaceAndPrune","replaced","replaceAt","preserveIndex","nextIndex","nextState","replaceAtIndex","reset","Array","compare"],"mappings":"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","sourcesContent":["import invariant from './utils/invariant';\n\n/**\n * Utilities to perform atomic operation with navigate state and routes.\n *\n * ```javascript\n * const state1 = {key: 'screen 1'};\n * const state2 = NavigationStateUtils.push(state1, {key: 'screen 2'});\n * ```\n */\nconst StateUtils = {\n  /**\n   * Gets a route by key. If the route isn't found, returns `null`.\n   */\n  get(state, key) {\n    return state.routes.find(route => route.key === key) || null;\n  },\n\n  /**\n   * Returns the first index at which a given route's key can be found in the\n   * routes of the navigation state, or -1 if it is not present.\n   */\n  indexOf(state, key) {\n    return state.routes.findIndex(route => route.key === key);\n  },\n\n  /**\n   * Returns `true` at which a given route's key can be found in the\n   * routes of the navigation state.\n   */\n  has(state, key) {\n    return !!state.routes.some(route => route.key === key);\n  },\n\n  /**\n   * Pushes a new route into the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  push(state, route) {\n    invariant(\n      StateUtils.indexOf(state, route.key) === -1,\n      'should not push route with duplicated key %s',\n      route.key\n    );\n\n    const routes = state.routes.slice();\n    routes.push(route);\n\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Pops out a route from the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  pop(state) {\n    if (state.index <= 0) {\n      // [Note]: Over-popping does not throw error. Instead, it will be no-op.\n      return state;\n    }\n    const routes = state.routes.slice(0, -1);\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by index.\n   */\n  jumpToIndex(state, index) {\n    if (index === state.index) {\n      return state;\n    }\n\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n\n    return {\n      ...state,\n      index,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by key.\n   */\n  jumpTo(state, key) {\n    const index = StateUtils.indexOf(state, key);\n    return StateUtils.jumpToIndex(state, index);\n  },\n\n  /**\n   * Sets the focused route to the previous route.\n   */\n  back(state) {\n    const index = state.index - 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Sets the focused route to the next route.\n   */\n  forward(state) {\n    const index = state.index + 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at and updates the routes array accordingly.\n   */\n  replaceAndPrune(state, key, route) {\n    const index = StateUtils.indexOf(state, key);\n    const replaced = StateUtils.replaceAtIndex(state, index, route);\n\n    return {\n      ...replaced,\n      routes: replaced.routes.slice(0, index + 1),\n    };\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at. Does not prune the routes.\n   * If preserveIndex is true then replacing the route does not cause the index\n   * to change to the index of that route.\n   */\n  replaceAt(state, key, route, preserveIndex = false) {\n    const index = StateUtils.indexOf(state, key);\n    const nextIndex = preserveIndex ? state.index : index;\n    let nextState = StateUtils.replaceAtIndex(state, index, route);\n    nextState.index = nextIndex;\n    return nextState;\n  },\n\n  /**\n   * Replace a route by a index.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at.\n   */\n  replaceAtIndex(state, index, route) {\n    invariant(\n      !!state.routes[index],\n      'invalid index %s for replacing route %s',\n      index,\n      route.key\n    );\n\n    if (state.routes[index] === route && index === state.index) {\n      return state;\n    }\n\n    const routes = state.routes.slice();\n    routes[index] = route;\n\n    return {\n      ...state,\n      index,\n      routes,\n    };\n  },\n\n  /**\n   * Resets all routes.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at if the param `index` isn't provided.\n   */\n  reset(state, routes, index) {\n    invariant(\n      routes.length && Array.isArray(routes),\n      'invalid routes to replace'\n    );\n\n    const nextIndex = index === undefined ? routes.length - 1 : index;\n\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      const compare = (route, ii) => routes[ii] === route;\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n\n    return {\n      ...state,\n      index: nextIndex,\n      routes,\n    };\n  },\n};\n\nexport default StateUtils;\n"]}