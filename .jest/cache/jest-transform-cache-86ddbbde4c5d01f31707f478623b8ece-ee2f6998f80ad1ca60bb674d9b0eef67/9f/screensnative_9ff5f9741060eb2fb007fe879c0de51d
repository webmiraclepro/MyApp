4ba049620b3ad143043c4602d6573823
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useScreens = useScreens;
exports.screensEnabled = screensEnabled;
exports.ScreenContainer = exports.Screen = exports.NativeScreenContainer = exports.NativeScreen = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _ReactNativeVersion = require("react-native/Libraries/Core/ReactNativeVersion");

var USE_SCREENS = false;

var getViewManagerConfigCompat = function getViewManagerConfigCompat(name) {
  return typeof _reactNative.UIManager.getViewManagerConfig !== 'undefined' ? _reactNative.UIManager.getViewManagerConfig(name) : _reactNative.UIManager[name];
};

function useScreens() {
  var shouldUseScreens = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  USE_SCREENS = shouldUseScreens;

  if (USE_SCREENS && !getViewManagerConfigCompat('RNSScreen')) {
    console.error("Screen native module hasn't been linked. Please check the react-native-screens README for more details");
  }
}

function screensEnabled() {
  return USE_SCREENS;
}

var NativeScreen = (0, _reactNative.requireNativeComponent)('RNSScreen', null);
exports.NativeScreen = NativeScreen;

var AnimatedNativeScreen = _reactNative.Animated.createAnimatedComponent(NativeScreen);

var NativeScreenContainer = (0, _reactNative.requireNativeComponent)('RNSScreenContainer', null);
exports.NativeScreenContainer = NativeScreenContainer;

var Screen = function (_React$Component) {
  (0, _inherits2.default)(Screen, _React$Component);

  function Screen() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Screen);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Screen)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _this.setRef = function (ref) {
      _this._ref = ref;
      _this.props.onComponentRef && _this.props.onComponentRef(ref);
    };

    return _this;
  }

  (0, _createClass2.default)(Screen, [{
    key: "setNativeProps",
    value: function setNativeProps(props) {
      this._ref.setNativeProps(props);
    }
  }, {
    key: "render",
    value: function render() {
      if (!USE_SCREENS) {
        var _this$props = this.props,
            active = _this$props.active,
            onComponentRef = _this$props.onComponentRef,
            props = (0, _objectWithoutProperties2.default)(_this$props, ["active", "onComponentRef"]);
        return _react.default.createElement(_reactNative.Animated.View, (0, _extends2.default)({}, props, {
          ref: this.setRef
        }));
      } else if (_ReactNativeVersion.version.minor >= 57) {
        return _react.default.createElement(AnimatedNativeScreen, this.props);
      } else {
        var _this$props2 = this.props,
            style = _this$props2.style,
            children = _this$props2.children,
            rest = (0, _objectWithoutProperties2.default)(_this$props2, ["style", "children"]);
        return _react.default.createElement(AnimatedNativeScreen, (0, _extends2.default)({}, rest, {
          ref: this.setRef,
          style: _reactNative.StyleSheet.absoluteFill
        }), _react.default.createElement(_reactNative.Animated.View, {
          style: style
        }, children));
      }
    }
  }]);
  return Screen;
}(_react.default.Component);

exports.Screen = Screen;

var ScreenContainer = function (_React$Component2) {
  (0, _inherits2.default)(ScreenContainer, _React$Component2);

  function ScreenContainer() {
    (0, _classCallCheck2.default)(this, ScreenContainer);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(ScreenContainer).apply(this, arguments));
  }

  (0, _createClass2.default)(ScreenContainer, [{
    key: "render",
    value: function render() {
      if (!USE_SCREENS) {
        return _react.default.createElement(_reactNative.View, this.props);
      } else {
        return _react.default.createElement(NativeScreenContainer, this.props);
      }
    }
  }]);
  return ScreenContainer;
}(_react.default.Component);

exports.ScreenContainer = ScreenContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmVlbnMubmF0aXZlLmpzIl0sIm5hbWVzIjpbIlVTRV9TQ1JFRU5TIiwiZ2V0Vmlld01hbmFnZXJDb25maWdDb21wYXQiLCJuYW1lIiwiVUlNYW5hZ2VyIiwiZ2V0Vmlld01hbmFnZXJDb25maWciLCJ1c2VTY3JlZW5zIiwic2hvdWxkVXNlU2NyZWVucyIsImNvbnNvbGUiLCJlcnJvciIsInNjcmVlbnNFbmFibGVkIiwiTmF0aXZlU2NyZWVuIiwiQW5pbWF0ZWROYXRpdmVTY3JlZW4iLCJBbmltYXRlZCIsImNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50IiwiTmF0aXZlU2NyZWVuQ29udGFpbmVyIiwiU2NyZWVuIiwic2V0UmVmIiwicmVmIiwiX3JlZiIsInByb3BzIiwib25Db21wb25lbnRSZWYiLCJzZXROYXRpdmVQcm9wcyIsImFjdGl2ZSIsInZlcnNpb24iLCJtaW5vciIsInN0eWxlIiwiY2hpbGRyZW4iLCJyZXN0IiwiU3R5bGVTaGVldCIsImFic29sdXRlRmlsbCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiU2NyZWVuQ29udGFpbmVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQU9BOztBQUVBLElBQUlBLFdBQVcsR0FBRyxLQUFsQjs7QUFJQSxJQUFNQywwQkFBMEIsR0FBRyxTQUE3QkEsMEJBQTZCLENBQUFDLElBQUk7QUFBQSxTQUNyQyxPQUFPQyx1QkFBVUMsb0JBQWpCLEtBQTBDLFdBQTFDLEdBQ0lELHVCQUFVQyxvQkFBVixDQUErQkYsSUFBL0IsQ0FESixHQUVJQyx1QkFBVUQsSUFBVixDQUhpQztBQUFBLENBQXZDOztBQUtPLFNBQVNHLFVBQVQsR0FBNkM7QUFBQSxNQUF6QkMsZ0JBQXlCLHVFQUFOLElBQU07QUFDbEROLEVBQUFBLFdBQVcsR0FBR00sZ0JBQWQ7O0FBQ0EsTUFBSU4sV0FBVyxJQUFJLENBQUNDLDBCQUEwQixDQUFDLFdBQUQsQ0FBOUMsRUFBNkQ7QUFDM0RNLElBQUFBLE9BQU8sQ0FBQ0MsS0FBUjtBQUdEO0FBQ0Y7O0FBRU0sU0FBU0MsY0FBVCxHQUEwQjtBQUMvQixTQUFPVCxXQUFQO0FBQ0Q7O0FBRU0sSUFBTVUsWUFBWSxHQUFHLHlDQUF1QixXQUF2QixFQUFvQyxJQUFwQyxDQUFyQjs7O0FBRVAsSUFBTUMsb0JBQW9CLEdBQUdDLHNCQUFTQyx1QkFBVCxDQUFpQ0gsWUFBakMsQ0FBN0I7O0FBRU8sSUFBTUkscUJBQXFCLEdBQUcseUNBQ25DLG9CQURtQyxFQUVuQyxJQUZtQyxDQUE5Qjs7O0lBS01DLE07Ozs7Ozs7Ozs7Ozs7Ozs7VUFJWEMsTSxHQUFTLFVBQUFDLEdBQUcsRUFBSTtBQUNkLFlBQUtDLElBQUwsR0FBWUQsR0FBWjtBQUNBLFlBQUtFLEtBQUwsQ0FBV0MsY0FBWCxJQUE2QixNQUFLRCxLQUFMLENBQVdDLGNBQVgsQ0FBMEJILEdBQTFCLENBQTdCO0FBQ0QsSzs7Ozs7OzttQ0FOY0UsSyxFQUFPO0FBQ3BCLFdBQUtELElBQUwsQ0FBVUcsY0FBVixDQUF5QkYsS0FBekI7QUFDRDs7OzZCQUtRO0FBQ1AsVUFBSSxDQUFDbkIsV0FBTCxFQUFrQjtBQUFBLDBCQU02QixLQUFLbUIsS0FObEM7QUFBQSxZQU1SRyxNQU5RLGVBTVJBLE1BTlE7QUFBQSxZQU1BRixjQU5BLGVBTUFBLGNBTkE7QUFBQSxZQU1tQkQsS0FObkI7QUFRaEIsZUFBTyw2QkFBQyxxQkFBRCxDQUFVLElBQVYsNkJBQW1CQSxLQUFuQjtBQUEwQixVQUFBLEdBQUcsRUFBRSxLQUFLSDtBQUFwQyxXQUFQO0FBQ0QsT0FURCxNQVNPLElBQUlPLDRCQUFRQyxLQUFSLElBQWlCLEVBQXJCLEVBQXlCO0FBQzlCLGVBQU8sNkJBQUMsb0JBQUQsRUFBMEIsS0FBS0wsS0FBL0IsQ0FBUDtBQUNELE9BRk0sTUFFQTtBQUFBLDJCQUtnQyxLQUFLQSxLQUxyQztBQUFBLFlBS0dNLEtBTEgsZ0JBS0dBLEtBTEg7QUFBQSxZQUtVQyxRQUxWLGdCQUtVQSxRQUxWO0FBQUEsWUFLdUJDLElBTHZCO0FBTUwsZUFDRSw2QkFBQyxvQkFBRCw2QkFDTUEsSUFETjtBQUVFLFVBQUEsR0FBRyxFQUFFLEtBQUtYLE1BRlo7QUFHRSxVQUFBLEtBQUssRUFBRVksd0JBQVdDO0FBSHBCLFlBSUUsNkJBQUMscUJBQUQsQ0FBVSxJQUFWO0FBQWUsVUFBQSxLQUFLLEVBQUVKO0FBQXRCLFdBQThCQyxRQUE5QixDQUpGLENBREY7QUFRRDtBQUNGOzs7RUFuQ3lCSSxlQUFNQyxTOzs7O0lBc0NyQkMsZTs7Ozs7Ozs7Ozs2QkFDRjtBQUNQLFVBQUksQ0FBQ2hDLFdBQUwsRUFBa0I7QUFDaEIsZUFBTyw2QkFBQyxpQkFBRCxFQUFVLEtBQUttQixLQUFmLENBQVA7QUFDRCxPQUZELE1BRU87QUFDTCxlQUFPLDZCQUFDLHFCQUFELEVBQTJCLEtBQUtBLEtBQWhDLENBQVA7QUFDRDtBQUNGOzs7RUFQa0NXLGVBQU1DLFMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgQW5pbWF0ZWQsXG4gIHJlcXVpcmVOYXRpdmVDb21wb25lbnQsXG4gIFZpZXcsXG4gIFVJTWFuYWdlcixcbiAgU3R5bGVTaGVldCxcbn0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tICdyZWFjdC1uYXRpdmUvTGlicmFyaWVzL0NvcmUvUmVhY3ROYXRpdmVWZXJzaW9uJztcblxubGV0IFVTRV9TQ1JFRU5TID0gZmFsc2U7XG5cbi8vIFVJTWFuYWdlcltgJHttb2R1bGVOYW1lfWBdIGlzIGRlcHJlY2F0ZWQgaW4gUk4gMC41OCBhbmQgYGdldFZpZXdNYW5hZ2VyQ29uZmlnYCBpcyBhZGRlZC5cbi8vIFdlIGNhbiByZW1vdmUgdGhpcyB3aGVuIHdlIGRyb3Agc3VwcG9ydCBmb3IgUk4gPCAwLjU4LlxuY29uc3QgZ2V0Vmlld01hbmFnZXJDb25maWdDb21wYXQgPSBuYW1lID0+XG4gIHR5cGVvZiBVSU1hbmFnZXIuZ2V0Vmlld01hbmFnZXJDb25maWcgIT09ICd1bmRlZmluZWQnXG4gICAgPyBVSU1hbmFnZXIuZ2V0Vmlld01hbmFnZXJDb25maWcobmFtZSlcbiAgICA6IFVJTWFuYWdlcltuYW1lXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVNjcmVlbnMoc2hvdWxkVXNlU2NyZWVucyA9IHRydWUpIHtcbiAgVVNFX1NDUkVFTlMgPSBzaG91bGRVc2VTY3JlZW5zO1xuICBpZiAoVVNFX1NDUkVFTlMgJiYgIWdldFZpZXdNYW5hZ2VyQ29uZmlnQ29tcGF0KCdSTlNTY3JlZW4nKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICBgU2NyZWVuIG5hdGl2ZSBtb2R1bGUgaGFzbid0IGJlZW4gbGlua2VkLiBQbGVhc2UgY2hlY2sgdGhlIHJlYWN0LW5hdGl2ZS1zY3JlZW5zIFJFQURNRSBmb3IgbW9yZSBkZXRhaWxzYFxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNjcmVlbnNFbmFibGVkKCkge1xuICByZXR1cm4gVVNFX1NDUkVFTlM7XG59XG5cbmV4cG9ydCBjb25zdCBOYXRpdmVTY3JlZW4gPSByZXF1aXJlTmF0aXZlQ29tcG9uZW50KCdSTlNTY3JlZW4nLCBudWxsKTtcblxuY29uc3QgQW5pbWF0ZWROYXRpdmVTY3JlZW4gPSBBbmltYXRlZC5jcmVhdGVBbmltYXRlZENvbXBvbmVudChOYXRpdmVTY3JlZW4pO1xuXG5leHBvcnQgY29uc3QgTmF0aXZlU2NyZWVuQ29udGFpbmVyID0gcmVxdWlyZU5hdGl2ZUNvbXBvbmVudChcbiAgJ1JOU1NjcmVlbkNvbnRhaW5lcicsXG4gIG51bGxcbik7XG5cbmV4cG9ydCBjbGFzcyBTY3JlZW4gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzZXROYXRpdmVQcm9wcyhwcm9wcykge1xuICAgIHRoaXMuX3JlZi5zZXROYXRpdmVQcm9wcyhwcm9wcyk7XG4gIH1cbiAgc2V0UmVmID0gcmVmID0+IHtcbiAgICB0aGlzLl9yZWYgPSByZWY7XG4gICAgdGhpcy5wcm9wcy5vbkNvbXBvbmVudFJlZiAmJiB0aGlzLnByb3BzLm9uQ29tcG9uZW50UmVmKHJlZik7XG4gIH07XG4gIHJlbmRlcigpIHtcbiAgICBpZiAoIVVTRV9TQ1JFRU5TKSB7XG4gICAgICAvLyBGaWx0ZXIgb3V0IGFjdGl2ZSBwcm9wIGluIHRoaXMgY2FzZSBiZWNhdXNlIGl0IGlzIHVudXNlZCBhbmRcbiAgICAgIC8vIGNhbiBjYXVzZSBwcm9ibGVtcyBkZXBlbmRpbmcgb24gcmVhY3QtbmF0aXZlIHZlcnNpb246XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtbmF2aWdhdGlvbi9yZWFjdC1uYXZpZ2F0aW9uL2lzc3Vlcy80ODg2XG5cbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG4gICAgICBjb25zdCB7IGFjdGl2ZSwgb25Db21wb25lbnRSZWYsIC4uLnByb3BzIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICByZXR1cm4gPEFuaW1hdGVkLlZpZXcgey4uLnByb3BzfSByZWY9e3RoaXMuc2V0UmVmfSAvPjtcbiAgICB9IGVsc2UgaWYgKHZlcnNpb24ubWlub3IgPj0gNTcpIHtcbiAgICAgIHJldHVybiA8QW5pbWF0ZWROYXRpdmVTY3JlZW4gey4uLnRoaXMucHJvcHN9IC8+O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPbiBSTiB2ZXJzaW9uIGJlbG93IDAuNTcgd2UgbmVlZCB0byB3cmFwIHNjcmVlbidzIGNoaWxkcmVuIHdpdGggYW5cbiAgICAgIC8vIGFkZGl0aW9uYWwgVmlldyBiZWNhdXNlIG9mIGEgYnVnIGZpeGVkIGluIHJlYWN0LW5hdGl2ZS9wdWxsLzIwNjU4IHdoaWNoXG4gICAgICAvLyB3YXMgcHJldmVudGluZyBhIHZpZXcgZnJvbSBoYXZpbmcgYm90aCBzdHlsZXMgYW5kIHNvbWUgb3RoZXIgcHJvcHMgYmVpbmdcbiAgICAgIC8vIFwiYW5pbWF0ZWRcIiAodXNpbmcgQW5pbWF0ZWQgbmF0aXZlIGRyaXZlcilcbiAgICAgIGNvbnN0IHsgc3R5bGUsIGNoaWxkcmVuLCAuLi5yZXN0IH0gPSB0aGlzLnByb3BzO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEFuaW1hdGVkTmF0aXZlU2NyZWVuXG4gICAgICAgICAgey4uLnJlc3R9XG4gICAgICAgICAgcmVmPXt0aGlzLnNldFJlZn1cbiAgICAgICAgICBzdHlsZT17U3R5bGVTaGVldC5hYnNvbHV0ZUZpbGx9PlxuICAgICAgICAgIDxBbmltYXRlZC5WaWV3IHN0eWxlPXtzdHlsZX0+e2NoaWxkcmVufTwvQW5pbWF0ZWQuVmlldz5cbiAgICAgICAgPC9BbmltYXRlZE5hdGl2ZVNjcmVlbj5cbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTY3JlZW5Db250YWluZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgaWYgKCFVU0VfU0NSRUVOUykge1xuICAgICAgcmV0dXJuIDxWaWV3IHsuLi50aGlzLnByb3BzfSAvPjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDxOYXRpdmVTY3JlZW5Db250YWluZXIgey4uLnRoaXMucHJvcHN9IC8+O1xuICAgIH1cbiAgfVxufVxuIl19