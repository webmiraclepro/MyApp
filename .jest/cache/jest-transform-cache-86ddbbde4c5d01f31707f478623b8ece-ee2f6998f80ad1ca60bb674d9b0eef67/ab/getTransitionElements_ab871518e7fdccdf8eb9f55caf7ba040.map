{"version":3,"sources":["getTransitionElements.js"],"names":["getTransitionElements","transitionElements","transitionContext","map","item","idx","routeDirection","getDirectionForRoute","name","route","element","React","Children","only","reactElement","props","children","key","toString","transitionStyle","getComponentStyle","RouteDirection","from","delayCountFrom","delayCountTo","delayIndexFrom","delayIndexTo","style","styles","transitionElement","__index","index","createElement","type","comp","component","nativeStyles","delay","delayFromFactor","delayToFactor","delayCount","delayIndex","getIndex","progress","getTransitionProgress","routes","getRoutes","getCalculatedTransitionStyle","length","resolvedMetrics","metrics","left","x","top","y","width","height","singleRoute","transitionFunction","getTransitionFunction","start","Constants","TRANSITION_PROGRESS_START","end","TRANSITION_PROGRESS_END","distance","delayStep","to","interpolatedProgress","interpolate","inputRange","outputRange","transitionSpecification","boundingbox","boundingBoxMetrics","direction","dimensions","Dimensions","get","getTransition","transition","Function","appear","disappear","StyleSheet","create","position"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Dimensions, StyleSheet } from 'react-native';\n\nimport { createAnimatedWrapper, getResolvedMetrics } from '../Utils';\nimport { getTransitionType } from './TransitionTypes';\nimport * as Constants from '../TransitionConstants';\nimport TransitionItem from '../TransitionItem';\n\nimport {\n  TransitionContext,\n  RouteDirection,\n  TransitionSpecification,\n} from '../Types';\n\n\nconst getTransitionElements = (transitionElements: Array<TransitionItem>,\n  transitionContext: TransitionContext) => transitionElements.map((item, idx) => {\n  const routeDirection = transitionContext.getDirectionForRoute(item.name, item.route);\n  let element = React.Children.only(item.reactElement.props.children);\n  const key = `ti-${idx.toString()}`;\n\n  const transitionStyle = getComponentStyle(\n    item, routeDirection === RouteDirection.from\n      ? transitionContext.delayCountFrom + 1 : transitionContext.delayCountTo + 1,\n    routeDirection === RouteDirection.from\n      ? transitionContext.delayIndexFrom : transitionContext.delayIndexTo,\n    transitionContext,\n  );\n\n  const style = [transitionStyle, styles.transitionElement];\n  const props = { ...element.props, __index: item.index };\n  element = React.createElement(element.type, { ...props, key });\n  const comp = createAnimatedWrapper({ component: element, nativeStyles: style });\n\n  if (item.delay) {\n    if (routeDirection === RouteDirection.from) {\n      transitionContext.delayIndexFrom += transitionContext.delayFromFactor;\n    } else {\n      transitionContext.delayIndexTo += transitionContext.delayToFactor;\n    }\n  }\n  return comp;\n});\n\nconst getComponentStyle = (\n  item: TransitionItem, delayCount: number, delayIndex: number,\n  transitionContext: TransitionContext,\n) => {\n  const index = transitionContext.getIndex();\n  const routeDirection = transitionContext.getDirectionForRoute(item.name, item.route);\n  const progress = transitionContext.getTransitionProgress();\n  const routes = transitionContext.getRoutes();\n\n  const transitionStyle = progress ? getCalculatedTransitionStyle(\n    item,\n    delayCount,\n    delayIndex,\n    index,\n    routeDirection,\n    progress,\n    routes.length === 1,\n  ) : {};\n\n  const resolvedMetrics = getResolvedMetrics(item, item.metrics);\n  return {\n    left: resolvedMetrics.x,\n    top: resolvedMetrics.y,\n    width: resolvedMetrics.width,\n    height: resolvedMetrics.height,\n    ...transitionStyle,\n  };\n};\n\nexport const getCalculatedTransitionStyle = (\n  item,\n  delayCount,\n  delayIndex,\n  index,\n  routeDirection,\n  progress,\n  singleRoute,\n) => {\n  const transitionFunction = getTransitionFunction(item, routeDirection);\n  if (transitionFunction) {\n    // Calculate start/end to handle delayed transitions\n    let start = Constants.TRANSITION_PROGRESS_START;\n    let end = Constants.TRANSITION_PROGRESS_END;\n\n    const distance = !singleRoute\n      ? (1.0 - (Constants.TRANSITION_PROGRESS_START\n      + (1.0 - Constants.TRANSITION_PROGRESS_END))) * 0.5\n      : (1.0 - (Constants.TRANSITION_PROGRESS_START\n      + (1.0 - Constants.TRANSITION_PROGRESS_END)));\n\n    if (item.delay) {\n      // Start/stop in delay window\n      const delayStep = distance / delayCount;\n      if (routeDirection === RouteDirection.from) {\n        start += (delayStep * delayIndex);\n      } else {\n        end -= (delayStep * delayIndex);\n      }\n    } else if (!singleRoute) {\n      // Start/stop first/last half of transition\n      if (routeDirection === RouteDirection.to) {\n        start += distance;\n      } else {\n        end -= distance;\n      }\n    }\n\n    // console.log(item.name, delayIndex, routeDirection, delayCount, distance, start, end);\n\n    // Create progress interpolation\n    const interpolatedProgress = progress.interpolate({\n      inputRange: [index - 1, index, index + 1],\n      outputRange: [0, 1, 0],\n    });\n\n    const transitionSpecification: TransitionSpecification = {\n      progress: interpolatedProgress,\n      name: item.name,\n      route: item.route,\n      metrics: item.metrics,\n      boundingbox: item.boundingBoxMetrics,\n      direction: routeDirection,\n      dimensions: Dimensions.get('window'),\n      start,\n      end,\n    };\n\n    return transitionFunction(transitionSpecification);\n  }\n\n  return {};\n};\n\nconst getTransitionFunction = (item: TransitionItem, routeDirection: RouteDirection) => {\n  const getTransition = (transition: string | Function) => {\n    if (transition instanceof Function) { return transition; }\n    return getTransitionType(transition);\n  };\n\n  if (routeDirection === RouteDirection.to && item.appear) {\n    return getTransition(item.appear);\n  } if (routeDirection === RouteDirection.from && item.disappear) {\n    return getTransition(item.disappear);\n  } if (item.appear) {\n    return getTransition(item.appear);\n  }\n  return null;\n};\n\nconst styles = StyleSheet.create({\n  transitionElement: {\n    position: 'absolute',\n  },\n});\n\nexport { getTransitionElements };\n"]}