f26398cb1545263b5016fbbf62544ccf
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getInset = getInset;
exports.getStatusBarHeight = getStatusBarHeight;
exports.withSafeArea = exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _hoistNonReactStatics = _interopRequireDefault(require("hoist-non-react-statics"));

var _withOrientation = _interopRequireDefault(require("./withOrientation"));

var X_WIDTH = 375;
var X_HEIGHT = 812;
var XSMAX_WIDTH = 414;
var XSMAX_HEIGHT = 896;
var PAD_WIDTH = 768;
var PAD_HEIGHT = 1024;
var IPADPRO11_WIDTH = 834;
var IPADPRO11_HEIGHT = 1194;
var IPADPRO129_HEIGHT = 1024;
var IPADPRO129_WIDTH = 1366;

var getResolvedDimensions = function getResolvedDimensions() {
  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      width = _Dimensions$get.width,
      height = _Dimensions$get.height;

  if (width === 0 && height === 0) return _reactNative.Dimensions.get('screen');
  return {
    width: width,
    height: height
  };
};

var _getResolvedDimension = getResolvedDimensions(),
    D_HEIGHT = _getResolvedDimension.height,
    D_WIDTH = _getResolvedDimension.width;

var _NativeModules$Platfo = _reactNative.NativeModules.PlatformConstants,
    PlatformConstants = _NativeModules$Platfo === void 0 ? {} : _NativeModules$Platfo;

var _ref = PlatformConstants.reactNativeVersion || {},
    _ref$minor = _ref.minor,
    minor = _ref$minor === void 0 ? 0 : _ref$minor;

var isIPhoneX = function () {
  if (_reactNative.Platform.OS === 'web') return false;
  return _reactNative.Platform.OS === 'ios' && (D_HEIGHT === X_HEIGHT && D_WIDTH === X_WIDTH || D_HEIGHT === X_WIDTH && D_WIDTH === X_HEIGHT) || D_HEIGHT === XSMAX_HEIGHT && D_WIDTH === XSMAX_WIDTH || D_HEIGHT === XSMAX_WIDTH && D_WIDTH === XSMAX_HEIGHT;
}();

var isNewIPadPro = function () {
  if (_reactNative.Platform.OS !== 'ios') return false;
  return D_HEIGHT === IPADPRO11_HEIGHT && D_WIDTH === IPADPRO11_WIDTH || D_HEIGHT === IPADPRO11_WIDTH && D_WIDTH === IPADPRO11_HEIGHT || D_HEIGHT === IPADPRO129_HEIGHT && D_WIDTH === IPADPRO129_WIDTH || D_HEIGHT === IPADPRO129_WIDTH && D_WIDTH === IPADPRO129_HEIGHT;
}();

var isIPad = function () {
  if (_reactNative.Platform.OS !== 'ios' || isIPhoneX) return false;

  if (D_HEIGHT > D_WIDTH && D_WIDTH < PAD_WIDTH) {
    return false;
  }

  if (D_WIDTH > D_HEIGHT && D_HEIGHT < PAD_WIDTH) {
    return false;
  }

  return true;
}();

var _customStatusBarHeight = null;
var _customStatusBarHidden = null;

var statusBarHeight = function statusBarHeight(isLandscape) {
  if (_customStatusBarHeight !== null) {
    return _customStatusBarHeight;
  }

  if (_reactNative.Platform.OS === 'android') {
    if (global.Expo) {
      return global.Expo.Constants.statusBarHeight;
    } else {
      return 0;
    }
  }

  if (isIPhoneX) {
    return isLandscape ? 0 : 44;
  }

  if (isNewIPadPro) {
    return 24;
  }

  if (isIPad) {
    return _customStatusBarHidden ? 0 : 20;
  }

  return isLandscape || _customStatusBarHidden ? 0 : 20;
};

var doubleFromPercentString = function doubleFromPercentString(percent) {
  if (!percent.includes('%')) {
    return 0;
  }

  var dbl = parseFloat(percent) / 100;
  if (isNaN(dbl)) return 0;
  return dbl;
};

var SafeView = function (_Component) {
  (0, _inherits2.default)(SafeView, _Component);

  function SafeView() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, SafeView);

    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(SafeView)).call.apply(_getPrototypeOf2, [this].concat(_args)));
    _this.state = {
      touchesTop: true,
      touchesBottom: true,
      touchesLeft: true,
      touchesRight: true,
      orientation: null,
      viewWidth: 0,
      viewHeight: 0
    };

    _this._onLayout = function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      if (!_this._isMounted) return;
      if (!_this.view) return;
      var isLandscape = _this.props.isLandscape;
      var orientation = _this.state.orientation;
      var newOrientation = isLandscape ? 'landscape' : 'portrait';

      if (orientation && orientation === newOrientation) {
        return;
      }

      var _getResolvedDimension2 = getResolvedDimensions(),
          WIDTH = _getResolvedDimension2.width,
          HEIGHT = _getResolvedDimension2.height;

      _this.view.getNode().measureInWindow(function (winX, winY, winWidth, winHeight) {
        var _this$props;

        if (!_this.view) {
          return;
        }

        var realY = winY;
        var realX = winX;

        if (realY >= HEIGHT) {
          realY = realY % HEIGHT;
        } else if (realY < 0) {
          realY = realY % HEIGHT + HEIGHT;
        }

        if (realX >= WIDTH) {
          realX = realX % WIDTH;
        } else if (realX < 0) {
          realX = realX % WIDTH + WIDTH;
        }

        var touchesTop = realY === 0;
        var touchesBottom = realY + winHeight >= HEIGHT;
        var touchesLeft = realX === 0;
        var touchesRight = realX + winWidth >= WIDTH;

        _this.setState({
          touchesTop: touchesTop,
          touchesBottom: touchesBottom,
          touchesLeft: touchesLeft,
          touchesRight: touchesRight,
          orientation: newOrientation,
          viewWidth: winWidth,
          viewHeight: winHeight
        });

        if (_this.props.onLayout) (_this$props = _this.props).onLayout.apply(_this$props, args);
      });
    };

    _this._getSafeAreaStyle = function () {
      var _this$state = _this.state,
          touchesTop = _this$state.touchesTop,
          touchesBottom = _this$state.touchesBottom,
          touchesLeft = _this$state.touchesLeft,
          touchesRight = _this$state.touchesRight;
      var _this$props2 = _this.props,
          forceInset = _this$props2.forceInset,
          isLandscape = _this$props2.isLandscape;

      var _this$_getViewStyles = _this._getViewStyles(),
          paddingTop = _this$_getViewStyles.paddingTop,
          paddingBottom = _this$_getViewStyles.paddingBottom,
          paddingLeft = _this$_getViewStyles.paddingLeft,
          paddingRight = _this$_getViewStyles.paddingRight,
          viewStyle = _this$_getViewStyles.viewStyle;

      var style = (0, _objectSpread2.default)({}, viewStyle, {
        paddingTop: touchesTop ? _this._getInset('top') : 0,
        paddingBottom: touchesBottom ? _this._getInset('bottom') : 0,
        paddingLeft: touchesLeft ? _this._getInset('left') : 0,
        paddingRight: touchesRight ? _this._getInset('right') : 0
      });

      if (forceInset) {
        Object.keys(forceInset).forEach(function (key) {
          var inset = forceInset[key];

          if (inset === 'always') {
            inset = _this._getInset(key);
          }

          if (inset === 'never') {
            inset = 0;
          }

          switch (key) {
            case 'horizontal':
              {
                style.paddingLeft = inset;
                style.paddingRight = inset;
                break;
              }

            case 'vertical':
              {
                style.paddingTop = inset;
                style.paddingBottom = inset;
                break;
              }

            case 'left':
            case 'right':
            case 'top':
            case 'bottom':
              {
                var padding = "padding" + key[0].toUpperCase() + key.slice(1);
                style[padding] = inset;
                break;
              }
          }
        });
      }

      if (style.height && typeof style.height === 'number') {
        style.height += style.paddingTop + style.paddingBottom;
      }

      if (style.width && typeof style.width === 'number') {
        style.width += style.paddingLeft + style.paddingRight;
      }

      style.paddingTop = Math.max(style.paddingTop, paddingTop);
      style.paddingBottom = Math.max(style.paddingBottom, paddingBottom);
      style.paddingLeft = Math.max(style.paddingLeft, paddingLeft);
      style.paddingRight = Math.max(style.paddingRight, paddingRight);
      return style;
    };

    _this._getViewStyles = function () {
      var viewWidth = _this.state.viewWidth;

      var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(_this.props.style || {}),
          _StyleSheet$flatten$p = _StyleSheet$flatten.padding,
          padding = _StyleSheet$flatten$p === void 0 ? 0 : _StyleSheet$flatten$p,
          _StyleSheet$flatten$p2 = _StyleSheet$flatten.paddingVertical,
          paddingVertical = _StyleSheet$flatten$p2 === void 0 ? padding : _StyleSheet$flatten$p2,
          _StyleSheet$flatten$p3 = _StyleSheet$flatten.paddingHorizontal,
          paddingHorizontal = _StyleSheet$flatten$p3 === void 0 ? padding : _StyleSheet$flatten$p3,
          _StyleSheet$flatten$p4 = _StyleSheet$flatten.paddingTop,
          paddingTop = _StyleSheet$flatten$p4 === void 0 ? paddingVertical : _StyleSheet$flatten$p4,
          _StyleSheet$flatten$p5 = _StyleSheet$flatten.paddingBottom,
          paddingBottom = _StyleSheet$flatten$p5 === void 0 ? paddingVertical : _StyleSheet$flatten$p5,
          _StyleSheet$flatten$p6 = _StyleSheet$flatten.paddingLeft,
          paddingLeft = _StyleSheet$flatten$p6 === void 0 ? paddingHorizontal : _StyleSheet$flatten$p6,
          _StyleSheet$flatten$p7 = _StyleSheet$flatten.paddingRight,
          paddingRight = _StyleSheet$flatten$p7 === void 0 ? paddingHorizontal : _StyleSheet$flatten$p7,
          viewStyle = (0, _objectWithoutProperties2.default)(_StyleSheet$flatten, ["padding", "paddingVertical", "paddingHorizontal", "paddingTop", "paddingBottom", "paddingLeft", "paddingRight"]);

      if (typeof paddingTop !== 'number') {
        paddingTop = doubleFromPercentString(paddingTop) * viewWidth;
      }

      if (typeof paddingBottom !== 'number') {
        paddingBottom = doubleFromPercentString(paddingBottom) * viewWidth;
      }

      if (typeof paddingLeft !== 'number') {
        paddingLeft = doubleFromPercentString(paddingLeft) * viewWidth;
      }

      if (typeof paddingRight !== 'number') {
        paddingRight = doubleFromPercentString(paddingRight) * viewWidth;
      }

      return {
        paddingTop: paddingTop,
        paddingBottom: paddingBottom,
        paddingLeft: paddingLeft,
        paddingRight: paddingRight,
        viewStyle: viewStyle
      };
    };

    _this._getInset = function (key) {
      var isLandscape = _this.props.isLandscape;
      return getInset(key, isLandscape);
    };

    return _this;
  }

  (0, _createClass2.default)(SafeView, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this._isMounted = true;

      _reactNative.InteractionManager.runAfterInteractions(function () {
        _this2._onLayout();
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._isMounted = false;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this._onLayout();
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props3 = this.props,
          _this$props3$forceIns = _this$props3.forceInset,
          forceInset = _this$props3$forceIns === void 0 ? false : _this$props3$forceIns,
          isLandscape = _this$props3.isLandscape,
          style = _this$props3.style,
          props = (0, _objectWithoutProperties2.default)(_this$props3, ["forceInset", "isLandscape", "style"]);

      var safeAreaStyle = this._getSafeAreaStyle();

      return _react.default.createElement(_reactNative.Animated.View, (0, _extends2.default)({
        ref: function ref(c) {
          return _this3.view = c;
        },
        pointerEvents: "box-none"
      }, props, {
        onLayout: this._onLayout,
        style: safeAreaStyle
      }));
    }
  }]);
  return SafeView;
}(_react.Component);

SafeView.setStatusBarHeight = function (height) {
  _customStatusBarHeight = height;
};

SafeView.setStatusBarHidden = function (hidden) {
  _customStatusBarHidden = hidden;
};

function getInset(key, isLandscape) {
  switch (key) {
    case 'horizontal':
    case 'right':
    case 'left':
      {
        return isLandscape ? isIPhoneX ? 44 : 0 : 0;
      }

    case 'vertical':
    case 'top':
      {
        return statusBarHeight(isLandscape);
      }

    case 'bottom':
      {
        if (isIPhoneX) {
          return isLandscape ? 24 : 34;
        }

        if (isNewIPadPro) {
          return 20;
        }

        return 0;
      }
  }
}

function getStatusBarHeight(isLandscape) {
  return statusBarHeight(isLandscape);
}

var SafeAreaView = (0, _withOrientation.default)(SafeView);
var _default = SafeAreaView;
exports.default = _default;

var withSafeArea = function withSafeArea() {
  var forceInset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (WrappedComponent) {
    var withSafeArea = function (_Component2) {
      (0, _inherits2.default)(withSafeArea, _Component2);

      function withSafeArea() {
        (0, _classCallCheck2.default)(this, withSafeArea);
        return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(withSafeArea).apply(this, arguments));
      }

      (0, _createClass2.default)(withSafeArea, [{
        key: "render",
        value: function render() {
          return _react.default.createElement(SafeAreaView, {
            style: {
              flex: 1
            },
            forceInset: forceInset
          }, _react.default.createElement(WrappedComponent, this.props));
        }
      }]);
      return withSafeArea;
    }(_react.Component);

    return (0, _hoistNonReactStatics.default)(withSafeArea, WrappedComponent);
  };
};

exports.withSafeArea = withSafeArea;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,