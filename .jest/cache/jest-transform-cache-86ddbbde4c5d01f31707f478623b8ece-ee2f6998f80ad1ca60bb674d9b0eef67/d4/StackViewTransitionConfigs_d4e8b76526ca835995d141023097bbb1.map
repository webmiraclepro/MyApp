{"version":3,"sources":["StackViewTransitionConfigs.tsx"],"names":["IOSTransitionSpec","timing","Animated","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","duration","easing","Easing","SlideFromRightIOS","transitionSpec","screenInterpolator","StyleInterpolator","containerStyle","backgroundColor","ModalSlideFromBottomIOS","FadeInFromBottomAndroid","FadeOutToBottomAndroid","NoAnimation","Platform","prevTransitionProps","transitionProps","defaultConfig","defaultTransitionConfig","transitionConfigurer","getTransitionConfig"],"mappings":"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","sourcesContent":["import { Animated, Easing, Platform } from 'react-native';\nimport StyleInterpolator from './StackViewStyleInterpolator';\nimport { supportsImprovedSpringAnimation } from '../../utils/ReactNativeFeatures';\nimport { TransitionProps, TransitionConfig } from '../../types';\n\nlet IOSTransitionSpec;\nif (supportsImprovedSpringAnimation()) {\n  // These are the exact values from UINavigationController's animation configuration\n  IOSTransitionSpec = {\n    timing: Animated.spring,\n    stiffness: 1000,\n    damping: 500,\n    mass: 3,\n    overshootClamping: true,\n    restDisplacementThreshold: 0.01,\n    restSpeedThreshold: 0.01,\n  };\n} else {\n  // This is an approximation of the IOS spring animation using a derived bezier curve\n  IOSTransitionSpec = {\n    duration: 500,\n    easing: Easing.bezier(0.2833, 0.99, 0.31833, 0.99),\n    timing: Animated.timing,\n  };\n}\n\n// Standard iOS navigation transition\nconst SlideFromRightIOS = {\n  transitionSpec: IOSTransitionSpec,\n  screenInterpolator: StyleInterpolator.forHorizontal,\n  containerStyle: {\n    backgroundColor: '#eee',\n  },\n};\n\n// Standard iOS navigation transition for modals\nconst ModalSlideFromBottomIOS = {\n  transitionSpec: IOSTransitionSpec,\n  screenInterpolator: StyleInterpolator.forVertical,\n  containerStyle: {\n    backgroundColor: '#eee',\n  },\n};\n\n// Standard Android navigation transition when opening an Activity\nconst FadeInFromBottomAndroid = {\n  // See http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/res/res/anim/activity_open_enter.xml\n  transitionSpec: {\n    duration: 350,\n    easing: Easing.out(Easing.poly(5)), // decelerate\n    timing: Animated.timing,\n  },\n  screenInterpolator: StyleInterpolator.forFadeFromBottomAndroid,\n};\n\n// Standard Android navigation transition when closing an Activity\nconst FadeOutToBottomAndroid = {\n  // See http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/res/res/anim/activity_close_exit.xml\n  transitionSpec: {\n    duration: 150,\n    easing: Easing.in(Easing.linear), // accelerate\n    timing: Animated.timing,\n  },\n  screenInterpolator: StyleInterpolator.forFadeToBottomAndroid,\n};\n\nconst NoAnimation = {\n  transitionSpec: {\n    duration: 0,\n    timing: Animated.timing,\n  },\n  screenInterpolator: StyleInterpolator.forNoAnimation,\n  containerStyle: {\n    backgroundColor: '#eee',\n  },\n};\n\nfunction defaultTransitionConfig(\n  transitionProps: TransitionProps,\n  prevTransitionProps?: TransitionProps,\n  isModal?: boolean\n): TransitionConfig {\n  if (Platform.OS !== 'ios') {\n    // Use the default Android animation no matter if the screen is a modal.\n    // Android doesn't have full-screen modals like iOS does, it has dialogs.\n    if (\n      prevTransitionProps &&\n      transitionProps.index < prevTransitionProps.index\n    ) {\n      // Navigating back to the previous screen\n      return FadeOutToBottomAndroid;\n    }\n    return FadeInFromBottomAndroid;\n  }\n  // iOS and other platforms\n  if (isModal) {\n    return ModalSlideFromBottomIOS;\n  }\n  return SlideFromRightIOS;\n}\n\nfunction getTransitionConfig<T = {}>(\n  transitionConfigurer:\n    | undefined\n    | ((\n        transitionProps: TransitionProps,\n        prevTransitionProps?: TransitionProps,\n        isModal?: boolean\n      ) => T),\n  transitionProps: TransitionProps,\n  prevTransitionProps?: TransitionProps,\n  isModal?: boolean\n): TransitionConfig & T {\n  const defaultConfig = defaultTransitionConfig(\n    transitionProps,\n    prevTransitionProps,\n    isModal\n  );\n  if (transitionConfigurer) {\n    return {\n      ...defaultConfig,\n      ...transitionConfigurer(transitionProps, prevTransitionProps, isModal),\n    };\n  }\n\n  return defaultConfig as any;\n}\n\nexport default {\n  defaultTransitionConfig,\n  getTransitionConfig,\n  SlideFromRightIOS,\n  ModalSlideFromBottomIOS,\n  FadeInFromBottomAndroid,\n  FadeOutToBottomAndroid,\n  NoAnimation,\n};\n"]}