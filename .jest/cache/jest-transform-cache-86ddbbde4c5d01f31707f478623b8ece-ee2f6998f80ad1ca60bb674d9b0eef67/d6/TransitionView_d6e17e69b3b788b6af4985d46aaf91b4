8bdeb444339be089f8c226ca82756f23
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactNative = require("react-native");

var _TransitionItem = _interopRequireDefault(require("./TransitionItem"));

var Constants = _interopRequireWildcard(require("./TransitionConstants"));

var _Utils = require("./Utils");

var _getTransitionElements = require("./Transitions/getTransitionElements");

var _uniqueBaseId = 'tcid';
var _uuidCount = 0;
var _zIndex = 1;

var Transition = function (_React$Component) {
  (0, _inherits2.default)(Transition, _React$Component);

  function Transition(props, context) {
    var _this;

    (0, _classCallCheck2.default)(this, Transition);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Transition).call(this, props, context));

    _this.setViewRef = function (ref) {
      _this._viewRef = ref;
    };

    _this._name = _uniqueBaseId + "-" + _uuidCount++;
    _this._animatedComponent = null;
    return _this;
  }

  (0, _createClass2.default)(Transition, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return this.props !== nextProps;
    }
  }, {
    key: "componentWillMount",
    value: function componentWillMount() {
      var _this$context = this.context,
          route = _this$context.route,
          register = _this$context.register;
      var _this$props = this.props,
          shared = _this$props.shared,
          appear = _this$props.appear,
          disappear = _this$props.disappear,
          delay = _this$props.delay,
          zIndex = _this$props.zIndex,
          anchor = _this$props.anchor,
          animated = _this$props.animated,
          _this$props$inline = _this$props.inline,
          inline = _this$props$inline === void 0 ? false : _this$props$inline;

      if (register) {
        this._route = route;
        register(new _TransitionItem.default(this._getName(), route, this, shared !== undefined, appear, disappear, delay !== undefined, zIndex || _zIndex++, anchor, animated, inline));
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this._isMounted = true;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._isMounted = false;
      var unregister = this.context.unregister;

      if (unregister) {
        unregister(this._getName(), this._route);
      }
    }
  }, {
    key: "getNodeHandle",
    value: function getNodeHandle() {
      return (0, _reactNative.findNodeHandle)(this._viewRef);
    }
  }, {
    key: "getViewRef",
    value: function getViewRef() {
      return this._viewRef;
    }
  }, {
    key: "_getName",
    value: function _getName() {
      var _this$props2 = this.props,
          shared = _this$props2.shared,
          name = _this$props2.name;

      if (shared) {
        return shared;
      }

      if (name) {
        return name;
      }

      return this._name;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          children = _this$props3.children,
          innerRef = _this$props3.innerRef;

      var element = _react.default.Children.only(children);

      if (!element) {
        return null;
      }

      if (!this._animatedComponent) {
        this._animatedComponent = (0, _Utils.createAnimated)();
      }

      if (!this._outerAnimatedComponent) {
        this._outerAnimatedComponent = (0, _Utils.createAnimated)();
      }

      var visibilityStyle = this.getVisibilityStyle();
      var transitionStyle = this.getTransitionStyle();

      var key = this._getName() + "-" + this._route;

      element = _react.default.createElement(element.type, (0, _objectSpread2.default)({}, element.props, {
        key: key,
        ref: this.setViewRef
      }));
      return (0, _Utils.createAnimatedWrapper)({
        component: element,
        nativeStyles: [visibilityStyle, transitionStyle, styles.transition],
        nativeCached: this._outerAnimatedComponent,
        cached: this._animatedComponent,
        innerRef: innerRef,
        log: true,
        logPrefix: "TV " + this._getName() + "/" + this._route
      });
    }
  }, {
    key: "getTransitionStyle",
    value: function getTransitionStyle() {
      var _this$props$inline2 = this.props.inline,
          inline = _this$props$inline2 === void 0 ? false : _this$props$inline2;
      if (!inline) return {};
      var _this$context2 = this.context,
          getTransitionProgress = _this$context2.getTransitionProgress,
          getIndex = _this$context2.getIndex,
          getIsAnchored = _this$context2.getIsAnchored,
          getIsPartOfSharedTransition = _this$context2.getIsPartOfSharedTransition,
          getIsPartOfTransition = _this$context2.getIsPartOfTransition,
          getRoutes = _this$context2.getRoutes,
          getItemByNameAndRoute = _this$context2.getItemByNameAndRoute,
          getDirectionForRoute = _this$context2.getDirectionForRoute,
          getItemDelayInfo = _this$context2.getItemDelayInfo;
      if (!getTransitionProgress || !getIndex || !getIsAnchored || !getIsPartOfSharedTransition || !getIsPartOfTransition || !getItemByNameAndRoute || !getDirectionForRoute || !getItemDelayInfo || !getRoutes) return {};
      var progress = getTransitionProgress();
      var index = getIndex();
      if (!progress || index === undefined) return {};
      var isPartOfTransition = getIsPartOfTransition(this._getName(), this._route);

      if (isPartOfTransition) {
        var item = getItemByNameAndRoute(this._getName(), this._route);
        var routeDirection = getDirectionForRoute(this._getName(), this._route);
        var delayInfo = getItemDelayInfo(item.name, item.route);
        var transitionStyle = (0, _getTransitionElements.getCalculatedTransitionStyle)(item, delayInfo.delayCount, delayInfo.delayIndex, index, routeDirection, progress, getRoutes().length === 1);
        return transitionStyle;
      }

      return {};
    }
  }, {
    key: "getVisibilityStyle",
    value: function getVisibilityStyle() {
      var _this$props$inline3 = this.props.inline,
          inline = _this$props$inline3 === void 0 ? false : _this$props$inline3;
      var _this$context3 = this.context,
          getTransitionProgress = _this$context3.getTransitionProgress,
          getIndex = _this$context3.getIndex,
          getIsAnchored = _this$context3.getIsAnchored,
          getIsPartOfSharedTransition = _this$context3.getIsPartOfSharedTransition,
          getIsPartOfTransition = _this$context3.getIsPartOfTransition,
          getItemByNameAndRoute = _this$context3.getItemByNameAndRoute,
          getDirectionForRoute = _this$context3.getDirectionForRoute;
      if (!getTransitionProgress || !getIndex || !getIsAnchored || !getIsPartOfSharedTransition || !getIsPartOfTransition || !getItemByNameAndRoute || !getDirectionForRoute) return {};
      var progress = getTransitionProgress();
      var index = getIndex();
      if (!progress || index === undefined) return {};
      var inputRange = [index - 1, index - 1 + Constants.OP, index - Constants.OP, index];
      var outputRange = [1, 0, 0, 1];
      var isPartOfSharedTransition = getIsPartOfSharedTransition(this._getName(), this._route);
      var isPartOfTransition = getIsPartOfTransition(this._getName(), this._route);
      var isAnchored = getIsAnchored(this._getName(), this._route);
      var visibilityProgress = progress.interpolate({
        inputRange: inputRange,
        outputRange: outputRange
      });

      if (isPartOfSharedTransition || isPartOfTransition && !inline || isAnchored) {
        return {
          opacity: visibilityProgress
        };
      }

      return {};
    }
  }]);
  return Transition;
}(_react.default.Component);

Transition.contextTypes = {
  register: _propTypes.default.func,
  unregister: _propTypes.default.func,
  route: _propTypes.default.string,
  getTransitionProgress: _propTypes.default.func,
  getDirectionForRoute: _propTypes.default.func,
  getDirection: _propTypes.default.func,
  getIndex: _propTypes.default.func,
  getIsPartOfSharedTransition: _propTypes.default.func,
  getIsPartOfTransition: _propTypes.default.func,
  getIsAnchored: _propTypes.default.func,
  getItemByNameAndRoute: _propTypes.default.func,
  getRoutes: _propTypes.default.func,
  getItemDelayInfo: _propTypes.default.func
};

var styles = _reactNative.StyleSheet.create({
  transition: {}
});

var _default = Transition;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,