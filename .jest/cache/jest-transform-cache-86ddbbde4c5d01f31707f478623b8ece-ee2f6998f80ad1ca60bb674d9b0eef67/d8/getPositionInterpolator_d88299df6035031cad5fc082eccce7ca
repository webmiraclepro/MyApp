2f4c59151cb6bc17cc2dbd7f31aa6d4f
"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.getPositionInterpolator = void 0;var _reactNative = require("react-native");
var _InterpolatorSpecification = require("../Types/InterpolatorSpecification");

var getPositionInterpolator = function getPositionInterpolator(spec) {
  var nativeInterpolator = spec.getInterpolation(true);
  if (spec.equalAspectRatio) {

    var _translateX = nativeInterpolator.interpolate({
      inputRange: [0, 1],
      outputRange: [0, spec.to.metrics.x - spec.from.metrics.x +
      spec.from.metrics.width / 2 * (spec.scaleX - 1)] });


    var _translateY = nativeInterpolator.interpolate({
      inputRange: [0, 1],
      outputRange: [0, spec.to.metrics.y - spec.from.metrics.y +
      spec.from.metrics.height / 2 * (spec.scaleY - 1)] });


    return { nativeAnimationStyles: {
        width: spec.from.metrics.width,
        height: spec.from.metrics.height,
        transform: [{ translateX: _translateX }, { translateY: _translateY }] } };

  }

  var translateX = nativeInterpolator.interpolate({
    inputRange: [0, 1],
    outputRange: [0, spec.to.metrics.x - spec.from.metrics.x] });


  var translateY = nativeInterpolator.interpolate({
    inputRange: [0, 1],
    outputRange: [0, spec.to.metrics.y - spec.from.metrics.y] });


  return { nativeAnimationStyles: {
      transform: [{ translateX: translateX }, { translateY: translateY }] } };

};exports.getPositionInterpolator = getPositionInterpolator;