bafdf90ec9ee21a5057d6316937b6369
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getChildEventSubscriber;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

function getChildEventSubscriber(addListener, key) {
  var initialLastFocusEvent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'didBlur';
  var actionSubscribers = new Set();
  var willFocusSubscribers = new Set();
  var didFocusSubscribers = new Set();
  var willBlurSubscribers = new Set();
  var didBlurSubscribers = new Set();
  var refocusSubscribers = new Set();

  var removeAll = function removeAll() {
    [actionSubscribers, willFocusSubscribers, didFocusSubscribers, willBlurSubscribers, didBlurSubscribers, refocusSubscribers].forEach(function (set) {
      return set.clear();
    });
    upstreamSubscribers.forEach(function (subs) {
      return subs && subs.remove();
    });
  };

  var getChildSubscribers = function getChildSubscribers(evtName) {
    switch (evtName) {
      case 'action':
        return actionSubscribers;

      case 'willFocus':
        return willFocusSubscribers;

      case 'didFocus':
        return didFocusSubscribers;

      case 'willBlur':
        return willBlurSubscribers;

      case 'didBlur':
        return didBlurSubscribers;

      case 'refocus':
        return refocusSubscribers;

      default:
        return null;
    }
  };

  var _emit = function emit(type, payload) {
    var payloadWithType = (0, _objectSpread2.default)({}, payload, {
      type: type
    });
    var subscribers = getChildSubscribers(type);
    subscribers && subscribers.forEach(function (subs) {
      subs(payloadWithType);
    });
  };

  var lastFocusEvent = initialLastFocusEvent;
  var upstreamEvents = ['willFocus', 'didFocus', 'willBlur', 'didBlur', 'refocus', 'action'];
  var upstreamSubscribers = upstreamEvents.map(function (eventName) {
    return addListener(eventName, function (payload) {
      if (eventName === 'refocus') {
        _emit(eventName, payload);

        return;
      }

      var state = payload.state,
          lastState = payload.lastState,
          action = payload.action;
      var lastRoutes = lastState && lastState.routes;
      var routes = state && state.routes;
      var focusKey = routes && routes[state.index].key;
      var isChildFocused = focusKey === key;
      var lastRoute = lastRoutes && lastRoutes.find(function (route) {
        return route.key === key;
      });
      var newRoute = routes && routes.find(function (route) {
        return route.key === key;
      });
      var childPayload = {
        context: key + ":" + action.type + "_" + (payload.context || 'Root'),
        state: newRoute,
        lastState: lastRoute,
        action: action,
        type: eventName
      };
      var isTransitioning = !!state && state.isTransitioning;
      var previouslylastFocusEvent = lastFocusEvent;

      if (lastFocusEvent === 'didBlur') {
        if (eventName === 'willFocus' && isChildFocused) {
          _emit(lastFocusEvent = 'willFocus', childPayload);
        } else if (eventName === 'action' && isChildFocused) {
          _emit(lastFocusEvent = 'willFocus', childPayload);
        }
      }

      if (lastFocusEvent === 'willFocus') {
        if (eventName === 'didFocus' && isChildFocused && !isTransitioning) {
          _emit(lastFocusEvent = 'didFocus', childPayload);
        } else if (eventName === 'action' && isChildFocused && !isTransitioning) {
          _emit(lastFocusEvent = 'didFocus', childPayload);
        }
      }

      if (lastFocusEvent === 'didFocus') {
        if (!isChildFocused) {
          _emit(lastFocusEvent = 'willBlur', childPayload);
        } else if (eventName === 'willBlur') {
          _emit(lastFocusEvent = 'willBlur', childPayload);
        } else if (eventName === 'action' && previouslylastFocusEvent === 'didFocus') {
          _emit('action', childPayload);
        }
      }

      if (lastFocusEvent === 'willBlur') {
        if (eventName === 'action' && !isChildFocused && !isTransitioning) {
          _emit(lastFocusEvent = 'didBlur', childPayload);
        } else if (eventName === 'didBlur') {
          _emit(lastFocusEvent = 'didBlur', childPayload);
        } else if (eventName === 'action' && isChildFocused && !isTransitioning) {
          _emit(lastFocusEvent = 'didFocus', childPayload);
        } else if (eventName === 'action' && isChildFocused && isTransitioning) {
          _emit(lastFocusEvent = 'willFocus', childPayload);
        }
      }

      if (lastFocusEvent === 'didBlur' && !newRoute) {
        removeAll();
      }
    });
  });
  return {
    addListener: function addListener(eventName, eventHandler) {
      var subscribers = getChildSubscribers(eventName);

      if (!subscribers) {
        throw new Error("Invalid event name \"" + eventName + "\"");
      }

      subscribers.add(eventHandler);

      var remove = function remove() {
        subscribers.delete(eventHandler);
      };

      return {
        remove: remove
      };
    },
    emit: function emit(eventName, payload) {
      if (eventName !== 'refocus') {
        console.error("navigation.emit only supports the 'refocus' event currently.");
        return;
      }

      _emit(eventName, payload);
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,