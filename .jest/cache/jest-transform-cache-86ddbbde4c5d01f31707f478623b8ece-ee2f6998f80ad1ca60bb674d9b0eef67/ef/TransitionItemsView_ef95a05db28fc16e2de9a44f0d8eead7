2b3ae9e108e2e3696b0edfea2298ec0d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactNativeScreens = require("react-native-screens");

var _Types = require("./Types");

var _TransitionItem = _interopRequireDefault(require("./TransitionItem"));

var _TransitionItems = _interopRequireDefault(require("./TransitionItems"));

var _TransitionOverlayView = _interopRequireDefault(require("./TransitionOverlayView"));

var TransitionItemsView = function (_React$Component) {
  (0, _inherits2.default)(TransitionItemsView, _React$Component);

  function TransitionItemsView(props) {
    var _this;

    (0, _classCallCheck2.default)(this, TransitionItemsView);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TransitionItemsView).call(this, props));
    _this._shouldRunStartAnimation = true;

    _this.getDirectionForRoute = function (name, route) {
      var _this$state = _this.state,
          fromRoute = _this$state.fromRoute,
          toRoute = _this$state.toRoute;

      if (!fromRoute && !toRoute) {
        return _Types.RouteDirection.unknown;
      }

      if (!fromRoute) {
        return _Types.RouteDirection.to;
      }

      if (route === fromRoute) {
        return _Types.RouteDirection.from;
      }

      if (route === toRoute) {
        return _Types.RouteDirection.to;
      }

      return _Types.RouteDirection.unknown;
    };

    _this.getTransitionProgress = function () {
      var useNative = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      if (useNative) return _this._transitionProgress;

      if (!_this._nonNativeTransitionProgress) {
        _this._nonNativeTransitionProgress = new _reactNative.Animated.Value(-1);

        _this._transitionProgress.addListener(_reactNative.Animated.event([{
          value: _this._nonNativeTransitionProgress
        }], {
          useNativeDriver: false
        }));
      }

      return _this._nonNativeTransitionProgress;
    };

    _this.getRoutes = function () {
      var _this$state2 = _this.state,
          fromRoute = _this$state2.fromRoute,
          toRoute = _this$state2.toRoute;
      return [fromRoute, toRoute].filter(function (r) {
        return r !== null;
      });
    };

    _this.getIsAnchored = function (name, route) {
      var item = _this._transitionItems.getItemByNameAndRoute(name, route);

      if (!item) return false;
      var _this$state3 = _this.state,
          fromRoute = _this$state3.fromRoute,
          toRoute = _this$state3.toRoute;

      var sharedElements = _this._transitionItems.getSharedElements(fromRoute, toRoute);

      if (sharedElements && sharedElements.find(function (p) {
        return p.fromItem.name === item.anchor && p.fromItem.route === route;
      }) || sharedElements.find(function (p) {
        return p.toItem.name === item.anchor && p.toItem.route === route;
      })) {
        return true;
      }

      return false;
    };

    _this.getItemByNameAndRoute = function (name, route) {
      return _this._transitionItems.getItemByNameAndRoute(name, route);
    };

    _this.getItemDelayInfo = function (name, route) {
      var _this$state4 = _this.state,
          fromRoute = _this$state4.fromRoute,
          toRoute = _this$state4.toRoute;

      var transitionElements = _this._transitionItems.getItems().filter(function (itm) {
        return itm.route === route && !itm.shared && itm.delay;
      });

      var delayCount = transitionElements.length + 1;
      var delayFactor = 0;
      var delayIndex = 0;

      if (fromRoute === route) {
        delayFactor = 1;
        delayIndex = 0;
      } else if (toRoute === route) {
        delayFactor = -1;
        delayIndex = delayCount - 1;
      }

      for (var i = 0; i < transitionElements.length; i++) {
        delayIndex += delayFactor;

        if (transitionElements[i].name === name && transitionElements[i].route === route) {
          break;
        }
      }

      return {
        delayCount: delayCount,
        delayIndex: delayIndex
      };
    };

    _this.getIsPartOfSharedTransition = function (name, route) {
      var item = _this._transitionItems.getItemByNameAndRoute(name, route);

      if (!item || !item.shared) return false;
      var _this$state5 = _this.state,
          fromRoute = _this$state5.fromRoute,
          toRoute = _this$state5.toRoute;

      var sharedElements = _this._transitionItems.getSharedElements(fromRoute, toRoute);

      if (sharedElements.find(function (pair) {
        return pair.fromItem.name === item.name && pair.fromItem.route === item.route || pair.toItem.name === item.name && pair.toItem.route === item.route;
      })) {
        return true;
      }

      return false;
    };

    _this.getDirection = function () {
      var direction = _this.state.direction;
      return direction;
    };

    _this.getIndex = function () {
      var index = _this.state.index;
      return index;
    };

    _this.getIsPartOfTransition = function (name, route) {
      var item = _this._transitionItems.getItemByNameAndRoute(name, route);

      if (!item || !(item.appear || item.disappear)) return false;
      var _this$state6 = _this.state,
          fromRoute = _this$state6.fromRoute,
          toRoute = _this$state6.toRoute;

      var transitionElements = _this._transitionItems.getTransitionElements(fromRoute, toRoute);

      if (transitionElements.find(function (o) {
        return item.name === o.name && item.route === o.route;
      })) {
        return true;
      }

      return false;
    };

    _this._inUpdate = false;
    _this._isMounted = false;
    _this._viewRef = null;
    _this.state = {
      toRoute: null,
      fromRoute: null,
      direction: _Types.NavigationDirection.Unknown,
      sharedElements: null,
      transitionElements: null,
      index: -1
    };
    _this._transitionItems = new _TransitionItems.default();
    _this._transitionProgress = props.progress;

    _this._transitionProgress.setValue(-1);

    _this._interactionDonePromise = new Promise(function (resolve) {
      return _this._interactionDonePromiseDone = resolve;
    });
    return _this;
  }

  (0, _createClass2.default)(TransitionItemsView, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      this.updateFromProps(nextProps, this.props);
    }
  }, {
    key: "updateFromProps",
    value: function updateFromProps(props, prevProps) {
      if (!this._isMounted) return;
      var fromRoute = props.fromRoute,
          toRoute = props.toRoute;
      var direction = props.index >= (prevProps ? prevProps.index : Number.MIN_SAFE_INTEGER) ? _Types.NavigationDirection.forward : _Types.NavigationDirection.back;
      var index = prevProps ? props.index : 0;

      if (toRoute !== this.state.toRoute || fromRoute !== this.state.fromRoute || index !== this.state.index || direction !== this.state.direction) {
        this.setState({
          toRoute: toRoute,
          fromRoute: fromRoute,
          direction: direction,
          index: index
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          style = _this$props.style,
          children = _this$props.children;
      var _this$state7 = this.state,
          direction = _this$state7.direction,
          fromRoute = _this$state7.fromRoute,
          toRoute = _this$state7.toRoute,
          index = _this$state7.index,
          sharedElements = _this$state7.sharedElements,
          transitionElements = _this$state7.transitionElements;
      return _react.default.createElement(_reactNative.View, (0, _extends2.default)({}, this.props, {
        style: [styles.container, style],
        ref: function ref(_ref) {
          return _this2._viewRef = _ref;
        },
        collapsable: false
      }), _react.default.createElement(_reactNativeScreens.ScreenContainer, {
        style: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject)
      }, children), _react.default.createElement(_TransitionOverlayView.default, {
        direction: direction,
        fromRoute: fromRoute,
        toRoute: toRoute,
        index: index,
        sharedElements: sharedElements,
        transitionElements: transitionElements
      }));
    }
  }, {
    key: "getViewMetrics",
    value: function getViewMetrics() {
      var nodeHandle, viewMetrics, promise;
      return _regenerator.default.async(function getViewMetrics$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              nodeHandle = (0, _reactNative.findNodeHandle)(this._viewRef);

              if (nodeHandle) {
                _context.next = 3;
                break;
              }

              return _context.abrupt("return", viewMetrics);

            case 3:
              promise = new Promise(function (resolve) {
                _reactNative.UIManager.measureInWindow(nodeHandle, function (x, y, width, height) {
                  viewMetrics = {
                    x: x,
                    y: y,
                    width: width,
                    height: height
                  };
                  resolve();
                });
              });
              _context.next = 6;
              return _regenerator.default.awrap(promise);

            case 6:
              return _context.abrupt("return", viewMetrics);

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "measureItems",
    value: function measureItems(sharedElements, transitionElements) {
      var promises, viewMetrics, i, pair, n, _n, _i;

      return _regenerator.default.async(function measureItems$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              promises = [];
              _context2.next = 3;
              return _regenerator.default.awrap(this.getViewMetrics());

            case 3:
              viewMetrics = _context2.sent;

              if (sharedElements) {
                for (i = 0; i < sharedElements.length; i++) {
                  pair = sharedElements[i];
                  promises.push(this.measureItem(viewMetrics, pair.fromItem));
                  promises.push(this.measureItem(viewMetrics, pair.toItem));

                  if (pair.fromItem && pair.fromItem.anchors) {
                    for (n = 0; n < pair.fromItem.anchors.length; n++) {
                      promises.push(this.measureItem(viewMetrics, pair.fromItem.anchors[n]));
                    }
                  }

                  if (pair.toItem && pair.toItem.anchors) {
                    for (_n = 0; _n < pair.toItem.anchors.length; _n++) {
                      promises.push(this.measureItem(viewMetrics, pair.toItem.anchors[_n]));
                    }
                  }
                }
              }

              if (transitionElements) {
                for (_i = 0; _i < transitionElements.length; _i++) {
                  promises.push(this.measureItem(viewMetrics, transitionElements[_i]));
                }
              }

              if (!(promises.length > 0)) {
                _context2.next = 9;
                break;
              }

              _context2.next = 9;
              return _regenerator.default.awrap(Promise.all(promises));

            case 9:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "measureItem",
    value: function measureItem(viewMetrics, item) {
      var nodeHandle;
      return _regenerator.default.async(function measureItem$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              nodeHandle = item.getNodeHandle();

              if (nodeHandle) {
                _context3.next = 3;
                break;
              }

              return _context3.abrupt("return");

            case 3:
              _context3.next = 5;
              return _regenerator.default.awrap(new Promise(function (resolve) {
                _reactNative.UIManager.measureInWindow(nodeHandle, function (x, y, width, height) {
                  item.updateMetrics(viewMetrics, {
                    x: x,
                    y: y,
                    width: width,
                    height: height
                  });
                  resolve();
                });
              }));

            case 5:
            case "end":
              return _context3.stop();
          }
        }
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var _this3 = this;

      if (this._inUpdate) return;
      var _this$state8 = this.state,
          fromRoute = _this$state8.fromRoute,
          toRoute = _this$state8.toRoute;
      if (!fromRoute && !toRoute) return;
      this._inUpdate = true;

      var measureAndUpdateFunc = function measureAndUpdateFunc() {
        var sharedElements, transitionElements;
        return _regenerator.default.async(function measureAndUpdateFunc$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                sharedElements = _this3._transitionItems.getSharedElements(fromRoute, toRoute);
                transitionElements = _this3._transitionItems.getTransitionElements(fromRoute, toRoute);
                _context4.next = 4;
                return _regenerator.default.awrap(_this3._interactionDonePromise);

              case 4:
                _context4.next = 6;
                return _regenerator.default.awrap(_this3.measureItems(sharedElements, transitionElements));

              case 6:
                if (!sharedElements.find(function (p) {
                  return !p.fromItem.metrics || !p.toItem.metrics;
                }) && !transitionElements.find(function (i) {
                  return !i.metrics;
                })) {
                  _this3._transitionItems.getItems().forEach(function (item) {
                    return item.forceUpdate();
                  });

                  _this3.setState(function (prevState) {
                    return (0, _objectSpread2.default)({}, prevState, {
                      sharedElements: sharedElements,
                      transitionElements: transitionElements
                    });
                  }, function () {
                    var onLayout = _this3.props.onLayout;
                    if (onLayout) onLayout();

                    _this3._runStartAnimation(transitionElements.length);

                    _this3._inUpdate = false;
                  });
                }

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        });
      };

      measureAndUpdateFunc = measureAndUpdateFunc.bind(this);
      setTimeout(measureAndUpdateFunc, 10);
    }
  }, {
    key: "_runStartAnimation",
    value: function _runStartAnimation(numberOfTransitions) {
      var getTransitionConfig, _this$props2, toRoute, navigation, index, transitionSpec, timing, animations;

      return _regenerator.default.async(function _runStartAnimation$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (this._shouldRunStartAnimation) {
                _context5.next = 2;
                break;
              }

              return _context5.abrupt("return");

            case 2:
              this._shouldRunStartAnimation = false;
              getTransitionConfig = this.context.getTransitionConfig;
              _this$props2 = this.props, toRoute = _this$props2.toRoute, navigation = _this$props2.navigation, index = _this$props2.index;

              if (index > 0) {
                this._transitionProgress.setValue(index - 1);
              }

              transitionSpec = getTransitionConfig ? getTransitionConfig(toRoute, navigation) : {
                timing: _reactNative.Animated.timing,
                duration: 650,
                easing: _reactNative.Easing.inOut(_reactNative.Easing.poly(4)),
                isInteraction: true,
                useNativeDriver: true
              };
              timing = transitionSpec.timing;
              delete transitionSpec.timing;
              animations = [timing(this._transitionProgress, (0, _objectSpread2.default)({}, transitionSpec, {
                duration: numberOfTransitions === 0 ? 25 : transitionSpec.duration,
                toValue: index
              }))];

              _reactNative.Animated.parallel(animations).start();

            case 11:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this._isMounted = true;
      this.updateFromProps((0, _objectSpread2.default)({}, this.props, {
        index: -1
      }));
      var _this$props3 = this.props,
          fromRoute = _this$props3.fromRoute,
          toRoute = _this$props3.toRoute;

      var te = this._transitionItems.getTransitionElements(fromRoute, toRoute);

      if (te.length > 0) {
        _reactNative.InteractionManager.runAfterInteractions(this._interactionDonePromiseDone);
      } else {
        this._interactionDonePromiseDone();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._isMounted = false;
    }
  }, {
    key: "getChildContext",
    value: function getChildContext() {
      var _this4 = this;

      return {
        register: function register(item) {
          return _this4._transitionItems.add(item);
        },
        unregister: function unregister(name, route) {
          return _this4._transitionItems.remove(name, route);
        },
        getTransitionProgress: this.getTransitionProgress,
        getDirectionForRoute: this.getDirectionForRoute,
        getIndex: function getIndex() {
          return _this4.getIndex();
        },
        getDirection: function getDirection() {
          return _this4.getDirection() || _Types.NavigationDirection.unknown;
        },
        getIsPartOfSharedTransition: this.getIsPartOfSharedTransition,
        getIsPartOfTransition: this.getIsPartOfTransition,
        getIsAnchored: this.getIsAnchored,
        getRoutes: this.getRoutes,
        getItemByNameAndRoute: this.getItemByNameAndRoute,
        getItemDelayInfo: this.getItemDelayInfo
      };
    }
  }]);
  return TransitionItemsView;
}(_react.default.Component);

exports.default = TransitionItemsView;
TransitionItemsView.childContextTypes = {
  register: _propTypes.default.func,
  unregister: _propTypes.default.func,
  getTransitionProgress: _propTypes.default.func,
  getDirectionForRoute: _propTypes.default.func,
  getDirection: _propTypes.default.func,
  getIndex: _propTypes.default.func,
  getIsPartOfSharedTransition: _propTypes.default.func,
  getIsPartOfTransition: _propTypes.default.func,
  getRoutes: _propTypes.default.func,
  getIsAnchored: _propTypes.default.func,
  getItemByNameAndRoute: _propTypes.default.func,
  getItemDelayInfo: _propTypes.default.func
};
TransitionItemsView.contextTypes = {
  getTransitionConfig: _propTypes.default.func
};

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    overflow: 'hidden'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,