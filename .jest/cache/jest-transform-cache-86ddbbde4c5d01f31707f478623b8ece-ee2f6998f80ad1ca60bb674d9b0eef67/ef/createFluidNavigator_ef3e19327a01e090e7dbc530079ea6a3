9b9473b53f3cb1b9a6153e5b31845f9f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _react = _interopRequireDefault(require("react"));

var _reactNavigation = require("react-navigation");

var _FluidTransitioner = _interopRequireDefault(require("./FluidTransitioner"));

var _default = function _default(routeConfigMap) {
  var stackConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var initialRouteName = stackConfig.initialRouteName,
      initialRouteParams = stackConfig.initialRouteParams,
      paths = stackConfig.paths,
      mode = stackConfig.mode,
      transitionConfig = stackConfig.transitionConfig,
      defaultNavigationOptions = stackConfig.defaultNavigationOptions,
      style = stackConfig.style;
  var stackRouterConfig = (0, _objectSpread2.default)({}, _reactNavigation.defaultNavigationOptions, {
    initialRouteName: initialRouteName,
    initialRouteParams: initialRouteParams,
    paths: paths,
    defaultNavigationOptions: defaultNavigationOptions,
    getCustomActionCreators: _reactNavigation.getCustomActionCreators
  });

  var FluidNavigationView = function (_React$Component) {
    (0, _inherits2.default)(FluidNavigationView, _React$Component);

    function FluidNavigationView() {
      (0, _classCallCheck2.default)(this, FluidNavigationView);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(FluidNavigationView).apply(this, arguments));
    }

    (0, _createClass2.default)(FluidNavigationView, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            navigation = _this$props.navigation,
            screenProps = _this$props.screenProps,
            descriptors = _this$props.descriptors,
            onTransitionStart = _this$props.onTransitionStart,
            _onTransitionEnd = _this$props.onTransitionEnd;
        return _react.default.createElement(_FluidTransitioner.default, {
          mode: mode,
          style: style,
          navigation: navigation,
          screenProps: screenProps,
          descriptors: descriptors,
          transitionConfig: transitionConfig,
          onTransitionStart: onTransitionStart,
          onTransitionEnd: function onTransitionEnd(transition, lastTransition) {
            if (transition.navigation.state.isTransitioning) {
              navigation.dispatch(_reactNavigation.StackActions.completeTransition({
                key: navigation.state.key,
                toChildKey: navigation.state.routes[navigation.state.index].key
              }));
            }

            if (_onTransitionEnd) _onTransitionEnd(transition, lastTransition);
          }
        });
      }
    }]);
    return FluidNavigationView;
  }(_react.default.Component);

  var router = (0, _reactNavigation.StackRouter)(routeConfigMap, stackRouterConfig);
  return (0, _reactNavigation.createNavigator)(FluidNavigationView, router, stackConfig);
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZUZsdWlkTmF2aWdhdG9yLmpzIl0sIm5hbWVzIjpbInJvdXRlQ29uZmlnTWFwIiwic3RhY2tDb25maWciLCJpbml0aWFsUm91dGVOYW1lIiwiaW5pdGlhbFJvdXRlUGFyYW1zIiwicGF0aHMiLCJtb2RlIiwidHJhbnNpdGlvbkNvbmZpZyIsImRlZmF1bHROYXZpZ2F0aW9uT3B0aW9ucyIsInN0eWxlIiwic3RhY2tSb3V0ZXJDb25maWciLCJyZWFjdE5hdmlnYXRpb25EZWZhdWx0TmF2aWdhdGlvbk9wdGlvbnMiLCJnZXRDdXN0b21BY3Rpb25DcmVhdG9ycyIsIkZsdWlkTmF2aWdhdGlvblZpZXciLCJwcm9wcyIsIm5hdmlnYXRpb24iLCJzY3JlZW5Qcm9wcyIsImRlc2NyaXB0b3JzIiwib25UcmFuc2l0aW9uU3RhcnQiLCJvblRyYW5zaXRpb25FbmQiLCJ0cmFuc2l0aW9uIiwibGFzdFRyYW5zaXRpb24iLCJzdGF0ZSIsImlzVHJhbnNpdGlvbmluZyIsImRpc3BhdGNoIiwiU3RhY2tBY3Rpb25zIiwiY29tcGxldGVUcmFuc2l0aW9uIiwia2V5IiwidG9DaGlsZEtleSIsInJvdXRlcyIsImluZGV4IiwiUmVhY3QiLCJDb21wb25lbnQiLCJyb3V0ZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFRQTs7ZUFFZSxrQkFBQ0EsY0FBRCxFQUFzQztBQUFBLE1BQXJCQyxXQUFxQix1RUFBUCxFQUFPO0FBQUEsTUFFakRDLGdCQUZpRCxHQVMvQ0QsV0FUK0MsQ0FFakRDLGdCQUZpRDtBQUFBLE1BR2pEQyxrQkFIaUQsR0FTL0NGLFdBVCtDLENBR2pERSxrQkFIaUQ7QUFBQSxNQUlqREMsS0FKaUQsR0FTL0NILFdBVCtDLENBSWpERyxLQUppRDtBQUFBLE1BS2pEQyxJQUxpRCxHQVMvQ0osV0FUK0MsQ0FLakRJLElBTGlEO0FBQUEsTUFNakRDLGdCQU5pRCxHQVMvQ0wsV0FUK0MsQ0FNakRLLGdCQU5pRDtBQUFBLE1BT2pEQyx3QkFQaUQsR0FTL0NOLFdBVCtDLENBT2pETSx3QkFQaUQ7QUFBQSxNQVFqREMsS0FSaUQsR0FTL0NQLFdBVCtDLENBUWpETyxLQVJpRDtBQVduRCxNQUFNQyxpQkFBaUIsbUNBQ2xCQyx5Q0FEa0I7QUFFckJSLElBQUFBLGdCQUFnQixFQUFoQkEsZ0JBRnFCO0FBR3JCQyxJQUFBQSxrQkFBa0IsRUFBbEJBLGtCQUhxQjtBQUlyQkMsSUFBQUEsS0FBSyxFQUFMQSxLQUpxQjtBQUtyQkcsSUFBQUEsd0JBQXdCLEVBQXhCQSx3QkFMcUI7QUFNckJJLElBQUFBLHVCQUF1QixFQUF2QkE7QUFOcUIsSUFBdkI7O0FBWG1ELE1Bb0I3Q0MsbUJBcEI2QztBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQSwrQkFxQnhDO0FBQUEsMEJBRWUsS0FBS0MsS0FGcEI7QUFBQSxZQUNDQyxVQURELGVBQ0NBLFVBREQ7QUFBQSxZQUNhQyxXQURiLGVBQ2FBLFdBRGI7QUFBQSxZQUMwQkMsV0FEMUIsZUFDMEJBLFdBRDFCO0FBQUEsWUFDdUNDLGlCQUR2QyxlQUN1Q0EsaUJBRHZDO0FBQUEsWUFFTEMsZ0JBRkssZUFFTEEsZUFGSztBQUlQLGVBQ0UsNkJBQUMsMEJBQUQ7QUFDRSxVQUFBLElBQUksRUFBRWIsSUFEUjtBQUVFLFVBQUEsS0FBSyxFQUFFRyxLQUZUO0FBR0UsVUFBQSxVQUFVLEVBQUVNLFVBSGQ7QUFJRSxVQUFBLFdBQVcsRUFBRUMsV0FKZjtBQUtFLFVBQUEsV0FBVyxFQUFFQyxXQUxmO0FBTUUsVUFBQSxnQkFBZ0IsRUFBRVYsZ0JBTnBCO0FBT0UsVUFBQSxpQkFBaUIsRUFBRVcsaUJBUHJCO0FBUUUsVUFBQSxlQUFlLEVBQUUseUJBQUNFLFVBQUQsRUFBYUMsY0FBYixFQUFnQztBQUMvQyxnQkFBSUQsVUFBVSxDQUFDTCxVQUFYLENBQXNCTyxLQUF0QixDQUE0QkMsZUFBaEMsRUFBaUQ7QUFDL0NSLGNBQUFBLFVBQVUsQ0FBQ1MsUUFBWCxDQUNFQyw4QkFBYUMsa0JBQWIsQ0FBZ0M7QUFDOUJDLGdCQUFBQSxHQUFHLEVBQUVaLFVBQVUsQ0FBQ08sS0FBWCxDQUFpQkssR0FEUTtBQUU5QkMsZ0JBQUFBLFVBQVUsRUFBRWIsVUFBVSxDQUFDTyxLQUFYLENBQWlCTyxNQUFqQixDQUF3QmQsVUFBVSxDQUFDTyxLQUFYLENBQWlCUSxLQUF6QyxFQUFnREg7QUFGOUIsZUFBaEMsQ0FERjtBQU1EOztBQUNELGdCQUFJUixnQkFBSixFQUFxQkEsZ0JBQWUsQ0FBQ0MsVUFBRCxFQUFhQyxjQUFiLENBQWY7QUFDdEI7QUFsQkgsVUFERjtBQXNCRDtBQS9DZ0Q7QUFBQTtBQUFBLElBb0JqQlUsZUFBTUMsU0FwQlc7O0FBa0RuRCxNQUFNQyxNQUFNLEdBQUcsa0NBQVloQyxjQUFaLEVBQTRCUyxpQkFBNUIsQ0FBZjtBQUNBLFNBQU8sc0NBQWdCRyxtQkFBaEIsRUFBcUNvQixNQUFyQyxFQUE2Qy9CLFdBQTdDLENBQVA7QUFDRCxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gIFN0YWNrUm91dGVyLFxuICBjcmVhdGVOYXZpZ2F0b3IsXG4gIFN0YWNrQWN0aW9ucyxcbiAgZ2V0Q3VzdG9tQWN0aW9uQ3JlYXRvcnMsXG4gIGRlZmF1bHROYXZpZ2F0aW9uT3B0aW9ucyBhcyByZWFjdE5hdmlnYXRpb25EZWZhdWx0TmF2aWdhdGlvbk9wdGlvbnMsXG59IGZyb20gJ3JlYWN0LW5hdmlnYXRpb24nO1xuXG5pbXBvcnQgRmx1aWRUcmFuc2l0aW9uZXIgZnJvbSAnLi9GbHVpZFRyYW5zaXRpb25lcic7XG5cbmV4cG9ydCBkZWZhdWx0IChyb3V0ZUNvbmZpZ01hcCwgc3RhY2tDb25maWcgPSB7fSkgPT4ge1xuICBjb25zdCB7XG4gICAgaW5pdGlhbFJvdXRlTmFtZSxcbiAgICBpbml0aWFsUm91dGVQYXJhbXMsXG4gICAgcGF0aHMsXG4gICAgbW9kZSxcbiAgICB0cmFuc2l0aW9uQ29uZmlnLFxuICAgIGRlZmF1bHROYXZpZ2F0aW9uT3B0aW9ucyxcbiAgICBzdHlsZSxcbiAgfSA9IHN0YWNrQ29uZmlnO1xuXG4gIGNvbnN0IHN0YWNrUm91dGVyQ29uZmlnID0ge1xuICAgIC4uLnJlYWN0TmF2aWdhdGlvbkRlZmF1bHROYXZpZ2F0aW9uT3B0aW9ucyxcbiAgICBpbml0aWFsUm91dGVOYW1lLFxuICAgIGluaXRpYWxSb3V0ZVBhcmFtcyxcbiAgICBwYXRocyxcbiAgICBkZWZhdWx0TmF2aWdhdGlvbk9wdGlvbnMsXG4gICAgZ2V0Q3VzdG9tQWN0aW9uQ3JlYXRvcnMsXG4gIH07XG5cbiAgY2xhc3MgRmx1aWROYXZpZ2F0aW9uVmlldyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgY29uc3QgeyBuYXZpZ2F0aW9uLCBzY3JlZW5Qcm9wcywgZGVzY3JpcHRvcnMsIG9uVHJhbnNpdGlvblN0YXJ0LFxuICAgICAgICBvblRyYW5zaXRpb25FbmQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxGbHVpZFRyYW5zaXRpb25lclxuICAgICAgICAgIG1vZGU9e21vZGV9XG4gICAgICAgICAgc3R5bGU9e3N0eWxlfVxuICAgICAgICAgIG5hdmlnYXRpb249e25hdmlnYXRpb259XG4gICAgICAgICAgc2NyZWVuUHJvcHM9e3NjcmVlblByb3BzfVxuICAgICAgICAgIGRlc2NyaXB0b3JzPXtkZXNjcmlwdG9yc31cbiAgICAgICAgICB0cmFuc2l0aW9uQ29uZmlnPXt0cmFuc2l0aW9uQ29uZmlnfVxuICAgICAgICAgIG9uVHJhbnNpdGlvblN0YXJ0PXtvblRyYW5zaXRpb25TdGFydH1cbiAgICAgICAgICBvblRyYW5zaXRpb25FbmQ9eyh0cmFuc2l0aW9uLCBsYXN0VHJhbnNpdGlvbikgPT4ge1xuICAgICAgICAgICAgaWYgKHRyYW5zaXRpb24ubmF2aWdhdGlvbi5zdGF0ZS5pc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgICAgICAgICAgbmF2aWdhdGlvbi5kaXNwYXRjaChcbiAgICAgICAgICAgICAgICBTdGFja0FjdGlvbnMuY29tcGxldGVUcmFuc2l0aW9uKHtcbiAgICAgICAgICAgICAgICAgIGtleTogbmF2aWdhdGlvbi5zdGF0ZS5rZXksXG4gICAgICAgICAgICAgICAgICB0b0NoaWxkS2V5OiBuYXZpZ2F0aW9uLnN0YXRlLnJvdXRlc1tuYXZpZ2F0aW9uLnN0YXRlLmluZGV4XS5rZXlcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvblRyYW5zaXRpb25FbmQpIG9uVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uLCBsYXN0VHJhbnNpdGlvbik7XG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgcm91dGVyID0gU3RhY2tSb3V0ZXIocm91dGVDb25maWdNYXAsIHN0YWNrUm91dGVyQ29uZmlnKTtcbiAgcmV0dXJuIGNyZWF0ZU5hdmlnYXRvcihGbHVpZE5hdmlnYXRpb25WaWV3LCByb3V0ZXIsIHN0YWNrQ29uZmlnKTtcbn07XG4iXX0=