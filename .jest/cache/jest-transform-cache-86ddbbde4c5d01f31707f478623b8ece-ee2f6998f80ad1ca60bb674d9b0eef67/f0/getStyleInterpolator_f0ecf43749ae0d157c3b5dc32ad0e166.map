{"version":3,"sources":["getStyleInterpolator.js"],"names":["getStyleInterpolator","key","defaultValue","useNative","spec","fromStyle","from","style","toStyle","to","fromValue","toValue","parsed","parseInt","Number","isNaN","scaleX","interpolator","getInterpolation","interpolate","inputRange","outputRange"],"mappings":";;;;;AAAA;;AACA;;AAEO,IAAMA,oBAAoB,GAAG,SAAvBA,oBAAuB,CAClCC,GADkC,EAElCC,YAFkC,EAGlCC,SAHkC,EAIlCC,IAJkC,EAKZ;AACtB,MAAMC,SAAS,GAAGD,IAAI,CAACE,IAAL,CAAUC,KAA5B;AACA,MAAMC,OAAO,GAAGJ,IAAI,CAACK,EAAL,CAAQF,KAAxB;AAEA,MAAI,CAAC,CAACF,SAAD,IAAc,CAACA,SAAS,CAACJ,GAAD,CAAzB,MACE,CAACO,OAAD,IAAY,CAACA,OAAO,CAACP,GAAD,CADtB,CAAJ,EACkC,OAAO,IAAP;AAElC,MAAMS,SAAS,GAAGL,SAAS,IAAIA,SAAS,CAACJ,GAAD,CAAtB,GAA8BI,SAAS,CAACJ,GAAD,CAAvC,GAA+CC,YAAjE;AACA,MAAIS,OAAO,GAAGH,OAAO,IAAIA,OAAO,CAACP,GAAD,CAAlB,GAA0BO,OAAO,CAACP,GAAD,CAAjC,GAAyCC,YAAvD;AAEA,MAAIQ,SAAS,KAAKC,OAAlB,EAA2B,OAAO,IAAP;AAG3B,MAAMC,MAAM,GAAGC,QAAQ,CAACF,OAAD,EAAU,EAAV,CAAvB;;AACA,MAAI,CAACG,MAAM,CAACC,KAAP,CAAaH,MAAb,CAAL,EAA2B;AACzBD,IAAAA,OAAO,GAAGC,MAAM,GAAGR,IAAI,CAACY,MAAxB;AACD;;AAED,MAAMC,YAAY,GAAIb,IAAI,CAACc,gBAAL,CAAsBf,SAAtB,CAAD,CAClBgB,WADkB,CACN;AACXC,IAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADD;AAEXC,IAAAA,WAAW,EAAE,CAACX,SAAD,EAAYC,OAAZ;AAFF,GADM,CAArB;AAMA,SAAOM,YAAP;AACD,CA9BM","sourcesContent":["import { StyleSheet } from 'react-native';\nimport { InterpolatorSpecification } from '../Types/InterpolatorSpecification';\n\nexport const getStyleInterpolator = (\n  key: String,\n  defaultValue: any,\n  useNative: boolean,\n  spec: InterpolatorSpecification,\n): StyleSheet.Styles => {\n  const fromStyle = spec.from.style;\n  const toStyle = spec.to.style;\n\n  if ((!fromStyle || !fromStyle[key])\n    && (!toStyle ||Â !toStyle[key])) return null;\n\n  const fromValue = fromStyle && fromStyle[key] ? fromStyle[key] : defaultValue;\n  let toValue = toStyle && toStyle[key] ? toStyle[key] : defaultValue;\n\n  if (fromValue === toValue) return null;\n\n  // Handle scaling of numeric values\n  const parsed = parseInt(toValue, 10);\n  if (!Number.isNaN(parsed)) {\n    toValue = parsed / spec.scaleX;\n  }\n\n  const interpolator = (spec.getInterpolation(useNative))\n    .interpolate({\n      inputRange: [0, 1],\n      outputRange: [fromValue, toValue],\n    });\n\n  return interpolator;\n};\n"]}