b444a4242e333d4acc262b9be89215d9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactIs = require("react-is");

var _invariant = _interopRequireDefault(require("../utils/invariant"));

function validateRouteConfigMap(routeConfigs) {
  var routeNames = Object.keys(routeConfigs);
  (0, _invariant.default)(routeNames.length > 0, 'Please specify at least one route when configuring a navigator.');
  routeNames.forEach(function (routeName) {
    var routeConfig = routeConfigs[routeName];
    var screenComponent = getScreenComponent(routeConfig);

    if (!screenComponent || !(0, _reactIs.isValidElementType)(screenComponent) && !routeConfig.getScreen) {
      throw new Error("The component for route '" + routeName + "' must be a React component. For example:\n\nimport MyScreen from './MyScreen';\n...\n" + routeName + ": MyScreen,\n}\n\nYou can also use a navigator:\n\nimport MyNavigator from './MyNavigator';\n...\n" + routeName + ": MyNavigator,\n}");
    }

    if (routeConfig.screen && routeConfig.getScreen) {
      throw new Error("Route '" + routeName + "' should declare a screen or a getScreen, not both.");
    }
  });
}

function getScreenComponent(routeConfig) {
  if (!routeConfig) {
    return null;
  }

  return routeConfig.screen ? routeConfig.screen : routeConfig;
}

var _default = validateRouteConfigMap;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbGlkYXRlUm91dGVDb25maWdNYXAuanMiXSwibmFtZXMiOlsicm91dGVOYW1lcyIsIk9iamVjdCIsInJvdXRlQ29uZmlnIiwicm91dGVDb25maWdzIiwic2NyZWVuQ29tcG9uZW50IiwiZ2V0U2NyZWVuQ29tcG9uZW50IiwidmFsaWRhdGVSb3V0ZUNvbmZpZ01hcCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUEsUUFBQSxHQUFBLE9BQUEsQ0FBQSxVQUFBLENBQUE7O0FBRUEsSUFBQSxVQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsb0JBQUEsQ0FBQSxDQUFBOztBQU1BLFNBQUEsc0JBQUEsQ0FBQSxZQUFBLEVBQThDO0FBQzVDLE1BQU1BLFVBQVUsR0FBR0MsTUFBTSxDQUFOQSxJQUFBQSxDQUFuQixZQUFtQkEsQ0FBbkI7QUFDQSxHQUFBLEdBQUEsVUFBQSxDQUFBLE9BQUEsRUFDRUQsVUFBVSxDQUFWQSxNQUFBQSxHQURGLENBQUEsRUFBQSxpRUFBQTtBQUtBQSxFQUFBQSxVQUFVLENBQVZBLE9BQUFBLENBQW1CLFVBQUEsU0FBQSxFQUFhO0FBQzlCLFFBQU1FLFdBQVcsR0FBR0MsWUFBWSxDQUFoQyxTQUFnQyxDQUFoQztBQUNBLFFBQU1DLGVBQWUsR0FBR0Msa0JBQWtCLENBQTFDLFdBQTBDLENBQTFDOztBQUVBLFFBQ0UsQ0FBQSxlQUFBLElBQ0MsQ0FBQyxDQUFBLEdBQUEsUUFBQSxDQUFBLGtCQUFBLEVBQUQsZUFBQyxDQUFELElBQXdDLENBQUNILFdBQVcsQ0FGdkQsU0FBQSxFQUdFO0FBQ0EsWUFBTSxJQUFBLEtBQUEsQ0FBQSw4QkFBQSxTQUFBLEdBQUEsd0ZBQUEsR0FBQSxTQUFBLEdBQUEsb0dBQUEsR0FBQSxTQUFBLEdBQU4sbUJBQU0sQ0FBTjtBQWVGOztBQUFBLFFBQUlBLFdBQVcsQ0FBWEEsTUFBQUEsSUFBc0JBLFdBQVcsQ0FBckMsU0FBQSxFQUFpRDtBQUMvQyxZQUFNLElBQUEsS0FBQSxDQUFBLFlBQUEsU0FBQSxHQUFOLHFEQUFNLENBQU47QUFJSDtBQTVCREYsR0FBQUE7QUErQkY7O0FBQUEsU0FBQSxrQkFBQSxDQUFBLFdBQUEsRUFBeUM7QUFDdkMsTUFBSSxDQUFKLFdBQUEsRUFBa0I7QUFDaEIsV0FBQSxJQUFBO0FBR0Y7O0FBQUEsU0FBT0UsV0FBVyxDQUFYQSxNQUFBQSxHQUFxQkEsV0FBVyxDQUFoQ0EsTUFBQUEsR0FBUCxXQUFBOzs7ZUFHYUksc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUgfSBmcm9tICdyZWFjdC1pcyc7XG5cbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnLi4vdXRpbHMvaW52YXJpYW50JztcblxuLyoqXG4gKiBNYWtlIHN1cmUgdGhlIGNvbmZpZyBwYXNzZWQgZS5nLiB0byBTdGFja1JvdXRlciwgVGFiUm91dGVyIGhhc1xuICogdGhlIGNvcnJlY3QgZm9ybWF0LCBhbmQgdGhyb3cgYSBjbGVhciBlcnJvciBpZiBpdCBkb2Vzbid0LlxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZVJvdXRlQ29uZmlnTWFwKHJvdXRlQ29uZmlncykge1xuICBjb25zdCByb3V0ZU5hbWVzID0gT2JqZWN0LmtleXMocm91dGVDb25maWdzKTtcbiAgaW52YXJpYW50KFxuICAgIHJvdXRlTmFtZXMubGVuZ3RoID4gMCxcbiAgICAnUGxlYXNlIHNwZWNpZnkgYXQgbGVhc3Qgb25lIHJvdXRlIHdoZW4gY29uZmlndXJpbmcgYSBuYXZpZ2F0b3IuJ1xuICApO1xuXG4gIHJvdXRlTmFtZXMuZm9yRWFjaChyb3V0ZU5hbWUgPT4ge1xuICAgIGNvbnN0IHJvdXRlQ29uZmlnID0gcm91dGVDb25maWdzW3JvdXRlTmFtZV07XG4gICAgY29uc3Qgc2NyZWVuQ29tcG9uZW50ID0gZ2V0U2NyZWVuQ29tcG9uZW50KHJvdXRlQ29uZmlnKTtcblxuICAgIGlmIChcbiAgICAgICFzY3JlZW5Db21wb25lbnQgfHxcbiAgICAgICghaXNWYWxpZEVsZW1lbnRUeXBlKHNjcmVlbkNvbXBvbmVudCkgJiYgIXJvdXRlQ29uZmlnLmdldFNjcmVlbilcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGNvbXBvbmVudCBmb3Igcm91dGUgJyR7cm91dGVOYW1lfScgbXVzdCBiZSBhIFJlYWN0IGNvbXBvbmVudC4gRm9yIGV4YW1wbGU6XG5cbmltcG9ydCBNeVNjcmVlbiBmcm9tICcuL015U2NyZWVuJztcbi4uLlxuJHtyb3V0ZU5hbWV9OiBNeVNjcmVlbixcbn1cblxuWW91IGNhbiBhbHNvIHVzZSBhIG5hdmlnYXRvcjpcblxuaW1wb3J0IE15TmF2aWdhdG9yIGZyb20gJy4vTXlOYXZpZ2F0b3InO1xuLi4uXG4ke3JvdXRlTmFtZX06IE15TmF2aWdhdG9yLFxufWApO1xuICAgIH1cblxuICAgIGlmIChyb3V0ZUNvbmZpZy5zY3JlZW4gJiYgcm91dGVDb25maWcuZ2V0U2NyZWVuKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBSb3V0ZSAnJHtyb3V0ZU5hbWV9JyBzaG91bGQgZGVjbGFyZSBhIHNjcmVlbiBvciBhIGdldFNjcmVlbiwgbm90IGJvdGguYFxuICAgICAgKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRTY3JlZW5Db21wb25lbnQocm91dGVDb25maWcpIHtcbiAgaWYgKCFyb3V0ZUNvbmZpZykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHJvdXRlQ29uZmlnLnNjcmVlbiA/IHJvdXRlQ29uZmlnLnNjcmVlbiA6IHJvdXRlQ29uZmlnO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YWxpZGF0ZVJvdXRlQ29uZmlnTWFwO1xuIl19