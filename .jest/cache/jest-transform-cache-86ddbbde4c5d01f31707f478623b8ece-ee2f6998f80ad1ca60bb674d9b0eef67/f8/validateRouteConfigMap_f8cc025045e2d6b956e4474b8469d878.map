{"version":3,"sources":["validateRouteConfigMap.js"],"names":["routeNames","Object","routeConfig","routeConfigs","screenComponent","getScreenComponent","validateRouteConfigMap"],"mappings":";;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA;;AAMA,SAAA,sBAAA,CAAA,YAAA,EAA8C;AAC5C,MAAMA,UAAU,GAAGC,MAAM,CAANA,IAAAA,CAAnB,YAAmBA,CAAnB;AACA,GAAA,GAAA,UAAA,CAAA,OAAA,EACED,UAAU,CAAVA,MAAAA,GADF,CAAA,EAAA,iEAAA;AAKAA,EAAAA,UAAU,CAAVA,OAAAA,CAAmB,UAAA,SAAA,EAAa;AAC9B,QAAME,WAAW,GAAGC,YAAY,CAAhC,SAAgC,CAAhC;AACA,QAAMC,eAAe,GAAGC,kBAAkB,CAA1C,WAA0C,CAA1C;;AAEA,QACE,CAAA,eAAA,IACC,CAAC,CAAA,GAAA,QAAA,CAAA,kBAAA,EAAD,eAAC,CAAD,IAAwC,CAACH,WAAW,CAFvD,SAAA,EAGE;AACA,YAAM,IAAA,KAAA,CAAA,8BAAA,SAAA,GAAA,wFAAA,GAAA,SAAA,GAAA,oGAAA,GAAA,SAAA,GAAN,mBAAM,CAAN;AAeF;;AAAA,QAAIA,WAAW,CAAXA,MAAAA,IAAsBA,WAAW,CAArC,SAAA,EAAiD;AAC/C,YAAM,IAAA,KAAA,CAAA,YAAA,SAAA,GAAN,qDAAM,CAAN;AAIH;AA5BDF,GAAAA;AA+BF;;AAAA,SAAA,kBAAA,CAAA,WAAA,EAAyC;AACvC,MAAI,CAAJ,WAAA,EAAkB;AAChB,WAAA,IAAA;AAGF;;AAAA,SAAOE,WAAW,CAAXA,MAAAA,GAAqBA,WAAW,CAAhCA,MAAAA,GAAP,WAAA;;;eAGaI,sB","sourcesContent":["import { isValidElementType } from 'react-is';\n\nimport invariant from '../utils/invariant';\n\n/**\n * Make sure the config passed e.g. to StackRouter, TabRouter has\n * the correct format, and throw a clear error if it doesn't.\n */\nfunction validateRouteConfigMap(routeConfigs) {\n  const routeNames = Object.keys(routeConfigs);\n  invariant(\n    routeNames.length > 0,\n    'Please specify at least one route when configuring a navigator.'\n  );\n\n  routeNames.forEach(routeName => {\n    const routeConfig = routeConfigs[routeName];\n    const screenComponent = getScreenComponent(routeConfig);\n\n    if (\n      !screenComponent ||\n      (!isValidElementType(screenComponent) && !routeConfig.getScreen)\n    ) {\n      throw new Error(`The component for route '${routeName}' must be a React component. For example:\n\nimport MyScreen from './MyScreen';\n...\n${routeName}: MyScreen,\n}\n\nYou can also use a navigator:\n\nimport MyNavigator from './MyNavigator';\n...\n${routeName}: MyNavigator,\n}`);\n    }\n\n    if (routeConfig.screen && routeConfig.getScreen) {\n      throw new Error(\n        `Route '${routeName}' should declare a screen or a getScreen, not both.`\n      );\n    }\n  });\n}\n\nfunction getScreenComponent(routeConfig) {\n  if (!routeConfig) {\n    return null;\n  }\n\n  return routeConfig.screen ? routeConfig.screen : routeConfig;\n}\n\nexport default validateRouteConfigMap;\n"]}